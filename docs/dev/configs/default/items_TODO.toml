
[02_political_start.002_non_participation]
lvl.default = "{ c('', 'cantonal'[any(has_lvl(ballot_date = ballot_date, lvl = 'cantonal', canton = canton)) && any(has_lvl(ballot_date = ballot_date, lvl = 'federal', canton = canton))]) }"
lvl.20180923_20181125 = ""
who = "{ ifelse(lvl == 'cantonal', 'kantonal nicht-teilnehmende Online-Respondenten', 'Nicht-Teilnehmende') }"
response_options = [ "trifft nicht zu", "trifft zu", "weiss nicht" ]
variable_values = [ 0, 1, 99 ]
value_labels = [ "is not true", "is true", "don't know" ]
value_scale = "binary"
[02_political_start.002_non_participation.001_both]
question_intro_i.referendum = "Nachfolgend sehen Sie verschiedene Gründe, weshalb man an Abstimmungen nicht teilnimmt. Bitte sagen Sie uns jeweils, ob der angegebene Grund für { ifelse(lvl == 'cantonal', 'Ihre Nichtteilnahme/Enthaltung an den **kantonalen Abstimmungen**', 'Sie') } zutrifft oder nicht."
question_intro_i.election = "Nachfolgend sehen Sie verschiedene Gründe, weshalb man an Wahlen nicht teilnimmt. Bitte sagen Sie uns jeweils, ob der angegebene Grund für { ifelse(lvl == 'cantonal', 'Ihre Nichtteilnahme/Enthaltung an den **kantonalen Wahlen**', 'Sie') } zutrifft oder nicht."
question_full = "Trifft «{question}» als Grund für Ihre Nichtteilnahme/Enthaltung an den{ ifelse(lvl == 'cantonal', ' **kantonalen**', '') } Abstimmungen/Wahlen zu oder nicht?"
[[02_political_start.002_non_participation.001_both.item]]
id = "reason_non_participation{ ifelse(lvl == 'cantonal', '_cantonal', '') }_indecision"
# set iterator to trigger `question_intro_i`
i = 1
name.de = "Grund für{ ifelse(lvl == 'cantonal', ' _kantonale_', '') } Nicht-Teilnahme: Unentschlossenheit"
question = "_Ich konnte mich nicht entscheiden._"
description.en = "whether or not indecision was a reason for the respondent to abstain from voting{ ifelse(lvl == 'cantonal', ' on cantonal matters', '') }"
[[02_political_start.002_non_participation.001_both.item]]
id = "reason_non_participation{ ifelse(lvl == 'cantonal', '_cantonal', '') }_disinterest"
name.de = "Grund für{ ifelse(lvl == 'cantonal', ' _kantonale_', '') } Nicht-Teilnahme: Desinteresse"
question.default.referendum = "_Die Abstimmungsthemen haben mich nicht interessiert._"
question.default.election = "_Ich interessiere mich nicht für Politik._"
question_common = "Trifft «Die Abstimmungsthemen haben mich nicht interessiert.» (Abstimmungen) bzw. «Ich interessiere mich nicht für Politik.» (Wahlen) als Grund für Ihre Nichtteilnahme/Enthaltung an den { ifelse(lvl == 'cantonal', '**kantonalen**', '') } Abstimmungen/Wahlen zu oder nicht?"
variable_label.default.referendum = "whether or not disinterest in the voting topics was a reason for the respondent to abstain from voting{ ifelse(lvl == 'cantonal', ' on cantonal matters', '') }"
variable_label.default.election = "whether or not disinterest in politics was a reason for the respondent to abstain from voting{ ifelse(lvl == 'cantonal', ' on cantonal matters', '') }"
variable_label_common = "whether or not disinterest was a reason for the respondent to abstain from voting{ ifelse(lvl == 'cantonal', ' on cantonal matters', '') }"
[[02_political_start.002_non_participation.001_both.item]]
id = "reason_non_participation{ ifelse(lvl == 'cantonal', '_cantonal', '') }_complexity"
name.de = "Grund für{ ifelse(lvl == 'cantonal', ' _kantonale_', '') } Nicht-Teilnahme: Überforderung"
question.default.referendum = "_Die Abstimmungsthemen waren zu kompliziert._"
question.default.election = "_Die Wahlen sind zu kompliziert._"
question_common = "Trifft «Die Abstimmungsthemen waren zu kompliziert.» (Abstimmungen) bzw. «Die Wahlen sind zu kompliziert.» (Wahlen) als Grund für Ihre Nichtteilnahme/Enthaltung an den { ifelse(lvl == 'cantonal', '**kantonalen**', '') } Abstimmungen/Wahlen zu oder nicht?"
variable_label.default.referendum = "whether or not the voting topics being too complicated was a reason for the respondent to abstain from voting{ ifelse(lvl == 'cantonal', ' on cantonal matters', '') }"
variable_label.default.election = "whether or not the election being too complicated was a reason for the respondent to abstain from voting{ ifelse(lvl == 'cantonal', ' on cantonal matters', '') }"
variable_label_common = "whether or not complexity was a reason for the respondent to abstain from voting{ ifelse(lvl == 'cantonal', ' on cantonal matters', '') }"
[[02_political_start.002_non_participation.001_both.item]]
# NOTE: We deprecated the `reason_non_participation_cantonal_hindrance` item since it doesn't really make sense (how could one possibly be hindered to participate in the cantonal but not the federal ballot?)
id = "reason_non_participation{ ifelse(lvl == 'cantonal', '_cantonal', '') }_hindrance"
lvl.default = ""
lvl.20191020 = [ "", "cantonal"]
name.de = "Grund für{ ifelse(lvl == 'cantonal', ' _kantonale_', '') } Nicht-Teilnahme: Verhinderung"
question = "_Ich bin verhindert gewesen (z. B. Auslandaufenthalt, Krankheit, Ferien)._"
description.en = "whether or not being unable to attend was a reason for the respondent to abstain from voting{ ifelse(lvl == 'cantonal', ' on cantonal matters', '') }"
[[02_political_start.002_non_participation.001_both.item]]
name.de = "Grund für{ ifelse(lvl == 'cantonal', ' _kantonale_', '') } Nicht-Teilnahme: Wirkungslosigkeit"
question.default.referendum = "_Ich bin der Meinung, dass Abstimmungen ohnehin nichts ändern._"
question.default.election = "_Ich bin der Meinung, dass Wahlen ohnehin nichts ändern._"
question_common = "Trifft «Ich bin der Meinung, dass Abstimmungen ohnehin nichts ändern.» (Abstimmungen) bzw. «Ich bin der Meinung, dass Wahlen ohnehin nichts ändern.» (Wahlen) als Grund für Ihre Nichtteilnahme/Enthaltung an den { ifelse(lvl == 'cantonal', '**kantonalen**', '') } Abstimmungen/Wahlen zu oder nicht?"
id = "reason_non_participation{ ifelse(lvl == 'cantonal', '_cantonal', '') }_ineffectiveness"
variable_label.default.referendum = "whether or not to think that referendums don't change anything anyway was a reason for the respondent to abstain from voting{ ifelse(lvl == 'cantonal', ' on cantonal matters', '') }"
variable_label.default.election = "whether or not to think that elections don't change anything anyway was a reason for the respondent to abstain from voting{ ifelse(lvl == 'cantonal', ' on cantonal matters', '') }"
variable_label_common = "whether or not to think that referendums/elections don't change anything anyway was a reason for the respondent to abstain from voting{ ifelse(lvl == 'cantonal', ' on cantonal matters', '') }"
[[02_political_start.002_non_participation.001_both.item]]
name.de = "Grund für{ ifelse(lvl == 'cantonal', ' _kantonale_', '') } Nicht-Teilnahme: Bedeutungslosigkeit der eigenen Stimme"
question = "_Ich bin der Meinung, dass es auf meine Stimme sowieso nicht ankommt._"
id = "reason_non_participation{ ifelse(lvl == 'cantonal', '_cantonal', '') }_insignificance"
description.en = "whether or not to think that your own vote doesn't matter anyway was a reason for the respondent to abstain from voting{ ifelse(lvl == 'cantonal', ' on cantonal matters', '') }"
[[02_political_start.002_non_participation.001_both.item]]
name.de = "Grund für{ ifelse(lvl == 'cantonal', ' _kantonale_', '') } Nicht-Teilnahme: Vergessen teilzunehmen"
question.default.referendum = "_Ich habe vergessen an der Abstimmung teilzunehmen._"
question.default.election = "_Ich habe vergessen teilzunehmen._"
question_common = "Trifft «Ich habe vergessen teilzunehmen.» als Grund für Ihre Nichtteilnahme/Enthaltung an den { ifelse(lvl == 'cantonal', '**kantonalen**', '') } Abstimmungen/Wahlen zu oder nicht?"
id = "reason_non_participation{ ifelse(lvl == 'cantonal', '_cantonal', '') }_forgetfulness"
variable_label.default.referendum = "whether or not the respondent forgot to take part in the{ ifelse(lvl == 'cantonal', ' cantonal', '') } vote"
variable_label.default.election = "whether or not the respondent forgot to take part in the{ ifelse(lvl == 'cantonal', ' cantonal', '') } election"
variable_label_common = "whether or not the respondent forgot to take part in the{ ifelse(lvl == 'cantonal', ' cantonal', '') } ballot"
[02_political_start.002_non_participation.002_referendum]
ballot_types = [ "referendum" ]
[[02_political_start.002_non_participation.002_referendum.item]]
name.de = "Grund für{ ifelse(lvl == 'cantonal', ' _kantonale_', '') } Nicht-Teilnahme: Ergebnis sowieso klar"
question = "_Ich bin davon ausgegangen, dass das Abstimmungsergebnis sowieso klar gewesen ist._"
id = "reason_non_participation{ ifelse(lvl == 'cantonal', '_cantonal', '') }_outcome_clear"
description.en = "whether or not to think that the result of the vote was clear anyway was a reason for the respondent to abstain from voting{ ifelse(lvl == 'cantonal', ' on cantonal matters', '') }"
[02_political_start.002_non_participation.003_election]
ballot_types = [ "election" ]
[[02_political_start.002_non_participation.003_election.item]]
name.de = "Grund für{ ifelse(lvl == 'cantonal', ' _kantonale_', '') } Nicht-Teilnahme: Keine valablen KandidatInnen"
question = "_Keine Partei und kein Kandidat, keine Kandidatin überzeugten mich._"
id = "reason_non_participation{ ifelse(lvl == 'cantonal', '_cantonal', '') }_no_convincing_options"
description.en = "whether or not finding no party or candidate convincing enough was a reason for the respondent to abstain from voting{ ifelse(lvl == 'cantonal', ' on cantonal matters', '') }"
[[02_political_start.002_non_participation.003_election.item]]
name.de = "Grund für{ ifelse(lvl == 'cantonal', ' _kantonale_', '') } Nicht-Teilnahme: Bevorzugte Partei/KandidatIn chancenlos"
question = "_Meine bevorzugte Partei bzw. meine bevorzugte Kandidatin, mein bevorzugter Kandidat hatte keine Chance, gewählt zu werden._"
id = "reason_non_participation{ ifelse(lvl == 'cantonal', '_cantonal', '') }_no_chance"
description.en = "whether or not the favorite party or candidate not standing a chance was a reason for the respondent to abstain from voting{ ifelse(lvl == 'cantonal', ' on cantonal matters', '') }"
[02_political_start.002_non_participation.003_election.z01_hypothetical]
who = "qualifizierte Nicht-Teilnehmende"
value_scale = "nominal"
lvl = ""
[[02_political_start.002_non_participation.003_election.z01_hypothetical.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional') }"
name.de = "Hypothetischer Stimmentscheid Partei eidgenössische Verhältniswahl {i}"
question_intro_i = "Wenn Sie an den Wahlen teilgenommen hätten:"
question = """
Welche Partei hätten Sie in den eidgenössischen **{
  election_name(ballot_date = ballot_date,
                lvl = 'federal',
                canton = canton,
                prcd = 'proportional',
                election_nr = i,
                lang = 'de',
                type = 'body')
}** gewählt, d. h. von welcher Partei hätten Sie _am meisten_ KandidatInnen gewählt?"""
question_common = "Welche Partei hätten Sie bei der eidgenössischen Verhältniswahl {i} gewählt, d. h. von welcher Partei hätten Sie _am meisten_ KandidatInnen gewählt?"
id = "hypothetical_voting_decision_federal_proportional_election_{i}_party"
description.en = "the party the respondent would have voted for in the federal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\" if the respondent would have participated"
variable_label_common = "the party the respondent would have voted for in the { salim::rank_nr(i) } federal proportional election if the respondent would have participated"
response_options = "{ election_parties(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) %$% name.de.q %>% c(response_options(type = 'dunno', lang = 'de', subtypes = 'main')) }"
variable_values = "{ election_parties(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) %$% code %>% c(q_response_option_codes(types = 'dunno')) }"
value_labels = "{ election_parties(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) %$% name.de.short %>% c(response_options(type = 'dunno', lang = 'en', subtypes = 'main')) }"
[[02_political_start.002_non_participation.003_election.z01_hypothetical.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'majoritarian') }"
j = "{ seq_len(n_election_seats(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i, type = 'vacant')) }"
name.de = "Hypothetischer Stimmentscheid Sitz {j} eidgenössische Mehrheitswahl {i}"
question_intro_j = """
Wenn Sie an den Wahlen teilgenommen hätten, {
  ifelse(n_election_seats(ballot_date = ballot_date,
                          lvl = 'federal',
                          canton = canton,
                          election_nr = i,
                          type = 'vacant') > 1L,
         paste0('welche ',
                salim::write_out_n(n_election_seats(ballot_date = ballot_date,
                                                    lvl = 'federal',
                                                    canton = canton,
                                                    election_nr = i,
                                                    type = 'vacant'),
                                                    lang = 'de'),
                ' KandidatInnen'),
         'wen')
} hätten Sie in den eidgenössischen **{
  election_name(ballot_date = ballot_date,
                lvl = 'federal',
                canton = canton,
                prcd = 'majoritarian',
                election_nr = i,
                lang = 'de',
                type = 'body')
}** gewählt?"""
question = """
{
  ifelse(n_election_seats(ballot_date = ballot_date,
                                  lvl = 'federal',
                                  canton = canton,
                                  election_nr = i,
                                  type = 'vacant') > 1L,
         glue::glue('_KandidatIn {j}_'),
         '')
}"""
question_common = "Wen hätten Sie bei der eidgenössischen Mehrheitswahl {i} gewählt? _KandidatIn {j}_"
id = "hypothetical_voting_decision_federal_majoritarian_election_{i}_seat_{j}"
description.en = "the { salim::rank_nr(j) } candidate the respondent would have voted for in the federal majoritarian election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'long') }\" ({ salim::rank_nr(j) } seat) if the respondent would have participated"
variable_label_common = "the { salim::rank_nr(j) } candidate the respondent would have voted for in the { salim::rank_nr(i) } federal majoritarian election ({ salim::rank_nr(j) } seat) if the respondent would have participated"
response_options = """
{
  election_candidate_prose(ballot_date = ballot_date,
                           lvl = 'federal',
                           canton = canton,
                           election_nr = i) %>%
    purrr::when(requires_candidate_registration(ballot_date = ballot_date,
                                                lvl = 'federal',
                                                canton = canton,
                                                election_nr = i) ~ .,
                ~ c(., response_options(type = 'other',
                                        lang = 'de',
                                        subtypes = 'candidate'))) %>%
    c(response_options(type = 'dunno',
                       lang = 'de',
                       subtypes = 'main'))
}"""
variable_values = "{ seq_len(nrow(election_candidates(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i))) %>% purrr::when(requires_candidate_registration(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) ~ ., ~ c(., q_response_option_codes(types = 'other'))) %>% c(q_response_option_codes(types = 'dunno')) }"
value_labels = "{ election_candidate_prose(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) %>% purrr::when(requires_candidate_registration(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) ~ ., ~ c(., response_options(type = 'other', lang = 'en', subtypes = 'candidate'))) %>% c(response_options(type = 'dunno', lang = 'en', subtypes = 'main')) }"
[[02_political_start.002_non_participation.003_election.z01_hypothetical.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional') }"
name.de = "Hypothetischer Stimmentscheid Partei kantonale Verhältniswahl {i}"
question_intro_i = "Wenn Sie an den Wahlen teilgenommen hätten:"
question = """
Welche Partei hätten Sie in den kantonalen **{
  election_name(ballot_date = ballot_date,
                lvl = 'cantonal',
                canton = canton,
                prcd = 'proportional',
                election_nr = i,
                lang = 'de',
                type = 'body_alt')
}** gewählt, d. h. von welcher Partei hätten Sie _am meisten_ KandidatInnen gewählt?"""
question_common = "Welche Partei hätten Sie bei der kantonalen Verhältniswahl {i} gewählt, d. h. von welcher Partei hätten Sie _am meisten_ KandidatInnen gewählt?"
id = "hypothetical_voting_decision_cantonal_proportional_election_{i}_party"
description.en = "the party the respondent would have voted for in the cantonal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\" if the respondent would have participated"
variable_label_common = "the party the respondent would have voted for in the { salim::rank_nr(i) } cantonal proportional election if the respondent would have participated"
response_options = "{ election_parties(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %$% name.de.q %>% c(response_options(type = 'dunno', lang = 'de', subtypes = 'main')) }"
variable_values = "{ election_parties(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %$% code %>% c(q_response_option_codes(types = 'dunno')) }"
value_labels = "{ election_parties(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %$% name.de.short %>% c(response_options(type = 'dunno', lang = 'en', subtypes = 'main')) }"
[[02_political_start.002_non_participation.003_election.z01_hypothetical.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'majoritarian') }"
j = "{ seq_len(n_election_seats(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i, type = 'vacant')) }"
name.de = "Hypothetischer Stimmentscheid Sitz {j} kantonale Mehrheitswahl {i}"
question_intro_j = """
Wenn Sie an den Wahlen teilgenommen hätten, {
  ifelse(n_election_seats(ballot_date = ballot_date,
                          lvl = 'cantonal',
                          canton = canton,
                          election_nr = i,
                          type = 'vacant') > 1L,
         paste0('welche ',
                salim::write_out_n(n_election_seats(ballot_date = ballot_date,
                                                    lvl = 'cantonal',
                                                    canton = canton,
                                                    election_nr = i,
                                                    type = 'vacant'),
                                   lang = 'de'),
                ' KandidatInnen'),
         'wen')
} hätten Sie in den kantonalen **{
  election_name(ballot_date = ballot_date,
                lvl = 'cantonal',
                canton = canton,
                prcd = 'majoritarian',
                election_nr = i,
                lang = 'de',
                type = 'body')
}** gewählt?"""
question = """
{
  ifelse(n_election_seats(ballot_date = ballot_date,
                          lvl = 'cantonal',
                          canton = canton,
                          election_nr = i,
                          type = 'vacant') > 1L,
         glue::glue('_KandidatIn {j}_'),
         '')
}"""
question_common = "Wen hätten Sie bei der kantonalen Mehrheitswahl {i} gewählt? _KandidatIn {j}_"
id = "hypothetical_voting_decision_cantonal_majoritarian_election_{i}_seat_{j}"
description.en = "the { salim::rank_nr(j) } candidate the respondent would have voted for in the cantonal majoritarian election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'long') }\" if the respondent would have participated"
variable_label_common = "the { salim::rank_nr(j) } candidate the respondent would have voted for in the { salim::rank_nr(i) } cantonal majoritarian election if the respondent would have participated"
response_options = "{ election_candidate_prose(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %>% purrr::when(requires_candidate_registration(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) ~ ., ~ c(., response_options(type = 'other', lang = 'de', subtypes = 'candidate'))) %>% c(response_options(type = 'dunno', lang = 'de', subtypes = 'main')) }"
variable_values = "{ seq_len(n_election_candidates(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i)) %>% purrr::when(requires_candidate_registration(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) ~ ., ~ c(., q_response_option_codes(types = 'other'))) %>% c(q_response_option_codes(types = 'dunno')) }"
value_labels = "{ election_candidate_prose(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %>% purrr::when(requires_candidate_registration(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) ~ ., ~ c(., response_options(type = 'other', lang = 'en', subtypes = 'candidate'))) %>% c(response_options(type = 'dunno', lang = 'en', subtypes = 'main')) }"


[03_1_election_general]
title = "Allgemeine wahlbezogene Fragen"
ballot_types = [ "election" ]
who = "alle"
[[03_1_election_general.item]]
name.de = "Wichtigstes politisches Problem"
question = "Welches ist Ihrer Meinung nach gegenwärtig das **wichtigste politische Problem**, mit dem die Schweiz konfrontiert ist?"
id = "main_political_issue"
description.en = "issue in Swiss politics the respondent considers the most important one (choice of response options is based on the most recent [\"Credit Suisse Sorgenbarometer\"](https://de.wikipedia.org/wiki/Sorgenbarometer))"
response_options = "{ political_issues(ballot_date = ballot_date, lang = 'de') %>% c(response_options(type = 'custom', lang = 'de', subtypes = 'main'), response_options(type = 'dunno', lang = 'de', subtypes = 'main')) }"
variable_values = "{ seq_along(political_issues(ballot_date = ballot_date)) %>% c(q_response_option_codes(types = c('custom', 'dunno'))) }"
value_labels = "{ political_issues(ballot_date = ballot_date, lang = 'en') %>% c(response_options(type = 'custom', lang = 'en', subtypes = 'main'), response_options(type = 'dunno', lang = 'en', subtypes = 'main')) }"
randomize_response_options = true
[[03_1_election_general.item]]
name.de = "Kompetenteste Partei zur Lösung des wichtigsten politischen Problems"
question = "Welches ist Ihrer Meinung nach die kompetenteste Partei für die Lösung dieses Problems?"
id = "most_competent_party_main_political_issue"
description.en = "party the respondent considers to be most competent to solve the main political issue in Swiss politics"
response_options = "{ c(q_parties(ballot_date = ballot_date) %$% de.short, response_options(type = 'custom', lang = 'de', subtypes = 'party'), response_options(type = 'none', lang = 'de', subtypes = 'plural'), response_options(type = 'dunno', lang = 'de', subtypes = 'main')) }"
variable_values = "{ c(q_parties(ballot_date = ballot_date) %$% code, q_response_option_codes(types = c('custom', 'none', 'dunno'))) }"
value_labels = "{ c(q_parties(ballot_date = ballot_date) %$% en.short, response_options(type = 'custom', lang = 'en', subtypes = 'main'), response_options(type = 'none', lang = 'en', subtypes = 'main'), response_options(type = 'dunno', lang = 'en', subtypes = 'main')) }"
randomize_response_options = true
[[03_1_election_general.item]]
name.de = "Teilnahme vergangene eidgenössische Wahlen"
question = "Die letzten eidgenössischen { election_names_combined(ballot_date = ballot_date, lvls = 'federal', canton = canton) } fanden **{ lubridate::year(ballot_date) - 4L }** statt. Haben Sie daran teilgenommen?"
question_common = "Die letzten eidgenössischen Wahlen fanden vor vier Jahren statt. Haben Sie daran teilgenommen?"
id = "participation_past_federal_elections"
description.en = "respondent's participation status at the past federal elections { lubridate::year(ballot_date) - 4L }"
variable_label_common = "respondent's participation status at the past federal elections 4 years ago"
response_options = "{ c(response_options(type = 'abstain', lang = 'de', subtypes = 'past'), 'teilgenommen', response_options(type = 'dunno', lang = 'de', subtypes = 'forgotten')) }"
variable_values = [ 0, 1, 99 ]
value_labels = "{ c(response_options(type = 'abstain', lang = 'en', subtypes = 'past'), 'participated', response_options(type = 'dunno', lang = 'en', subtypes = 'forgotten')) }"
value_scale = "binary"
include = "{ any(has_election(ballot_date = ballot_date, lvls = 'federal', canton = canton)) }"
[[03_1_election_general.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional') }"
name.de = "Stimmentscheid Partei vergangene eidgenössische Verhältniswahl {i}"
question = "Welche Partei hatten Sie **{ lubridate::year(ballot_date) - 4L }** in den **{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'body') }** gewählt, d. h. von welcher Partei hatten Sie am meisten KandidatInnen gewählt?"
question_common = "Welche Partei hatten Sie bei der eidgenössischen Verhältniswahl {i} vor vier Jahren gewählt, d. h. von welcher Partei hatten Sie _am meisten_ KandidatInnen gewählt?"
id = "voting_decision_past_federal_proportional_election_{i}_party"
description.en = "the party the respondent voted for in the past federal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') } { lubridate::year(ballot_date) - 4L }\""
variable_label_common = "the party the respondent voted for in the past { salim::rank_nr(i) } federal proportional election 4 years ago"
response_options = "{ election_parties(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i, past = TRUE) %$% name.de.q %>% c(response_options(type = 'dunno', lang = 'de', subtypes = 'forgotten')) }"
variable_values = "{ election_parties(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i, past = TRUE) %$% code %>% c(q_response_option_codes(types = 'dunno')) }"
value_labels = "{ election_parties(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i, past = TRUE) %$% name.de.short %>% c(response_options(type = 'dunno', lang = 'en', subtypes = 'forgotten')) }"
who = "Teilnehmende vergangene eidgenössische Verhältniswahl"
[[03_1_election_general.item]]
name.de = "Teilnahme vergangene kantonale Wahlen"
question = "Die letzten kantonalen { election_names_combined(ballot_date = ballot_date, lvls = 'cantonal', canton = canton) } fanden **{ lubridate::year(ballot_date) - 4L }** statt. Haben Sie daran teilgenommen?"
question_common = "Die letzten kantonalen Wahlen fanden vor vier Jahren statt. Haben Sie daran teilgenommen?"
id = "participation_past_cantonal_elections"
description.en = "respondent's participation status at the past cantonal elections { lubridate::year(ballot_date) - 4L  }"
variable_label_common = "respondent's participation status at the past cantonal elections 4 years ago"
response_options = "{ c(response_options(type = 'abstain', lang = 'de', subtypes = 'past'), 'teilgenommen', response_options(type = 'dunno', lang = 'de', subtypes = 'forgotten')) }"
variable_values = [ 0, 1, 99 ]
value_labels = "{ c(response_options(type = 'abstain', lang = 'en', subtypes = 'past'), 'participated', response_options(type = 'dunno', lang = 'en', subtypes = 'forgotten')) }"
value_scale = "binary"
include.default = "{ any(has_election(ballot_date = ballot_date, lvls = 'cantonal', canton = canton)) }"
include.false = [ 2019-10-20 ]
[[03_1_election_general.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional') }"
name.de = "Stimmentscheid Partei vergangene kantonale Verhältniswahl {i}"
question = "Welche Partei hatten Sie **{ lubridate::year(ballot_date) - 4L }** in den { election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'body_alt') } gewählt, d. h. von welcher Partei hatten Sie am meisten KandidatInnen gewählt?"
question_common = "Welche Partei hatten Sie bei der kantonalen Verhältniswahl {i} vor vier Jahren gewählt, d. h. von welcher Partei hatten Sie _am meisten_ KandidatInnen gewählt?"
id = "voting_decision_past_cantonal_proportional_election_{i}_party"
description.en = "the party the respondent voted for in the past cantonal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') } { lubridate::year(ballot_date) - 4L }\""
variable_label_common = "the party the respondent voted for in the past { salim::rank_nr(i) } cantonal proportional election 4 years ago"
response_options = "{ election_parties(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i, past = TRUE) %$% name.de.q %>% c(response_options(type = 'dunno', lang = 'de', subtypes = 'forgotten')) }"
variable_values = "{ election_parties(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i, past = TRUE) %$% code %>% c(q_response_option_codes(types = 'dunno')) }"
value_labels = "{ election_parties(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i, past = TRUE) %$% name.de.short %>% c(response_options(type = 'dunno', lang = 'en', subtypes = 'forgotten')) }"
who = "Teilnehmende vergangene kantonale Verhältniswahl"

[03_1_election_general.z01_skill_questions]
randomize_response_options.default = true
randomize_response_options.20180923_20191020 = false
[[03_1_election_general.z01_skill_questions.item]]
i = "{ skill_question_nrs(canton = canton, ballot_date = ballot_date, lvl = 'federal') }"
name.de = "Wissensfrage {i} zur eidgenössischen Politik"
question_intro_i = "Nachfolgend { n_skill_questions(ballot_date = ballot_date, lvl = 'federal', canton = canton) %>% salim::write_out_n(lang = 'de') } Fragen zum politischen System der Schweiz. Bitte kreuzen Sie jeweils die Antwortoption an, die Sie am ehesten für korrekt halten."
question = "_{ skill_question(ballot_date = ballot_date, lvl = 'federal', canton = canton, skill_question_nr = i, lang = 'de') }_"
question_common = "Wissensfrage {i} zu den eidgenössischen Wahlen"
id = "skill_question_{i}_federal"
description.en = "respondent's answer to the skill question \"{ skill_question(ballot_date = ballot_date, lvl = 'federal', canton = canton, skill_question_nr = i, lang = 'en') }\" about the federal political system ({ skill_question_answer_nr(canton = canton, ballot_date = ballot_date, lvl = 'federal', skill_question_nr = i) %>% salim::rank_nr() } answer is correct)"
variable_label_common = "respondent's answer to the { salim::rank_nr(i) } skill question about the federal political system"
response_options = "{ skill_question_response_options(ballot_date = ballot_date, lvl = 'federal', canton = canton, skill_question_nr = i) %$% de %>% c(response_options(type = 'dunno', lang = 'de', subtypes = 'main')) }"
variable_values = "{ seq_len(nrow(skill_question_response_options(ballot_date = ballot_date, lvl = 'federal', canton = canton, skill_question_nr = i))) %>% c(q_response_option_codes(types = 'dunno')) }"
value_labels = "{ skill_question_response_options(ballot_date = ballot_date, lvl = 'federal', canton = canton, skill_question_nr = i) %$% en %>% c(response_options(type = 'dunno', lang = 'en', subtypes = 'main')) }"
[[03_1_election_general.z01_skill_questions.item]]
i = "{ skill_question_nrs(canton = canton, ballot_date = ballot_date, lvl = 'cantonal') }"
name.de = "Wissensfrage {i} zur kantonalen Politik"
question_intro_i = """
{
  paste0(ifelse(n_skill_questions(ballot_date = ballot_date,
                                  lvl = 'federal',
                                  canton = canton) > 0L,
                'Nun ',
                'Nachfolgend '),
         salim::write_out_n(n_skill_questions(ballot_date = ballot_date,
                                              lvl = 'cantonal',
                                              canton = canton),
                            lang = 'de'))
} Fragen zum politischen System des Kantons { stringr::str_to_sentence(canton) }. Bitte kreuzen Sie {
  ifelse(n_skill_questions(ballot_date = ballot_date,
                           lvl = 'federal',
                           canton = canton) > 0L,
         'wiederum',
         'jeweils')
} die Antwortoption an, die Sie am ehesten für korrekt halten."""
question = "_{ skill_question(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, skill_question_nr = i, lang = 'de') }_"
question_common = "Wissensfrage {i} zu den kantonalen Wahlen"
id = "skill_question_{i}_cantonal"
description.en = "respondent's answer to the skill question \"{ skill_question(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, skill_question_nr = i, lang = 'en') }\" about the cantonal political system ({ skill_question_answer_nr(canton = canton, ballot_date = ballot_date, lvl = 'cantonal', skill_question_nr = i) %>% salim::rank_nr() } answer is correct)"
variable_label_common = "respondent's answer to the { salim::rank_nr(i) } skill question about the cantonal political system"
response_options = "{ skill_question_response_options(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, skill_question_nr = i) %$% de %>% c(response_options(type = 'dunno', lang = 'de', subtypes = 'main')) }"
variable_values = "{ seq_len(nrow(skill_question_response_options(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, skill_question_nr = i))) %>% c(q_response_option_codes(types = 'dunno')) }"
value_labels = "{ skill_question_response_options(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, skill_question_nr = i) %$% en %>% c(response_options(type = 'dunno', lang = 'en', subtypes = 'main')) }"

[03_1_election_general.z02_information_source]
who = "Teilnehmende"
response_options = [ "nicht genutzt", "genutzt", "weiss nicht" ]
variable_values = [ 0, 1, 99 ]
value_labels = [ "not used", "used", "don't know" ]
value_scale = "binary"
question_intro_i = "Haben Sie die folgenden Quellen genutzt, um sich über die Parteien und KandidatInnen zu informieren und eine Meinung zu bilden?"
[[03_1_election_general.z02_information_source.item]]
# set iterator to trigger `question_intro_i`
i = 1
name.de = "Informationsquelle: Gratiszeitungen und kostenloser Online-Journalismus / News-Seiten"
question = "_Gratiszeitungen und kostenloser Online-Journalismus / News-Seiten_"
description.en = "whether or not the respondent used free newspapers and free online journalism / news sites to learn about the parties and candidates"
id = "information_source_free_newspapers"
[[03_1_election_general.z02_information_source.item]]
name.de = "Informationsquelle: Kostenpflichtige Abonnementszeitungen/-magazine (gedruckt und online)"
question = "_kostenpflichtige Abonnementszeitungen/-magazine (gedruckt und/oder online)_"
id = "information_source_paid_newspapers"
description.en = "whether or not the respondent used paid newspapers / magazines (on- and offline) to learn about the parties and candidates"
[[03_1_election_general.z02_information_source.item]]
name.de = "Informationsquelle: Radiosendungen"
question = "_Radiosendungen_"
id = "information_source_radio_program"
description.en = "whether or not the respondent used radio programs to learn about the parties and candidates"
[[03_1_election_general.z02_information_source.item]]
name.de = "Informationsquelle: Fernsehsendungen"
question = "_Fernsehsendungen_"
id = "information_source_tv_program"
description.en = "whether or not the respondent used television programs to learn about the parties and candidates"
[[03_1_election_general.z02_information_source.item]]
name.de = "Informationsquelle: Kantonale Webseite"
question = "_Webseite des Kantons_"
id = "cantonal_information_source_official_webpage"
description.en = "whether or not the respondent used the official webpage of the canton to learn about the parties and candidates"
[[03_1_election_general.z02_information_source.item]]
# PDF 2019: https://www.bk.admin.ch/dam/bk/de/dokumente/pore/Nationalratswahlen%202019.%20Wahlanleitung.pdf.download.pdf/Nationalratswahlen%202019.%20Wahlanleitung.pdf
name.de = "Informationsquelle: Eidgenössische Wahlbroschüre"
question = "_Wahlanleitung des Bundes (Broschüre oder online)_"
id = "federal_information_source_official_booklet"
variable_label.election = "whether or not the respondent used the official federal election manual (booklet or online) to learn about the parties and candidates"
variable_label.referendum = "whether or not the respondent used the official federal election manual (booklet or online) to learn about the cantonal proposals"
include = "{ any(has_election(ballot_date = ballot_date, lvls = 'federal', canton = canton)) }"
[[03_1_election_general.z02_information_source.item]]
name.de = "Informationsquelle: Kantonale Wahlbroschüre"
question = "_Wahlanleitung des Kantons (Broschüre oder online)_"
id = "cantonal_information_source_official_booklet"
description.en = "whether or not the respondent used the official cantonal election manual (booklet or online) to learn about the cantonal proposals"
# NOTE: A cantonal election manual doesn't actually exist in the canton of Aargau. Only a booklet explaining the *election procedure* is available (see `cantonal_information_source_election_booklet`)
include.default = "{ any(has_election(ballot_date = ballot_date, lvls = 'cantonal', canton = canton)) }"
include.aargau = false
[[03_1_election_general.z02_information_source.item]]
name.de = "Informationsquelle: Leserbriefe/-kommentare"
question = "_Leserbriefe oder Online-Kommentare_"
id = "information_source_reader_letters_comments"
description.en = "whether or not the respondent used readers' letters or online comments to learn about the parties and candidates"
[[03_1_election_general.z02_information_source.item]]
name.de = "Informationsquelle: Soziale Medien wie Facebook oder Twitter"
question = "_Soziale Medien wie Facebook oder Twitter_"
id = "information_source_social_media"
description.en = "whether or not the respondent used social media like Facebook or Twitter to learn about the parties and candidates"
[[03_1_election_general.z02_information_source.item]]
name.de = "Informationsquelle: (Halb-)Öffentliche Chatgruppen (bspw. via [Telegram](https://de.wikipedia.org/wiki/Telegram))"
question = "_(Halb-)Öffentliche Chatgruppen (bspw. via Telegram)_"
id = "information_source_public_chat_groups"
description.en = "whether or not the respondent used public chat groups (e.g. via [Telegram](https://en.wikipedia.org/wiki/Telegram_(software))) to learn about the parties and candidates"
include.20180923_20201018 = false
[[03_1_election_general.z02_information_source.item]]
topic.default = "Informationsquelle: Online-Wahlhilfen wie [smartvote](https://smartvote.ch/) oder [jene von Vimentis](https://www.vimentis.ch/wahlen/)"
topic.20180923_20201018 = "Informationsquelle: Online-Wahlhilfen wie [smartvote](https://smartvote.ch/)"
question.default = "_Online-Wahlhilfen wie smartvote oder jene von Vimentis_"
question.20180923_20201018 = "_Online-Wahlhilfen wie smartvote_"
question_common.default = "Haben Sie _Online-Wahlhilfen wie smartvote oder jene von Vimentis_ genutzt, um sich über die Parteien und KandidatInnen zu informieren und eine Meinung zu bilden?"
question_common.20180923_20201018 = "Haben Sie _Online-Wahlhilfen wie smartvote_ genutzt, um sich über die Parteien und KandidatInnen zu informieren und eine Meinung zu bilden?"
id = "information_source_voting_advice_applications"
variable_label.default = "whether or not the respondent used online voting advice applications like [smartvote](https://smartvote.ch/) or [the one provided by Vimentis](https://www.vimentis.ch/wahlen/) to learn about the parties and candidates"
variable_label.20180923_20201018 = "whether or not the respondent used online voting advice applications like [smartvote](https://smartvote.ch/) to learn about the parties and candidates"
[03_1_election_general.z02_information_source.z01_help]
ballot_types = [ "election" ]
question_intro_i = "Von offizieller Seite existieren verschiedene Angebote, um der Stimmbevölkerung das Wahlverfahren besser zu erklären. Haben Sie die folgenden Hilfestellungen genutzt?"
[[03_1_election_general.z02_information_source.z01_help.item]]
# set iterator to trigger `question_intro_i`
i = 1
name.de = "Informationsquelle: Kantonale Wahlanleitung"
question = "_Wahlanleitung, welche den kantonalen Wahlunterlagen beilag_"
id = "cantonal_information_source_election_booklet"
description.en = "whether or not the respondent used the cantonal election booklet to learn about the election procedure"
include.default = "{ any(has_election(ballot_date = ballot_date, lvls = 'cantonal', canton = canton)) }"
include.false = [ 2019-10-20 ]
[[03_1_election_general.z02_information_source.z01_help.item]]
name.de = "Informationsquelle: Kantonale Online-Wahlanleitung in leicht verständlicher Sprache"
question.default = "_Erklärvideo und/oder Wahlanleitung in leicht verständlicher Sprache, welche auf der Kantonswebseite zur Verfügung stehen_"
question.20201018 = "_Erklärvideo und/oder Wahlanleitung in leichter Sprache, welche auf der Kantonswebseite zur Verfügung stehen_"
id = "cantonal_information_source_online_tutorial"
description.en = "whether or not the respondent used the video tutorial and/or voting guide in simple language available on the cantonal website to learn about the election procedure"
include.default = "{ any(has_election(ballot_date = ballot_date, lvls = 'cantonal', canton = canton)) }"
include.false = [ 2019-10-20 ]
[[03_1_election_general.z02_information_source.z01_help.item]]
name.de = "Informationsquelle: [easyvote-Wahlbroschüre](https://www.easyvote.ch/de/f/angebote/broschuere)"
question.default = "_«easyvote»-Wahlbroschüre des Dachverbandes Schweizer Jugendparlamente (DSJ)_"
question.20191020 = "Mit der «easyvote»-Wahlbroschüre des Dachverbandes Schweizer Jugendparlamente (DSJ) existiert eine weitere Wahlanleitung, die insbesondere NeuwählerInnen das Wahlprozedere möglichst einfach erklären soll. Haben Sie die «easyvote»-Wahlbroschüre genutzt?"
id = "information_source_easyvote_booklet"
description.en = "whether or not the respondent used the \"easyvote\" booklet to learn about the election procedure"
variable_label_common = "whether or not the respondent used the \"easyvote\" booklet to learn about the election procedure (only *voters*, except 2019-10-20 *all*)"
who.default = "Teilnehmende"
who.20191020 = "alle"

[03_1_election_general.z03_more]
who = "alle"
variable_values = [ 1, 2, 3, 4, 99 ]
value_scale = "ordinal_ascending"
ballot_types = [ "election" ]
[[03_1_election_general.z03_more.item]]
name.de = "Verständnisschwierigkeit Wahlprozedere"
question = "Wie schwierig war es für Sie, das Wahlprozedere zu verstehen?"
id = "difficulty_election_procedure"
description.en = "level of difficulty in understanding the election procedure for the respondent"
response_options = [ "sehr leicht", "eher leicht", "eher schwer", "sehr schwer", "weiss nicht" ]
value_labels = [ "very easy", "rather easy", "rather difficult", "very difficult", "don't know" ]
include.false = [ 2019-10-20 ]
[[03_1_election_general.z03_more.item]]
name.de = "Intensität politischer Gespräche/Diskussionen im Bekanntenkreis"
question = "Wie oft haben Sie sich im Bekanntenkreis über die Parteien und KandidatInnen ausgetauscht bzw. über diese diskutiert?"
id = "intensity_political_discussions"
description.en = "how often the respondent discussed the parties and candidates with acquaintances"
response_options = [ "nie", "selten", "ab und zu", "häufig", "weiss nicht" ]
value_labels = [ "never", "rarely", "now and then", "frequently", "don't know" ]

[03_1_election_general.z04_political_occasions]
who = "alle"
response_options = [ "nein", "ja" ]
variable_values = [ 0, 1 ]
value_labels = [ "no", "yes" ]
value_scale = "binary"
question_intro_i = "Parteien und Kandidierende suchen im Wahlkampf den direkten, persönlichen Kontakt zur Wählerschaft. Bei welchen der folgenden Anlässe/Aktionen kamen Sie in Kontakt mit Parteien und Kandidierenden?"
[[03_1_election_general.z04_political_occasions.item]]
# set iterator to trigger `question_intro_i`
i = 1
name.de = "Politische Anlässe/Aktionen: Standaktionen"
question = "_Standaktionen_"
id = "political_occasions_stand_actions"
description.en = "whether or not the respondent came into contact with parties and candidates via stand actions"
[[03_1_election_general.z04_political_occasions.item]]
name.de = "Politische Anlässe/Aktionen: Telefonaktionen"
question = "_Telefonaktionen_"
id = "political_occasions_phone_calls"
description.en = "whether or not the respondent came into contact with parties and candidates via phone calls"
[[03_1_election_general.z04_political_occasions.item]]
name.de = "Politische Anlässe/Aktionen: Hausbesuche"
question = "_Hausbesuche_"
id = "political_occasions_home_visits"
description.en = "whether or not the respondent came into contact with parties and candidates through home visits"
[[03_1_election_general.z04_political_occasions.item]]
name.de = "Politische Anlässe/Aktionen: Podiumsdiskussionen"
question = "_Podiumsdiskussionen_"
id = "political_occasions_panel_discussions"
description.en = "whether or not the respondent came into contact with parties and candidates through panel discussions"
[[03_1_election_general.z04_political_occasions.item]]
name.de = "Politische Anlässe/Aktionen: persönliche Nachricht/E-Mail"
question = "_persönliche Nachricht/E-Mail_"
id = "political_occasions_personal_message"
description.en = "whether or not the respondent came into contact with parties and candidates via personal message/e-mail"


[03_2_election_specific]
title = "Wahlspezifische Fragen"
ballot_types = [ "election" ]
who = "Teilnehmende"

[03_2_election_specific.001_federal_proportional]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional') }"
[[03_2_election_specific.001_federal_proportional.item]]
name.de = "Stimmentscheid Partei eidgenössische Verhältniswahl {i}"
question = """
{
  ifelse(i == 1L,
         paste0('Am ',
                stringi::stri_datetime_format(time = ballot_date,
                                              format = 'date_long',
                                              locale = lang_to_locale('de')),
                ' fand',
                ifelse(sum(n_elections(ballot_date = ballot_date,
                                       lvls = 'federal',
                                       canton = canton)) > 1L,
                       'en',
                       ''),
                ' die eidgenössische',
                ifelse(sum(n_elections(ballot_date = ballot_date,
                                       lvls = 'federal',
                                       canton = canton)) > 1L,
                           paste0('n ',
                                  election_names_combined(ballot_date = ballot_date,
                                                          lvls = 'federal',
                                                          canton = canton),
                                  ' statt. <br><br>'),
                                  paste0(' **',
                                         election_names_combined(ballot_date = ballot_date,
                                                                 lvls = 'federal',
                                                                 canton = canton),
                                         '** statt. '))),
         '')
}Welche Partei haben Sie {
  ifelse(sum(n_elections(ballot_date = ballot_date,
                         lvls = 'federal',
                         canton = canton)) > 1L,
         paste0('in den **',
                election_name(ballot_date = ballot_date,
                              lvl = 'federal',
                              canton = canton,
                              prcd = 'proportional',
                              election_nr = i,
                              lang = 'de',
                              type = 'body'),
                '** '),
         '')
}gewählt, d. h. von welcher Partei haben Sie _am meisten_ KandidatInnen gewählt?"""
question_common = "Welche Partei haben Sie bei der eidgenössischen Verhältniswahl {i} gewählt, d. h. von welcher Partei haben Sie _am meisten_ KandidatInnen gewählt?"
id = "voting_decision_federal_proportional_election_{i}_party"
description.en = "the party the respondent voted for in the federal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "the party the respondent voted for in the { salim::rank_nr(i) } federal proportional election"
response_options = "{ election_parties(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) %$% name.de.q %>% c(response_options(type = 'abstain', lang = 'de', subtypes = c('election', 'proportional')), ., response_options(type = 'dunno', lang = 'de', subtypes = 'forgotten')) }"
variable_values = "{ election_parties(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) %$% code %>% c(q_response_option_codes(types = 'abstain'), ., q_response_option_codes(types = 'dunno')) }"
value_labels = "{ election_parties(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) %$% name.de.short %>% c(response_options(type = 'abstain', lang = 'en', subtypes = 'main'), ., response_options(type = 'dunno', lang = 'en', subtypes = 'forgotten')) }"
is_mandatory = true
[[03_2_election_specific.001_federal_proportional.item]]
who = "teilnehmende Online-Respondenten"
name.de = "Stimmentscheid Liste eidgenössische Verhältniswahl {i}"
question = "Für welche Liste dieser Partei haben Sie sich entschieden? Falls Sie keinen vorgedruckten Wahlzettel verwendet, sondern einen leeren Wahlzettel ausgefüllt haben: Welche Listennummer/Partei haben Sie oben im Wahlzettel eingetragen?"
id = "voting_decision_federal_proportional_election_{i}_ticket"
description.en = "the ticket the respondent opted for in the federal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "the ticket the respondent opted for in the { salim::rank_nr(i) } federal proportional election"
response_options = "{ election_tickets(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) %$% glue::glue('{ nr }: { name }') %>% c(response_options(type = 'none', lang = 'de', subtypes = 'ticket'), ., response_options(type = 'dunno', lang = 'de', subtypes = 'forgotten')) }"
variable_values = "{ election_tickets(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) %$% nr %>% seq_along() %>% c(q_response_option_codes(types = 'none'), ., q_response_option_codes(types = 'dunno')) }"
value_labels = "{ election_tickets(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) %$% glue::glue('{ nr }: { name }') %>% c(response_options(type = 'none', lang = 'en', subtypes = 'ticket'), ., response_options(type = 'dunno', lang = 'en', subtypes = 'forgotten')) }"
is_mandatory = true
[[03_2_election_specific.001_federal_proportional.item]]
name.de = "Listenabänderung eidgenössische Verhältniswahl {i}"
question = "Haben Sie bei der **{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'short') }** eine unveränderte Liste eingeworfen oder eine bestehende Liste abgeändert bzw. eine eigene Liste zusammengestellt?"
question_common = "Haben Sie bei der eidgenössischen Mehrheitswahl {i} eine unveränderte Liste eingeworfen, eine bestehende Liste abgeändert bzw. eine eigene Liste zusammengestellt?"
id = "ticket_modification_federal_proportional_election_{i}"
description.en = "whether the respondent submitted an unaltered ticket or modified an existing ticket/compiled a custom ticket in the federal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "whether the respondent submitted an unaltered ticket or modified an existing ticket/compiled a custom ticket in the { salim::rank_nr(i) } federal proportional election"
response_options = [ "unveränderte Liste", "bestehende Liste verändert oder eigene Liste zusammengestellt", "weiss nicht mehr" ]
variable_values = [ 1, 2, 99 ]
value_labels = [ "unmodified ticket", "modified existing or compiled custom ticket", "can't remember" ]
value_scale = "binary"
[03_2_election_specific.001_federal_proportional.z01_type]
who = "Listenabändernde eidgenössische Verhältniswahl {i}"
response_options = [ "trifft nicht zu", "trifft zu", "weiss nicht mehr" ]
variable_values = [ 0, 1, 99 ]
value_labels = [ "is not true", "is true", "can't remember" ]
value_scale = "binary"
[03_2_election_specific.001_federal_proportional.z01_type.001_modification]
question_intro_j = "Wie haben Sie die Liste verändert/zusammengestellt? Ich habe…"
[[03_2_election_specific.001_federal_proportional.z01_type.001_modification.item]]
# set iterator to trigger `question_intro_j`
j = 1
name.de = "Listenabänderung eidgenössische Verhältniswahl {i}: Kumulieren"
question = "_kumuliert, d. h. einzelne KandidatInnen doppelt aufgeführt._"
id = "ticket_modification_federal_proportional_election_{i}_cumulated"
description.en = "whether or not the respondent has cumulated candidates on the ticket in the federal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "whether or not the respondent has cumulated candidates on the ticket in the { salim::rank_nr(i) } federal proportional election"
[[03_2_election_specific.001_federal_proportional.z01_type.001_modification.item]]
name.de = "Listenabänderung eidgenössische Verhältniswahl {i}: Streichen"
question = "_einzelne KandidatInnen von der Liste gestrichen._"
id = "ticket_modification_federal_proportional_election_{i}_delisted"
description.en = "whether or not the respondent has removed candidates from the ticket in the federal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "whether or not the respondent has removed candidates from the ticket in the { salim::rank_nr(i) } federal proportional election"
[[03_2_election_specific.001_federal_proportional.z01_type.001_modification.item]]
name.de = "Listenabänderung eidgenössische Verhältniswahl {i}: Panaschieren"
question = "_panaschiert, d. h. KandidatInnen von anderen Listen eingetragen._"
id = "ticket_modification_federal_proportional_election_{i}_panached"
description.en = "whether or not the respondent has panached, i.e. added candidates from other tickets onto the ticket submitted in the federal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "whether or not the respondent has panached, i.e. added candidates from other tickets onto the ticket submitted in the { salim::rank_nr(i) } federal proportional election"
[[03_2_election_specific.001_federal_proportional.z01_type.item]]
who = "Panaschierende eidgenössische Verhältniswahl {i}"
allow_multiple_answers = true
name.de = "Panaschierte Parteien eidgenössische Verhältniswahl {i}"
question = "Von welchen anderen Parteien haben Sie KandidatInnen auf Ihre { election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'body') }sliste gesetzt?"
question_common = "Von welchen anderen Parteien haben Sie KandidatInnen auf Ihre Liste bei der eidgenössischen Verhältniswahl {i} gesetzt?"
id = "panached_parties_federal_proportional_election_{i}"
description.en = "the parties the respondent has panached, i.e. added from other tickets onto the ticket submitted in the federal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "the parties the respondent has panached, i.e. added from other tickets onto the ticket submitted in the { salim::rank_nr(i) } federal proportional election"
response_options = "{ election_parties(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) %$% name.de.q %>% c(response_options(type = 'dunno', lang = 'de', subtypes = 'forgotten')) }"
variable_values = "{ election_parties(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) %$% code %>% c(q_response_option_codes(types = 'dunno')) }"
value_labels = "{ election_parties(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) %$% name.de.short %>% c(response_options(type = 'dunno', lang = 'en', subtypes = 'forgotten')) }"

[[03_2_election_specific.002_federal_majoritarian.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'majoritarian') }"
j = "{ seq_len(n_election_seats(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i, type = 'vacant')) }"
name.de = "Stimmentscheid Sitz {j} eidgenössische Mehrheitswahl {i}"
question = """
{
  ifelse(i == 1L
         && j == 1L
         && n_elections(ballot_date = ballot_date,
                        lvls = 'federal',
                        canton = canton,
                        prcds = 'proportional') == 0,
         paste0('Am ',
                stringi::stri_datetime_format(time = ballot_date,
                                              format = 'date_long',
                                              locale = lang_to_locale('de')),
                ' fand',
                ifelse(sum(n_elections(ballot_date = ballot_date,
                                       lvls = 'federal',
                                       canton = canton)) > 1L,
                       'en',
                       ''),
                ' die eidgenössische',
                ifelse(sum(n_elections(ballot_date = ballot_date,
                                       lvls = 'federal',
                                       canton = canton)) > 1L,
                       paste0('n ',
                              election_names_combined(ballot_date = ballot_date,
                                                      lvls = 'federal',
                                                      canton = canton),
                              ' statt. <br><br>'),
                       paste0(' ',
                              election_names_combined(ballot_date = ballot_date,
                                                      lvls = 'federal',
                                                      canton = canton),
                              ' statt. '))),
         '')
}{
  ifelse(j == 1L,
         paste0(ifelse(n_election_seats(ballot_date = ballot_date,
                                        lvl = 'federal',
                                        canton = canton,
                                        election_nr = i,
                                        type = 'vacant') > 1L,
                       paste0('Welche ',
                              salim::write_out_n(n_election_seats(ballot_date = ballot_date,
                                                                  lvl = 'federal',
                                                                  canton = canton,
                                                                  election_nr = i,
                                                                  type = 'vacant'),
                                                 lang = 'de'),
                              ' KandidatInnen'),
                       'Wen'),
                paste0(' haben Sie in den eidgenössischen **',
                       election_name(ballot_date = ballot_date,
                                     lvl = 'federal',
                                     canton = canton,
                                     prcd = 'majoritarian',
                                     election_nr = i,
                                     lang = 'de',
                                     type = 'body'),
                       '** gewählt? <br><br>')),
         '')
}{
  ifelse(n_election_seats(ballot_date = ballot_date,
                          lvl = 'federal',
                          canton = canton,
                          election_nr = i,
                          type = 'vacant') > 1L,
         glue::glue('_KandidatIn {j}_'),
         '')
}"""
question_common = "Wen haben Sie bei der eidgenössischen Mehrheitswahl {i} gewählt? _KandidatIn {j}_"
id = "voting_decision_federal_majoritarian_election_{i}_seat_{j}"
description.en = "the { salim::rank_nr(j) } candidate the respondent voted for in the federal majoritarian election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "the { salim::rank_nr(j) } candidate the respondent voted for in the { salim::rank_nr(i) } federal majoritarian election"
response_options = "{ election_candidate_prose(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) %>% c(response_options(type = 'abstain', lang = 'de', subtypes = c('election', 'majoritarian')), .) %>% purrr::when(requires_candidate_registration(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) ~ ., ~ c(., response_options(type = 'other', lang = 'de', subtypes = 'candidate'))) %>% c(response_options(type = 'dunno', lang = 'de', subtypes = 'forgotten')) }"
variable_values = "{ seq_len(nrow(election_candidates(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i))) %>% c(q_response_option_codes(types = 'abstain'), .) %>% purrr::when(requires_candidate_registration(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) ~ ., ~ c(., q_response_option_codes(types = 'other'))) %>% c(q_response_option_codes(types = 'dunno')) }"
value_labels = "{ election_candidate_prose(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) %>% c(response_options(type = 'abstain', lang = 'en', subtypes = 'main'), .) %>% purrr::when(requires_candidate_registration(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i) ~ ., ~ c(., response_options(type = 'other', lang = 'en', subtypes = 'candidate'))) %>% c(response_options(type = 'dunno', lang = 'en', subtypes = 'forgotten')) }"
is_mandatory = true

[03_2_election_specific.003_cantonal_proportional]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional') }"
[[03_2_election_specific.003_cantonal_proportional.item]]
name.de = "Stimmentscheid Partei kantonale Verhältniswahl {i}"
question = """
{
  ifelse(i == 1L,
         paste0(ifelse(any(has_lvl(ballot_date = ballot_date,
                                   lvl = 'federal',
                                   canton = canton))
                       || has_referendum(ballot_date = ballot_date,
                                         lvls = 'cantonal',
                                         canton = canton),
                       paste0('Weiter fand',
                              ifelse(sum(n_elections(ballot_date = ballot_date,
                                                     lvls = 'cantonal',
                                                     canton = canton)) > 1L,
                                     'en',
                                     ''),
                              ' am ',
                              stringi::stri_datetime_format(time = ballot_date,
                                                            format = 'date_long',
                                                            locale = lang_to_locale('de'))),
                       paste0('Am ',
                              stringi::stri_datetime_format(time = ballot_date,
                                                            format = 'date_long',
                                                            locale = lang_to_locale('de')),
                              ' fand',
                              ifelse(sum(n_elections(ballot_date = ballot_date,
                                                     lvls = 'cantonal',
                                                     canton = canton)) > 1L,
                                     'en',
                                     ''))),
                ' die kantonale',
                ifelse(sum(n_elections(ballot_date = ballot_date,
                                       lvls = 'cantonal',
                                       canton = canton)) > 1L,
                       paste0('n ',
                              election_names_combined(ballot_date = ballot_date,
                                                      lvls = 'cantonal',
                                                      canton = canton),
                              ' statt. <br><br>'),
                       paste0(' ',
                              election_names_combined(ballot_date = ballot_date,
                                                      lvls = 'cantonal',
                                                      canton = canton),
                              ' statt. '))), '')
}Welche Partei haben Sie {
  ifelse(sum(n_elections(ballot_date = ballot_date,
                         lvls = 'cantonal',
                         canton = canton)) > 1L,
         paste0('in den **',
                election_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              prcd = 'proportional',
                              election_nr = i,
                              lang = 'de',
                              type = 'body_alt'),
                '** '),
         '')
}gewählt, d. h. von welcher Partei haben Sie _am meisten_ KandidatInnen gewählt?"""
question_common = "Welche Partei haben Sie bei der kantonalen Verhältniswahl {i} gewählt, d. h. von welcher Partei haben Sie _am meisten_ KandidatInnen gewählt?"
id = "voting_decision_cantonal_proportional_election_{i}_party"
description.en = "the party the respondent voted for in the cantonal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "the party the respondent voted for in the { salim::rank_nr(i) } cantonal proportional election"
response_options = "{ election_parties(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %$% name.de.q %>% c(response_options(type = 'abstain', lang = 'de', subtypes = c('election', 'proportional')), ., response_options(type = 'dunno', lang = 'de', subtypes = 'forgotten')) }"
variable_values = "{ election_parties(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %$% code %>% c(q_response_option_codes(types = 'abstain'), ., q_response_option_codes(types = 'dunno')) }"
value_labels = "{ election_parties(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %$% name.de.short %>% c(response_options(type = 'abstain', lang = 'en', subtypes = 'main'), ., response_options(type = 'dunno', lang = 'en', subtypes = 'forgotten')) }"
is_mandatory = true
[[03_2_election_specific.003_cantonal_proportional.item]]
who = "teilnehmende Online-Respondenten"
name.de = "Stimmentscheid Liste kantonale Verhältniswahl {i}"
question = "Für welche Liste dieser Partei haben Sie sich entschieden? Falls Sie keinen vorgedruckten Wahlzettel verwendet, sondern einen leeren Wahlzettel ausgefüllt haben: Welche Listennummer/Partei haben Sie oben im Wahlzettel eingetragen?"
id = "voting_decision_cantonal_proportional_election_{i}_ticket"
description.en = "the ticket the respondent opted for in the cantonal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "the ticket the respondent opted for in the { salim::rank_nr(i) } cantonal proportional election"
response_options = "{ election_tickets(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %$% glue::glue('{ nr }: { name }') %>% c(response_options(type = 'none', lang = 'de', subtypes = 'ticket'), ., response_options(type = 'dunno', lang = 'de', subtypes = 'forgotten')) }"
variable_values = "{ election_tickets(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %$% nr %>% seq_along() %>% c(q_response_option_codes(types = 'none'), ., q_response_option_codes(types = 'dunno')) }"
value_labels = "{ election_tickets(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %$% glue::glue('{ nr }: { name }') %>% c(response_options(type = 'none', lang = 'en', subtypes = 'ticket'), ., response_options(type = 'dunno', lang = 'en', subtypes = 'forgotten')) }"
is_mandatory = true
include.default = false
[[03_2_election_specific.003_cantonal_proportional.item]]
name.de = "Listenabänderung kantonale Verhältniswahl {i}"
question = "Haben Sie bei der **{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'short') }** eine unveränderte Liste eingeworfen oder eine bestehende Liste abgeändert bzw. eine eigene Liste zusammengestellt?"
question_common = "Haben Sie bei der kantonalen Verhältniswahl {i} eine unveränderte Liste eingeworfen, eine bestehende Liste abgeändert bzw. eine eigene Liste zusammengestellt?"
id = "ticket_modification_cantonal_proportional_election_{i}"
description.en = "whether the respondent submitted an unaltered ticket or modified an existing ticket/compiled a custom ticket in the cantonal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "whether the respondent submitted an unaltered ticket or modified an existing ticket/compiled a custom ticket in the { salim::rank_nr(i) } cantonal proportional election"
response_options = [ "unveränderte Liste", "bestehende Liste verändert oder eigene Liste zusammengestellt", "weiss nicht mehr" ]
variable_values = [ 1, 2, 99 ]
value_labels = [ "unmodified ticket", "modified existing or compiled custom ticket", "can't remember" ]
value_scale = "binary"
[03_2_election_specific.003_cantonal_proportional.z01_type]
who = "Listenabändernde kantonale Verhältniswahl {i}"
response_options = [ "trifft nicht zu", "trifft zu", "weiss nicht mehr" ]
variable_values = [ 0, 1, 99 ]
value_labels = [ "is not true", "is true", "can't remember" ]
value_scale = "binary"
[03_2_election_specific.003_cantonal_proportional.z01_type.001_modification]
question_intro_j = "Wie haben Sie die Liste verändert/zusammengestellt? Ich habe…"
[[03_2_election_specific.003_cantonal_proportional.z01_type.001_modification.item]]
# set iterator to trigger `question_intro_j`
j = 1
name.de = "Listenabänderung kantonale Verhältniswahl {i}: Kumulieren"
question = "_kumuliert, d. h. einzelne KandidatInnen doppelt aufgeführt._"
id = "ticket_modification_cantonal_proportional_election_{i}_cumulated"
description.en = "whether or not the respondent has cumulated candidates on the ticket in the cantonal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "whether or not the respondent has cumulated candidates on the ticket in the { salim::rank_nr(i) } cantonal proportional election"
[[03_2_election_specific.003_cantonal_proportional.z01_type.001_modification.item]]
name.de = "Listenabänderung kantonale Verhältniswahl {i}: Streichen"
question = "_einzelne KandidatInnen von der Liste gestrichen._"
id = "ticket_modification_cantonal_proportional_election_{i}_delisted"
description.en = "whether or not the respondent has removed candidates from the ticket in the cantonal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "whether or not the respondent has removed candidates from the ticket in the { salim::rank_nr(i) } cantonal proportional election"
[[03_2_election_specific.003_cantonal_proportional.z01_type.001_modification.item]]
name.de = "Listenabänderung kantonale Verhältniswahl {i}: Panaschieren"
question = "_panaschiert, d. h. KandidatInnen von anderen Listen eingetragen._"
id = "ticket_modification_cantonal_proportional_election_{i}_panached"
description.en = "whether or not the respondent has panached, i.e. added candidates from other tickets onto the ticket submitted in the cantonal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "whether or not the respondent has panached, i.e. added candidates from other tickets onto the ticket submitted in the { salim::rank_nr(i) } cantonal proportional election"
[[03_2_election_specific.003_cantonal_proportional.z01_type.item]]
who = "Panaschierende kantonale Verhältniswahl {i}"
allow_multiple_answers = true
name.de = "Panaschierte Parteien kantonale Verhältniswahl {i}"
question = "Von welchen anderen Parteien haben Sie KandidatInnen auf Ihre { election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'body') }sliste gesetzt?"
question_common = "Von welchen anderen Parteien haben Sie KandidatInnen auf Ihre Liste bei der kantonalen Verhältniswahl {i} gesetzt?"
id = "panached_parties_cantonal_proportional_election_{i}"
description.en = "the parties the respondent has panached, i.e. added from other tickets onto the ticket submitted in the cantonal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "the parties the respondent has panached, i.e. added from other tickets onto the ticket submitted in the { salim::rank_nr(i) } cantonal proportional election"
response_options = "{ election_parties(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %$% name.de.q %>% c(response_options(type = 'dunno', lang = 'de', subtypes = 'forgotten')) }"
variable_values = "{ election_parties(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %$% code %>% c(q_response_option_codes(types = 'dunno')) }"
value_labels = "{ election_parties(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %$% name.de.short %>% c(response_options(type = 'dunno', lang = 'en', subtypes = 'forgotten')) }"

[[03_2_election_specific.004_cantonal_majoritarian.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'majoritarian') }"
j = "{ seq_len(n_election_seats(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i, type = 'vacant')) }"
name.de = "Stimmentscheid Sitz {j} kantonale Mehrheitswahl {i}"
question = """
{
  ifelse(i == 1L
         && j == 1L
         && !has_election(ballot_date = ballot_date,
                          lvls = 'cantonal',
                          canton = canton,
                          prcds = 'proportional'),
         paste0(ifelse(any(has_lvl(ballot_date = ballot_date,
                                   lvl = 'federal',
                                   canton = canton))
                       || has_referendum(ballot_date = ballot_date,
                                         lvls = 'cantonal',
                                         canton = canton),
                       paste0('Weiter fand',
                              ifelse(sum(n_elections(ballot_date = ballot_date,
                                                     lvls = 'cantonal',
                                                     canton = canton)) > 1L,
                                     'en',
                                     ''),
                              ' am ',
                              stringi::stri_datetime_format(time = ballot_date,
                                                            format = 'date_long',
                                                            locale = lang_to_locale('de'))),
                       paste0('Am ',
                              stringi::stri_datetime_format(time = ballot_date,
                                                            format = 'date_long',
                                                            locale = lang_to_locale('de')),
                              ' fand',
                              ifelse(sum(n_elections(ballot_date = ballot_date,
                                                     lvls = 'cantonal',
                                                     canton = canton)) > 1L,
                                     'en',
                                     ''))),
                ' die kantonale',
                ifelse(sum(n_elections(ballot_date = ballot_date,
                                       lvls = 'cantonal',
                                       canton = canton)) > 1L,
                       paste0('n ',
                              election_names_combined(ballot_date = ballot_date,
                                                      lvls = 'cantonal',
                                                      canton = canton),
                              ' statt. <br><br>'),
                       paste0(' **',
                              election_names_combined(ballot_date = ballot_date,
                                                      lvls = 'cantonal',
                                                      canton = canton),
                              '** statt. '))),
         '')
}{
  ifelse(j == 1L,
         paste0(ifelse(n_election_seats(ballot_date = ballot_date,
                                        lvl = 'cantonal',
                                        canton = canton,
                                        election_nr = i,
                                        type = 'vacant') > 1L,
                       paste0('Welche ',
                              salim::write_out_n(n_election_seats(ballot_date = ballot_date,
                                                                  lvl = 'cantonal',
                                                                  canton = canton,
                                                                  election_nr = i,
                                                                  type = 'vacant'),
                                                 lang = 'de'),
                              ' KandidatInnen'),
                       'Wen'),
                paste0(' haben Sie in den kantonalen **',
                       election_name(ballot_date = ballot_date,
                                     lvl = 'cantonal',
                                     canton = canton,
                                     prcd = 'majoritarian',
                                     election_nr = i,
                                     lang = 'de',
                                     type = 'body'),
                       '** gewählt? <br><br>')),
         '')
}{
  ifelse(n_election_seats(ballot_date = ballot_date,
                          lvl = 'cantonal',
                          canton = canton,
                          election_nr = i,
                          type = 'vacant') > 1L,
         paste0('_KandidatIn ', j, '_'),
         '')
}"""
question_common = "Wen haben Sie bei der kantonalen Mehrheitswahl {i} gewählt? _KandidatIn {j}_"
id = "voting_decision_cantonal_majoritarian_election_{i}_seat_{j}"
description.en = "the { salim::rank_nr(j) } candidate the respondent voted for in the cantonal majoritarian election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "the { salim::rank_nr(j) } candidate the respondent voted for in the { salim::rank_nr(i) } cantonal majoritarian election"
response_options = "{ election_candidate_prose(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %>% c(response_options(type = 'abstain', lang = 'de', subtypes = c('election', 'majoritarian')), .) %>% purrr::when(requires_candidate_registration(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) ~ ., ~ c(., response_options(type = 'other', lang = 'de', subtypes = 'candidate'))) %>% c(response_options(type = 'dunno', lang = 'de', subtypes = 'forgotten')) }"
variable_values = "{ seq_len(n_election_candidates(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i)) %>% c(q_response_option_codes(types = 'abstain'), .) %>% purrr::when(requires_candidate_registration(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) ~ ., ~ c(., q_response_option_codes(types = 'other'))) %>% c(q_response_option_codes(types = 'dunno')) }"
value_labels = "{ election_candidate_prose(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) %>% c(response_options(type = 'abstain', lang = 'en', subtypes = 'main'), .) %>% purrr::when(requires_candidate_registration(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i) ~ ., ~ c(., response_options(type = 'other', lang = 'en', subtypes = 'candidate'))) %>% c(response_options(type = 'dunno', lang = 'en', subtypes = 'forgotten')) }"
is_mandatory = true

[03_2_election_specific.005_decision_moment]
response_options = [ "es ist immer klar gewesen", "einige Wochen vor den Wahlen", "einige Tage vor den Wahlen", "im letzten Moment", "weiss nicht mehr" ]
variable_values = [ 1, 2, 3, 4, 99 ]
value_labels = [ "it has always been clear", "a few weeks before the election", "a few days before the election", "at the last moment", "can't remember" ]
# value_scale = "ordinal_descending"
[[03_2_election_specific.005_decision_moment.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional') }"
name.de = "Entscheidzeitpunkt eidgenössische Verhältniswahl {i}"
question = "Wann haben Sie sich entschieden, welche Partei Sie in den **{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'body') }** wählen (bzw. dass Sie leer einlegen)?"
question_common = "Wann haben Sie sich entschieden, welche Partei Sie bei der eidgenössischen Verhältniswahl {i} wählen (bzw. dass Sie leer einlegen)?"
id = "decision_moment_federal_proportional_election_{i}"
description.en = "respondent's time of decision in the federal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's time of decision in the { salim::rank_nr(i) } federal proportional election"
[[03_2_election_specific.005_decision_moment.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'majoritarian') }"
name.de = "Entscheidzeitpunkt eidgenössische Mehrheitswahl {i}"
question = "Wann haben Sie sich entschieden, wen Sie in den **{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'body') }** wählen (bzw. dass Sie leer einlegen)?"
question_common = "Wann haben Sie sich entschieden, wen Sie bei der eidgenössischen Mehrheitswahl {i} wählen (bzw. dass Sie leer einlegen)?"
id = "decision_moment_federal_majoritarian_election_{i}"
description.en = "respondent's time of decision in the federal majoritarian election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's time of decision in the { salim::rank_nr(i) } federal majoritarian election"
[[03_2_election_specific.005_decision_moment.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional') }"
name.de = "Entscheidzeitpunkt kantonale Verhältniswahl {i}"
question = "Wann haben Sie sich entschieden, welche Partei Sie in den **{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'body_alt') }** wählen (bzw. dass Sie leer einlegen)?"
question_common = "Wann haben Sie sich entschieden, welche Partei Sie bei der kantonalen Verhältniswahl {i} wählen (bzw. dass Sie leer einlegen)?"
id = "decision_moment_cantonal_proportional_election_{i}"
description.en = "respondent's time of decision in the cantonal proportional election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's time of decision in the { salim::rank_nr(i) } cantonal proportional election"
[[03_2_election_specific.005_decision_moment.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'majoritarian') }"
name.de = "Entscheidzeitpunkt kantonale Mehrheitswahl {i}"
question = "Wann haben Sie sich entschieden, wen Sie in den **{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'body') }** wählen (bzw. dass Sie leer einlegen)?"
question_common = "Wann haben Sie sich entschieden, wen Sie bei der kantonalen Mehrheitswahl {i} wählen (bzw. dass Sie leer einlegen)?"
id = "decision_moment_cantonal_majoritarian_election_{i}"
description.en = "respondent's time of decision in the cantonal majoritarian election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's time of decision in the { salim::rank_nr(i) } cantonal majoritarian election"


[03_proposal_specific]
title = "Vorlagenspezifische Fragen"
ballot_types = [ "referendum" ]

[03_proposal_specific.001_decision]
who = "Teilnehmende"
is_mandatory = true
[[03_proposal_specific.001_decision.item]]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton) }"
name.de = "Stimmentscheid eidgenössische Vorlage {i}"
question.default = """
{
  ifelse(i == 1L,
         paste0('Am ',
                stringi::stri_datetime_format(time = ballot_date,
                                              format = 'date_long',
                                              locale = lang_to_locale('de')),
                ' wurde über ',
                salim::write_out_n(n_proposals(ballot_date = ballot_date,
                                               lvls = 'federal',
                                               canton = canton),
                                   lang = 'de',
                                   use_singular = TRUE),
                ' eidgenössische Vorlage',
                ifelse(n_proposals(ballot_date = ballot_date,
                                   lvls = 'federal',
                                   canton = canton) > 1L,
                       'n abgestimmt. <br><br>',
                       paste0(' _',
                              proposal_name(ballot_date = ballot_date,
                                            lvl = 'federal',
                                            canton = canton,
                                            proposal_nr = i,
                                            lang = 'de',
                                            type = 'long'),
                              '_ abgestimmt. '))),
         '')
}Wie haben Sie {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'federal',
                     canton = canton) > 1L,
         paste0('bei der Vorlage _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'federal',
                              canton = canton,
                              proposal_nr = i,
                              lang = 'de',
                              type = 'long'),
                '_ abgestimmt'),
         'sich entschieden')
}?"""
question.20181125 = """
{
  ifelse(i == 1L,
         paste0('Am ',
                stringi::stri_datetime_format(time = ballot_date,
                                              format = 'date_long',
                                              locale = lang_to_locale('de')),
                ' wurde über ',
                salim::write_out_n(n_proposals(ballot_date = ballot_date,
                                               lvls = 'federal',
                                               canton = canton),
                                   lang = 'de',
                                   use_singular = TRUE),
                ' eidgenössische Vorlage',
                ifelse(n_proposals(ballot_date = ballot_date,
                                   lvls = 'federal',
                                   canton = canton) > 1L,
                       'n abgestimmt. <br><br>',
                       paste0(' _',
                              proposal_name(ballot_date = ballot_date,
                                            lvl = 'federal',
                                            canton = canton,
                                            proposal_nr = i,
                                            lang = 'de',
                                            type = 'long'),
                              '_ abgestimmt. '))),
         '')
}Wie haben Sie {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'federal',
                     canton = canton) > 1L,
         paste0('bei der',
                ifelse(i != 3,
                       ' Vorlage',
                       ''),
                ' _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'federal',
                              canton = canton,
                              proposal_nr = i,
                              lang = 'de',
                              type = 'long'),
                '_ abgestimmt'),
         'sich entschieden')
}?"""
question_common = "Wie haben Sie bei der eidgenössischen Vorlage {i} abgestimmt?"
id = "voting_decision_federal_proposal_{i}"
description.en = "respondent's voting decision on the federal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's voting decision on the { salim::rank_nr(i) } federal proposal"
response_options = "{ c(response_options(type = 'yes', lang = 'de', subtypes = 'main'), response_options(type = 'no', lang = 'de', subtypes = 'main'), response_options(type = 'abstain', lang = 'de', subtypes = 'main'), response_options(type = 'dunno', lang = 'de', subtypes = 'forgotten')) }"
variable_values = "{ c(q_response_option_codes(types = c('yes', 'no')), 3L, q_response_option_codes(types = 'dunno')) }"
value_labels = "{ c(response_options(type = 'yes', lang = 'en', subtypes = 'main'), response_options(type = 'no', lang = 'en', subtypes = 'main'), response_options(type = 'abstain', lang = 'en', subtypes = 'main'), response_options(type = 'dunno', lang = 'en', subtypes = 'forgotten')) }"
[[03_proposal_specific.001_decision.item]]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) }"
name.de = "Stimmentscheid kantonale Vorlage {i}"
question.default = """
{
  ifelse(i == 1L,
         paste0(ifelse(n_proposals(ballot_date = ballot_date,
                                   lvls = 'federal',
                                   canton = canton) > 0L,
                       paste0('Weiter wurde am ',
                              stringi::stri_datetime_format(time = ballot_date,
                                                            format = 'date_long',
                                                            locale = lang_to_locale('de'))),
                       paste0('Am ',
                              stringi::stri_datetime_format(time = ballot_date,
                                                            format = 'date_long',
                                                            locale = lang_to_locale('de')),
                              ' wurde')),
                ' über ',
                salim::write_out_n(n_proposals(ballot_date = ballot_date,
                                               lvls = 'cantonal',
                                               canton = canton),
                                   lang = 'de',
                                   use_singular = TRUE),
                ' kantonale Vorlage',
                ifelse(n_proposals(ballot_date = ballot_date,
                                   lvls = 'cantonal',
                                   canton = canton) > 1L,
                       'n befunden. <br><br>',
                       paste0(' _',
                              proposal_name(ballot_date = ballot_date,
                                            lvl = 'cantonal',
                                            canton = canton,
                                            proposal_nr = i,
                                            lang = 'de',
                                            type = 'long'),
                              '_ (im Folgenden _',
                              proposal_name(ballot_date = ballot_date,
                                            lvl = 'cantonal',
                                            canton = canton,
                                            proposal_nr = i,
                                            lang = 'de',
                                            type = 'short'),
                              '_ genannt) befunden. '))),
         '')
}Wie haben Sie sich {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'cantonal',
                     canton = canton) > 1L,
         paste0('bei der Vorlage _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = i,
                              lang = 'de',
                              type = 'long'),
                '_ (im Folgenden _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = i,
                              lang = 'de',
                              type = 'short'),
                '_ genannt) '),
         '')
}entschieden?"""
question.20180923 = """
{
  ifelse(i == 1L,
         paste0(ifelse(n_proposals(ballot_date = ballot_date,
                                   lvls = 'federal',
                                   canton = canton) > 0L,
                       paste0('Weiter wurde am ',
                              stringi::stri_datetime_format(time = ballot_date,
                                                            format = 'date_long',
                                                            locale = lang_to_locale('de'))),
                       paste0('Am ',
                              stringi::stri_datetime_format(time = ballot_date,
                                                            format = 'date_long',
                                                            locale = lang_to_locale('de')),
                              ' wurde')),
                ' über ',
                salim::write_out_n(n_proposals(ballot_date = ballot_date,
                                               lvls = 'cantonal',
                                               canton = canton),
                                   lang = 'de',
                                   use_singular = TRUE),
                ' kantonale Vorlage',
                ifelse(n_proposals(ballot_date = ballot_date,
                                   lvls = 'cantonal',
                                   canton = canton) > 1L,
                       'n abgestimmt. <br><br>',
                       paste0(' _',
                              proposal_name(ballot_date = ballot_date,
                                            lvl = 'cantonal',
                                            canton = canton,
                                            proposal_nr = i,
                                            lang = 'de',
                                            type = 'long'),
                              '_ (im Folgenden _',
                              proposal_name(ballot_date = ballot_date,
                                            lvl = 'cantonal',
                                            canton = canton,
                                            proposal_nr = i,
                                            lang = 'de',
                                            type = 'short'),
                              '_ genannt) abgestimmt. '))),
         '')
}Wie haben Sie sich {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'cantonal',
                     canton = canton) > 1L,
         paste0('bei der Vorlage _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = i,
                              lang = 'de',
                              type = 'long'),
                '_ (im Folgenden _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = i,
                              lang = 'de',
                              type = 'short'),
                '_ genannt) '),
         '')
}entschieden?"""
question.20181125 = """
{
  ifelse(i == 1L,
         paste0(ifelse(n_proposals(ballot_date = ballot_date,
                                   lvls = 'federal',
                                   canton = canton) > 0L,
                       paste0('Weiter wurde am ',
                              stringi::stri_datetime_format(time = ballot_date,
                                                            format = 'date_long',
                                                            locale = lang_to_locale('de'))),
                       paste0('Am ',
                              stringi::stri_datetime_format(time = ballot_date,
                                                            format = 'date_long',
                                                            locale = lang_to_locale('de')),
                              ' wurde')),
                ' über ',
                salim::write_out_n(n_proposals(ballot_date = ballot_date,
                                               lvls = 'cantonal',
                                               canton = canton),
                                   lang = 'de',
                                   use_singular = TRUE),
                ' kantonale Vorlage',
                ifelse(n_proposals(ballot_date = ballot_date,
                                   lvls = 'cantonal',
                                   canton = canton) > 1L,
                       'n',
                       paste0(' _',
                              proposal_name(ballot_date = ballot_date,
                                            lvl = 'cantonal',
                                            canton = canton,
                                            proposal_nr = i,
                                            lang = 'de',
                                            type = 'long'),
                              '_ (im Folgenden _',
                              proposal_name(ballot_date = ballot_date,
                                            lvl = 'cantonal',
                                            canton = canton,
                                            proposal_nr = i,
                                            lang = 'de',
                                            type = 'short'),
                              '_ genannt)')),
                ' befunden. <br><br>'),
         '')
}Wie haben Sie sich {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'cantonal',
                     canton = canton) > 1L,
         paste0('bei',
                ifelse(proposal_type(ballot_date = ballot_date,
                                     lvl = 'cantonal',
                                     canton = canton,
                                     proposal_nr = i) == 'citizens\\' initiative',
                                         ' der Volksinitiative',
                                         'm'),
                          paste0(' _',
                                 proposal_name(ballot_date = ballot_date,
                                               lvl = 'cantonal',
                                               canton = canton,
                                               proposal_nr = i,
                                               lang = 'de',
                                               type = 'long'),
                                 '_ (im Folgenden _',
                                 proposal_name(ballot_date = ballot_date,
                                               lvl = 'cantonal',
                                               canton = canton,
                                               proposal_nr = i,
                                               lang = 'de',
                                               type = 'short'),
                                 '_ genannt) ')),
                   '')
}entschieden?"""
question.20200927 = """
{
  ifelse(i == 1L,
         paste0('Weiter wurde am ',
                stringi::stri_datetime_format(time = ballot_date,
                                              format = 'date_long',
                                              locale = lang_to_locale('de')),
                ' über drei kantonale Vorlagen befunden. Der Einfachheit halber beziehen wir uns in dieser Umfrage bei der _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = i,
                              lang = 'de',
                              type = 'long'),
                '_ (im Folgenden _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = i,
                              lang = 'de',
                              type = 'short'),
                '_ genannt) nur auf die Gesetzes- und nicht die Verfassungsänderung. <br><br>Wie haben Sie sich bei der _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = i,
                              lang = 'de',
                              type = 'short'),
                '_'),
         paste0('Wie haben Sie sich beim _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = i,
                              lang = 'de',
                              type = 'long'),
                '_ (im Folgenden _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = i,
                              lang = 'de',
                              type = 'short'),
                '_ genannt)'))
} entschieden?"""
question_common = "Wie haben Sie sich bei der kantonalen Vorlage {i} entschieden?"
id = "voting_decision_cantonal_proposal_{i}"
description.en = "respondent's voting decision on the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's voting decision on the { salim::rank_nr(i) } cantonal proposal"
response_options = "{ c(response_options(type = 'yes', lang = 'de', subtypes = 'main'), response_options(type = 'no', lang = 'de', subtypes = 'main'), response_options(type = 'abstain', lang = 'de', subtypes = 'main'), response_options(type = 'dunno', lang = 'de', subtypes = 'forgotten')) }"
variable_values = "{ c(q_response_option_codes(types = c('yes', 'no')), 3L, q_response_option_codes(types = 'dunno')) }"
value_labels = "{ c(response_options(type = 'yes', lang = 'en', subtypes = 'main'), response_options(type = 'no', lang = 'en', subtypes = 'main'), response_options(type = 'abstain', lang = 'en', subtypes = 'main'), response_options(type = 'dunno', lang = 'en', subtypes = 'forgotten')) }"

[03_proposal_specific.002_all]
who = "alle"
[03_proposal_specific.002_all.001_importance]
response_options = [ "0 (überhaupt nicht wichtig)", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10 (sehr wichtig)", "weiss nicht" ]
variable_values = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99 ]
value_labels = [ "0 (not important at all)", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10 (very important)", "don't know" ]
value_scale = "ordinal_ascending"
[[03_proposal_specific.002_all.001_importance.item]]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton) }"
name.de = "Wichtigkeit eidgenössische Vorlage {i}"
question = """
{
  ifelse(i == 1L,
         paste0('Wie wichtig war',
                ifelse(n_proposals(ballot_date = ballot_date,
                                   lvls = 'federal',
                                   canton = canton) > 1L,
                       'en die eidgenössischen Vorlagen für Sie persönlich? <br><br>',
                       paste0(' ',
                              salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                                       lvl = 'federal',
                                                                                       canton = canton,
                                                                                       proposal_nr = i,
                                                                                       type = 'short'),
                                                         case = 'nominative'),
                              ' _',
                              proposal_name(ballot_date = ballot_date,
                                            lvl = 'federal',
                                            canton = canton,
                                            proposal_nr = i,
                                            lang = 'de',
                                            type = 'short'),
                              '_ für Sie persönlich? '))),
         '')
}Stufen Sie bitte {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'federal',
                     canton = canton) > 1L,
         'die',
         'deren')
} Bedeutung {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'federal',
                     canton = canton) > 1L,
         paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                         lvl = 'federal',
                                                                         canton = canton,
                                                                         proposal_nr = i,
                                                                         type = 'short'),
                                           case = 'genitive'),
                ' _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'federal',
                              canton = canton,
                              proposal_nr = i,
                              lang = 'de',
                              type = 'short'),
                ifelse(proposal_name_gender(ballot_date = ballot_date,
                                            lvl = 'federal',
                                            canton = canton,
                                            proposal_nr = i,
                                            type = 'short') == 'feminine',
                       '',
                       's'),
                '_ '),
         '')
}für Sie persönlich zwischen 0 (überhaupt nicht wichtig) und 10 (sehr wichtig) ein."""
question_common = "Stufen Sie bitte die Bedeutung der eidgenössischen Vorlage {i} für Sie persönlich zwischen 0 (überhaupt nicht wichtig) und 10 (sehr wichtig) ein."
id = "importance_federal_proposal_{i}"
description.en = "importance the respondent attaches to the federal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "importance the respondent attaches to the { salim::rank_nr(i) } federal proposal"
include.default = false
include.true = [ 2021-11-28 ]
[[03_proposal_specific.002_all.001_importance.item]]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) }"
name.de = "Wichtigkeit kantonale Vorlage {i}"
question = """
{
  ifelse(i == 1L,
         paste0('Wie wichtig war',
                ifelse(n_proposals(ballot_date = ballot_date,
                                   lvls = 'cantonal',
                                   canton = canton) > 1L,
                       'en die kantonalen Vorlagen für Sie persönlich? <br><br>',
                       paste0(' ',
                              salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                                       lvl = 'cantonal',
                                                                                       canton = canton,
                                                                                       proposal_nr = i,
                                                                                       type = 'short'),
                                                         case = 'nominative'),
                              ' _',
                              proposal_name(ballot_date = ballot_date,
                                            lvl = 'cantonal',
                                            canton = canton,
                                            proposal_nr = i,
                                            lang = 'de',
                                            type = 'short'),
                              '_ für Sie persönlich? '))),
         '')
}Stufen Sie bitte {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'cantonal',
                     canton = canton) > 1L,
         'die',
         'deren')
} Bedeutung {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'cantonal',
                     canton = canton) > 1L,
         paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                         lvl = 'cantonal',
                                                                         canton = canton,
                                                                         proposal_nr = i,
                                                                         type = 'short'),
                                           case = 'genitive'),
                ' _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = i,
                              lang = 'de',
                              type = 'short'),
                ifelse(proposal_name_gender(ballot_date = ballot_date,
                                            lvl = 'cantonal',
                                            canton = canton,
                                            proposal_nr = i,
                                            type = 'short') == 'feminine',
                       '',
                       's'),
                '_ '),
         '')
}für Sie persönlich zwischen 0 (überhaupt nicht wichtig) und 10 (sehr wichtig) ein."""
question_common = "Stufen Sie bitte die Bedeutung der kantonalen Vorlage {i} für Sie persönlich zwischen 0 (überhaupt nicht wichtig) und 10 (sehr wichtig) ein."
id = "importance_cantonal_proposal_{i}"
description.en = "importance the respondent attaches to the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "importance the respondent attaches to the { salim::rank_nr(i) } cantonal proposal"
[03_proposal_specific.002_all.002_affectedness]
response_options = [ "nein", "ja, zum Besseren", "ja, zum Schlechteren", "weiss nicht" ]
variable_values = [ 1, 2, 3, 99 ]
value_labels = [ "no", "yes, for the better", "yes, for the worse", "don't know" ]
[[03_proposal_specific.002_all.002_affectedness.item]]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton) }"
name.de = "Betroffenheit eidgenössische Vorlage {i}"
question.20180923_20201018 = """
Würde sich durch die Annahme {
  salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                           lvl = 'federal',
                                                           canton = canton,
                                                           proposal_nr = i,
                                                           type = 'short'),
                                                           case = 'genitive')
} _{
  proposal_name(ballot_date = ballot_date,
                lvl = 'federal',
                canton = canton,
                proposal_nr = i,
                lang = 'de',
                type = 'short')
}{
  ifelse(proposal_name_gender(ballot_date = ballot_date,
                              lvl = 'federal',
                              canton = canton,
                              proposal_nr = i,
                              type = 'short') == 'feminine',
         '',
         's')
}_ für Sie persönlich etwas ändern?"""
question.default = """
Würde sich durch die {
  ifelse(proposal_type(ballot_date = ballot_date,
                       lvl = 'federal',
                       canton = canton,
                       proposal_nr = i) %in% c('mandatory referendum', 'optional referendum'),
         'Ablehnung',
         'Annahme')
} {
  salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                           lvl = 'federal',
                                                           canton = canton,
                                                           proposal_nr = i,
                                                           type = 'short'),
                             case = 'genitive')
} _{
  proposal_name(ballot_date = ballot_date,
                lvl = 'federal',
                canton = canton,
                proposal_nr = i,
                lang = 'de',
                type = 'short')
}{
  ifelse(proposal_name_gender(ballot_date = ballot_date,
                              lvl = 'federal',
                              canton = canton,
                              proposal_nr = i,
                              type = 'short') == 'feminine',
         '',
         's')
}_ für Sie persönlich etwas ändern?"""
question_common = "Würde sich durch die Annahme bzw. Ablehnung der eidgenössischen Vorlage {i} für Sie persönlich etwas ändern?"
id = "affectedness_federal_proposal_{i}"
description.en = "whether or not the respondent would be personally affected by the adoption of the federal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "whether or not the respondent would be personally affected by the adoption of the { salim::rank_nr(i) } federal proposal"
include = "{ has_referendum(ballot_date = ballot_date, lvls = 'federal', canton = canton) && !has_referendum(ballot_date = ballot_date, lvls = 'cantonal', canton = canton) }"
[[03_proposal_specific.002_all.002_affectedness.item]]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) }"
name.de = "Betroffenheit kantonale Vorlage {i}"
question.20180923_20201018 = "Würde sich durch die Annahme { salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'short'), case = 'genitive') } _{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }{ ifelse(proposal_name_gender(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'short') == 'feminine', '', 's') }_ für Sie persönlich etwas ändern?"
question.default = """
Würde sich durch die {
  ifelse(proposal_type(ballot_date = ballot_date,
                       lvl = 'federal',
                       canton = canton,
                       proposal_nr = i) %in% c('mandatory referendum', 'optional referendum'),
         'Ablehnung',
         'Annahme')
} {
  salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                           lvl = 'cantonal',
                                                           canton = canton,
                                                           proposal_nr = i,
                                                           type = 'short'),
                             case = 'genitive')
} _{
  proposal_name(ballot_date = ballot_date,
                lvl = 'cantonal',
                canton = canton,
                proposal_nr = i,
                lang = 'de',
                type = 'short')
}{
  ifelse(proposal_name_gender(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = i,
                              type = 'short') == 'feminine',
         '',
         's')
}_ für Sie persönlich etwas ändern?"""
question_common = "Würde sich durch die Annahme bzw. Ablehnung der kantonalen Vorlage {i} für Sie persönlich etwas ändern?"
id = "affectedness_cantonal_proposal_{i}"
description.en = "whether or not the respondent would be personally affected by the adoption of the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "whether or not the respondent would be personally affected by the adoption of the { salim::rank_nr(i) } cantonal proposal"
include.false = [ 2018-11-25 ]
[03_proposal_specific.002_all.003_information_level]
response_options = [ "0 (überhaupt nicht informiert)", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10 (sehr gut informiert)", "weiss nicht" ]
variable_values = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99 ]
value_labels = [ "0 (not informed at all)", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10 (very well informed)", "don't know" ]
value_scale = "ordinal_ascending"
[[03_proposal_specific.002_all.003_information_level.item]]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton) }"
name.de = "Informationsgrad eidgenössische Vorlage {i}"
question = """
{
  ifelse(i == 1L,
         paste0('Wie gut informiert fühlten Sie sich über ',
                ifelse(n_proposals(ballot_date = ballot_date,
                                   lvls = 'federal',
                                   canton = canton) > 1L,
                       'die eidgenössischen Vorlagen? <br><br>',
                       paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                                       lvl = 'federal',
                                                                                       canton = canton,
                                                                                       proposal_nr = i,
                                                                                       type = 'short'),
                                                         case = 'accusative'),
                              ' _',
                              proposal_name(ballot_date = ballot_date,
                                            lvl = 'federal',
                                            canton = canton,
                                            proposal_nr = i,
                                            lang = 'de',
                                            type = 'short'),
                              '_? '))),
         '')
}Bitte geben Sie für {
  salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                           lvl = 'federal',
                                                           canton = canton,
                                                           proposal_nr = i,
                                                           type = 'short'),
                             case = 'accusative')
} _{
  proposal_name(ballot_date = ballot_date,
                lvl = 'federal',
                canton = canton,
                proposal_nr = i,
                lang = 'de',
                type = 'short')
}_ einen Wert an zwischen 0 (überhaupt nicht informiert) und 10 (sehr gut informiert)."""
question_common = "Wie gut informiert fühlten Sie sich? Bitte geben Sie für die eidgenössische Vorlage {i} einen Wert an zwischen 0 (überhaupt nicht informiert) und 10 (sehr gut informiert)."
id = "information_level_federal_proposal_{i}"
description.en = "respondent's information level on the federal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's information level on the { salim::rank_nr(i) } federal proposal"
include.default = false
include.true = [ 2020-09-27, 2021-11-28 ]
[[03_proposal_specific.002_all.003_information_level.item]]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) }"
name.de = "Informationsgrad kantonale Vorlage {i}"
question = """
{
  ifelse(i == 1L,
         paste0('Wie gut informiert fühlten Sie sich über ',
                ifelse(n_proposals(ballot_date = ballot_date,
                                   lvls = 'cantonal',
                                   canton = canton) > 1L,
                       'die kantonalen Vorlagen? <br><br>',
                       paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                                       lvl = 'cantonal',
                                                                                       canton = canton,
                                                                                       proposal_nr = i,
                                                                                       type = 'short'),
                                                         case = 'accusative'),
                              ' _',
                              proposal_name(ballot_date = ballot_date,
                                            lvl = 'cantonal',
                                            canton = canton,
                                            proposal_nr = i,
                                            lang = 'de',
                                            type = 'short'),
                              '_? '))),
         '')
}Bitte geben Sie für {
  salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                           lvl = 'cantonal',
                                                           canton = canton,
                                                           proposal_nr = i,
                                                           type = 'short'),
                             case = 'accusative')
} _{
  proposal_name(ballot_date = ballot_date,
                lvl = 'cantonal',
                canton = canton,
                proposal_nr = i,
                lang = 'de',
                type = 'short')
}_ einen Wert an zwischen 0 (überhaupt nicht informiert) und 10 (sehr gut informiert)."""
question_common = "Wie gut informiert fühlten Sie sich? Bitte geben Sie für die kantonale Vorlage {i} einen Wert an zwischen 0 (überhaupt nicht informiert) und 10 (sehr gut informiert)."
id = "information_level_cantonal_proposal_{i}"
description.en = "respondent's information level on the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's information level on the { salim::rank_nr(i) } cantonal proposal"
include.false = [ 2018-09-23, 2018-11-25 ]

[03_proposal_specific.003_main_motive.001_federal]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton) }"
allow_multiple_answers = true
[[03_proposal_specific.003_main_motive.001_federal.item]]
name.de = "Ja-Hauptmotiv eidgenössische Vorlage {i}"
who = "Ja-Stimmende eidgenössische Vorlage {i}"
question = "Was war Ihre Hauptmotivation, { salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, type = 'short'), case = 'dative') } _{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_ zuzustimmen? Ich …"
question_common = "Was war Ihre Hauptmotivation, der eidgenössischen Vorlage {i} zuzustimmen? Ich …"
id = "main_motive_federal_proposal_{i}_yes"
description.en = "respondent's main motivation to vote in favor of the federal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's main motivation to vote in favor of the { salim::rank_nr(i) } federal proposal"
response_options = "{ proposal_main_motives(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, type = 'yes') %$% de %>% c(response_options(type = 'unspecific', lang = 'de', subtypes = 'main'), response_options(type = 'custom', lang = 'de', subtypes = 'main')) }"
variable_values = "{ proposal_main_motives(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, type = 'yes') %$% code %>% c(q_response_option_codes(types = c('unspecific', 'custom'))) }"
value_labels = "{ proposal_main_motives(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, type = 'yes') %$% en %>% c(response_options(type = 'unspecific', lang = 'en', subtypes = 'main'), response_options(type = 'custom', lang = 'en', subtypes = 'main')) }"
include = "{ n_proposal_main_motives(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, type = 'yes') > 0L }"
[[03_proposal_specific.003_main_motive.001_federal.item]]
name.de = "Nein-Hauptmotiv eidgenössische Vorlage {i}"
who = "Nein-Stimmende eidgenössische Vorlage {i}"
question = "Was war Ihre Hauptmotivation, { salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, type = 'short'), case = 'accusative') } _{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_ abzulehnen? Ich …"
question_common = "Was war Ihre Hauptmotivation, die eidgenössische Vorlage {i} abzulehnen? Ich …"
id = "main_motive_federal_proposal_{i}_no"
description.en = "respondent's main motivation to vote against the federal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's main motivation to vote against the { salim::rank_nr(i) } federal proposal"
response_options = "{ proposal_main_motives(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, type = 'no') %$% de %>% c(response_options(type = 'unspecific', lang = 'de', subtypes = 'main'), response_options(type = 'custom', lang = 'de', subtypes = 'main')) }"
variable_values = "{ proposal_main_motives(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, type = 'no') %$% code %>% c(q_response_option_codes(types = c('unspecific', 'custom'))) }"
value_labels = "{ proposal_main_motives(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, type = 'no') %$% en %>% c(response_options(type = 'unspecific', lang = 'en', subtypes = 'main'), response_options(type = 'custom', lang = 'en', subtypes = 'main')) }"
include = "{ n_proposal_main_motives(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, type = 'no') > 0L }"

[03_proposal_specific.003_main_motive.002_cantonal]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) }"
allow_multiple_answers.default = true
allow_multiple_answers.false = [ 2018-09-23 ]
[[03_proposal_specific.003_main_motive.002_cantonal.item]]
topic.default = "Ja-Hauptmotiv kantonale Vorlage {i}"
topic.20180923 = "Ja-Hauptmotiv kantonale Vorlage {i}[^dup]"
who = "Ja-Stimmende kantonale Vorlage {i}"
question.default = "Was war Ihre Hauptmotivation, { salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'short'), case = 'dative') } _{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_ zuzustimmen? Ich …"
question.20180923 = "Was war Ihre Hauptmotivation, { salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'short'), case = 'dative') } _{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_ zuzustimmen? Ich wollte in erster Linie …"
question_common = "Was war Ihre Hauptmotivation, der kantonalen Vorlage {i} zuzustimmen? Ich …"
id = "main_motive_cantonal_proposal_{i}_yes"
description.en = "respondent's main motivation to vote in favor of the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's main motivation to vote in favor of the { salim::rank_nr(i) } cantonal proposal"
response_options = "{ proposal_main_motives(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'yes') %$% de %>% c(response_options(type = 'unspecific', lang = 'de', subtypes = 'main'), response_options(type = 'custom', lang = 'de', subtypes = 'main')) }"
variable_values = "{ proposal_main_motives(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'yes') %$% code %>% c(q_response_option_codes(types = c('unspecific', 'custom'))) }"
value_labels = "{ proposal_main_motives(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'yes') %$% en %>% c(response_options(type = 'unspecific', lang = 'en', subtypes = 'main'), response_options(type = 'custom', lang = 'en', subtypes = 'main')) }"
include = "{ n_proposal_main_motives(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'yes') > 0L }"
[[03_proposal_specific.003_main_motive.002_cantonal.item]]
topic.default = "Nein-Hauptmotiv kantonale Vorlage {i}"
topic.20180923 = "Nein-Hauptmotiv kantonale Vorlage {i}[^dup]"
who = "Nein-Stimmende kantonale Vorlage {i}"
question.default = "Was war Ihre Hauptmotivation, { salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'short'), case = 'accusative') } _{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_ abzulehnen? Ich …"
question.20180923 = "Was war Ihre Hauptmotivation, { salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'short'), case = 'accusative') } _{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_ abzulehnen? Ich wollte in erster Linie …"
question_common = "Was war Ihre Hauptmotivation, die kantonale Vorlage {i} abzulehnen? Ich …"
id = "main_motive_cantonal_proposal_{i}_no"
description.en = "respondent's main motivation to vote against the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's main motivation to vote against the { salim::rank_nr(i) } cantonal proposal"
response_options = "{ proposal_main_motives(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'no') %$% de %>% c(response_options(type = 'unspecific', lang = 'de', subtypes = 'main'), response_options(type = 'custom', lang = 'de', subtypes = 'main')) }"
variable_values = "{ proposal_main_motives(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'no') %$% code %>% c(q_response_option_codes(types = c('unspecific', 'custom'))) }"
value_labels = "{ proposal_main_motives(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'no') %$% en %>% c(response_options(type = 'unspecific', lang = 'en', subtypes = 'main'), response_options(type = 'custom', lang = 'en', subtypes = 'main')) }"
include = "{ n_proposal_main_motives(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'no') > 0L }"

[03_proposal_specific.004_participants]
who = "Teilnehmende"
[[03_proposal_specific.004_participants.item]]
who = "eidgenössisch und kantonal Teilnehmende"
name.de = "Anziehungskraft eidgenössische Vorlagen"
question.default = """
Hätten Sie auch an der Abstimmung teilgenommen, wenn nicht über {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'cantonal',
                     canton = canton) > 1L,
         paste0('die ',
                salim::write_out_n(n_proposals(ballot_date = ballot_date,
                                               lvls = 'cantonal',
                                               canton = canton),
                                   lang = 'de',
                                   use_dual = TRUE),
                ' kantonalen Vorlagen'),
         paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                         lvl = 'cantonal',
                                                                         canton = canton,
                                                                         proposal_nr = 1L,
                                                                         type = 'short'),
                                           case = 'accusative'),
                ' kantonale',
                ifelse(proposal_name_gender(ballot_date = ballot_date,
                                            lvl = 'cantonal',
                                            canton = canton,
                                            proposal_nr = 1L,
                                            type = 'short') == 'masculine',
                       'n',
                       ''),
                ' _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = 1L,
                              lang = 'de',
                              type = 'short'),
                '_'))
}, sondern **nur {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'federal',
                     canton = canton) > 1L,
         'die eidgenössischen Vorlagen',
         paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                         lvl = 'federal',
                                                                         canton = canton,
                                                                         proposal_nr = 1L,
                                                                         type = 'short'),
                                           case = 'accusative'),
                ' eidgenössische',
                ifelse(proposal_name_gender(ballot_date = ballot_date,
                                            lvl = 'federal',
                                            canton = canton,
                                            proposal_nr = 1L,
                                            type = 'short') == 'masculine',
                       'n',
                       ''),
                ' _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'federal',
                              canton = canton,
                              proposal_nr = 1L,
                              lang = 'de',
                              type = 'short'),
                '_'))
}** abgestimmt worden wäre?"""
question.20180923 = """
Hätten Sie auch an der Abstimmung teilgenommen, wenn nicht über die {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'cantonal',
                     canton = canton) > 1L,
         'kantonalen Vorlagen',
         paste0(' _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = 1L,
                              lang = 'de',
                              type = 'short'),
                '_'))
}, sondern nur die eidgenössischen Vorlagen abgestimmt worden wäre?"""
question_common = "Hätten Sie auch an der Abstimmung teilgenommen, wenn nicht über die kantonale(n) Vorlage(n), sondern **nur die eidgenössische(n) Vorlage(n)** abgestimmt worden wäre?"
id = "appeal_federal_proposals"
description.en = "whether or not the respondent would still have participated in the ballot if only federal and no cantonal proposals had been put to the vote"
response_options = [ "bestimmt", "vermutlich", "vermutlich eher nicht", "bestimmt nicht", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 99 ]
value_labels = [ "certainly", "probably", "probably not", "certainly not", "don't know" ]
value_scale = "ordinal_descending"
include.default = "{ all(has_referendum(ballot_date = ballot_date, lvls = c('cantonal', 'federal'), canton = canton)) }"
include.false = [ 2018-11-25 ]
[[03_proposal_specific.004_participants.item]]
who = "eidgenössisch und kantonal Teilnehmende"
name.de = "Anziehungskraft kantonale Vorlagen"
question.default = """
{
  ifelse(q_item_val(ballot_date = ballot_date,
                    canton = canton,
                    branch_path = c('03_proposal_specific', '004_participants'),
                    v_name = 'appeal_federal_proposals',
                    key = 'include'),
         'Und nun umgekehrt gefragt: ',
         '')
}Hätten Sie auch an der Abstimmung teilgenommen, wenn **nur über {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'cantonal',
                     canton = canton) > 1L,
         paste0('die ',
                salim::write_out_n(n_proposals(ballot_date = ballot_date,
                                               lvls = 'cantonal',
                                               canton = canton),
                                   lang = 'de',
                                   use_dual = TRUE),
                ' kantonalen',
                ifelse(n_proposals(ballot_date = ballot_date,
                                   lvls = 'federal',
                                   canton = canton) < 2L,
                       ' Vorlagen',
                       ''),
                '**'),
         paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                         lvl = 'cantonal',
                                                                         canton = canton,
                                                                         proposal_nr = 1L,
                                                                         type = 'short'),
                                           case = 'accusative'),
                ' kantonale',
                ifelse(proposal_name_gender(ballot_date = ballot_date,
                                            lvl = 'cantonal',
                                            canton = canton,
                                            proposal_nr = 1L,
                                            type = 'short') == 'masculine',
                       'n',
                       ''),
                ' _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = 1L,
                              lang = 'de',
                              type = 'short'),
                '_**'))
}, nicht aber über {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'federal',
                     canton = canton) > 1L,
         'die eidgenössischen Vorlagen',
         paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                         lvl = 'federal',
                                                                         canton = canton,
                                                                         proposal_nr = 1L,
                                                                         type = 'short'),
                                           case = 'accusative'),
                ' eidgenössische',
                ifelse(proposal_name_gender(ballot_date = ballot_date,
                                            lvl = 'federal',
                                            canton = canton,
                                            proposal_nr = 1L,
                                            type = 'short') == 'masculine',
                       'n',
                       ''),
                ' _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'federal',
                              canton = canton,
                              proposal_nr = 1L,
                              lang = 'de',
                              type = 'short'),
                '_'))
} abgestimmt worden wäre?"""
question.20180923 = """
{
  ifelse(q_item_val(ballot_date = ballot_date,
                    canton = canton,
                    branch_path = c('03_proposal_specific', '004_participants'),
                    v_name = 'appeal_federal_proposals',
                    key = 'include'),
         '',
         'Und nun umgekehrt gefragt: ')
}Hätten Sie auch an der Abstimmung teilgenommen, wenn nur über die kantonale{
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'cantonal',
                     canton = canton) > 1L,
         'n Vorlagen',
         paste0(' _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = 1L,
                              lang = 'de',
                              type = 'short'),
                '_'))
}, nicht aber über die eidgenössische{
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'federal',
                     canton = canton) > 1L,
         'n Vorlagen',
         paste0(' _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'federal',
                              canton = canton,
                              proposal_nr = 1L,
                              lang = 'de',
                              type = 'short'),
                '_'))
} abgestimmt worden wäre?"""
question_common = "Hätten Sie auch an der Abstimmung teilgenommen, wenn **nur über die kantonale(n) Vorlage(n)**, nicht aber über die eidgenössische(n) Vorlage(n) abgestimmt worden wäre?"
id = "appeal_cantonal_proposals"
description.en = "whether or not the respondent would still have participated in the ballot if only cantonal and no federal proposals had been put to the vote"
response_options = [ "bestimmt", "vermutlich", "vermutlich eher nicht", "bestimmt nicht", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 99 ]
value_labels = [ "certainly", "probably", "probably not", "certainly not", "don't know" ]
value_scale = "ordinal_descending"
include = "{ all(has_referendum(ballot_date = ballot_date, lvls = c('cantonal', 'federal'), canton = canton)) }"
[[03_proposal_specific.004_participants.z01_iterated.item]]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton) }"
name.de = "Verständnisschwierigkeit eidgenössische Vorlage {i}"
question = "Ist es Ihnen _eher leicht_ oder _eher schwer_ gefallen, zu verstehen, worum es bei{ ifelse(proposal_name_gender(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, type = 'short') == 'feminine', ' der', 'm') } _{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_ ging?"
question_common = "Ist es Ihnen _eher leicht_ oder _eher schwer_ gefallen, zu verstehen, worum es bei der eidgenössischen Vorlage {i} ging?"
id = "difficulty_federal_proposal_{i}"
description.en = "level of difficulty in understanding the federal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\" for the respondent"
variable_label_common = "level of difficulty in understanding the { salim::rank_nr(i) } federal proposal for the respondent"
response_options = [ "eher leicht", "eher schwer", "weiss nicht" ]
variable_values = [ 1, 2, 99 ]
value_labels = [ "rather easy", "rather difficult", "don't know" ]
value_scale = "binary"
include = "{ n_proposals(ballot_date = ballot_date, lvls = 'cantonal', canton = canton) == 0L }"
[[03_proposal_specific.004_participants.z01_iterated.item]]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) }"
name.de = "Verständnisschwierigkeit kantonale Vorlage {i}"
question = "Ist es Ihnen _eher leicht_ oder _eher schwer_ gefallen, zu verstehen, worum es bei{ ifelse(proposal_name_gender(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'short') == 'feminine', ' der', 'm') } _{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_ ging?"
question_common = "Ist es Ihnen _eher leicht_ oder _eher schwer_ gefallen, zu verstehen, worum es bei der kantonalen Vorlage {i} ging?"
id = "difficulty_cantonal_proposal_{i}"
description.en = "level of difficulty in understanding the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\" for the respondent"
variable_label_common = "level of difficulty in understanding the { salim::rank_nr(i) } cantonal proposal for the respondent"
response_options = [ "eher leicht", "eher schwer", "weiss nicht" ]
variable_values = [ 1, 2, 99 ]
value_labels = [ "rather easy", "rather difficult", "don't know" ]
value_scale = "binary"
[[03_proposal_specific.004_participants.z01_iterated.item]]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton) }"
name.de = "Entscheidzeitpunkt eidgenössische Vorlage {i}"
question = "Ab wann haben Sie gewusst, wie Sie bei{ ifelse(proposal_name_gender(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, type = 'short') == 'feminine', ' der', 'm') } _{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_ stimmen werden?"
question_common = "Ab wann haben Sie gewusst, wie Sie bei der eidgenössischen Vorlage {i} stimmen werden?"
id = "decision_moment_federal_proposal_{i}"
description.en = "respondent's time of decision concerning the federal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's time of decision concerning the { salim::rank_nr(i) } federal proposal"
response_options = [ "von Anfang an", "während des Abstimmungskampfes", "im letzten Moment", "weiss nicht" ]
variable_values = [ 1, 2, 3, 99 ]
value_labels = [ "from the very beginning", "during the voting campaign", "at the last moment", "don't know" ]
value_scale = "ordinal_ascending"
include = "{ n_proposals(ballot_date = ballot_date, lvls = 'cantonal', canton = canton) == 0L }"
[[03_proposal_specific.004_participants.z01_iterated.item]]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) }"
name.de = "Entscheidzeitpunkt kantonale Vorlage {i}"
question = "Ab wann haben Sie gewusst, wie Sie bei{ ifelse(proposal_name_gender(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'short') == 'feminine', ' der', 'm') } _{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_ stimmen werden?"
question_common = "Ab wann haben Sie gewusst, wie Sie bei der kantonalen Vorlage {i} stimmen werden?"
id = "decision_moment_cantonal_proposal_{i}"
description.en = "respondent's time of decision concerning the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's time of decision concerning the { salim::rank_nr(i) } cantonal proposal"
response_options = [ "von Anfang an", "während des Abstimmungskampfes", "im letzten Moment", "weiss nicht" ]
variable_values = [ 1, 2, 3, 99 ]
value_labels = [ "from the very beginning", "during the voting campaign", "at the last moment", "don't know" ]
value_scale = "ordinal_ascending"
[03_proposal_specific.004_participants.z01_iterated.z01_arguments]
variable_values = [ 1, 2, 3, 4, 99 ]
value_scale = "ordinal_descending"
[03_proposal_specific.004_participants.z01_iterated.z01_arguments.001_federal]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton) }"
j = "{ seq_len(n_proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)) }"
[[03_proposal_specific.004_participants.z01_iterated.z01_arguments.001_federal.item]]
name.de = "Zustimmung { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'Pro', 'Kontra') }-Argument { proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$nr[j] } eidgenössische Vorlage {i}"
question_intro_j = """
Nachfolgend einige Argumente zu{
  ifelse(proposal_name_gender(ballot_date = ballot_date,
                              lvl = 'federal',
                              canton = canton,
                              proposal_nr = i,
                              type = 'short') == 'feminine',
         'r',
         'm')
} _{
  proposal_name(ballot_date = ballot_date,
                lvl = 'federal',
                canton = canton,
                proposal_nr = i,
                lang = 'de',
                type = 'short')
}_, die im Abstimmungskampf vorgebracht wurden. Geben Sie bitte jeweils an, was Sie von diesen Argumenten halten."""
question = "Ich bin mit dem Argument _«{ proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$de.long[j] }»_ …"
question_common = "Ich bin mit dem { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'Pro', 'Kontra') }-Argument { proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$nr[j] } …"
id = "agreement_{ proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$side[j] }_argument_{ proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$nr[j] }_federal_proposal_{i}"
description.en = "respondent's agreement to the { proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$side[j] }-argument \"{ proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$en.long[j] }\" { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'in favor of', 'against') } the federal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's agreement to the { proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$nr[j] %>% salim::rank_nr() } { proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$side[j] }-argument { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'in favor of', 'against') } the { salim::rank_nr(i) } federal proposal"
response_options = [ "voll und ganz einverstanden", "eher einverstanden", "eher nicht einverstanden", "überhaupt nicht einverstanden", "weiss nicht" ]
value_labels = [ "fully agree", "rather agree", "rather disagree", "strongly disagree", "don't know" ]
[[03_proposal_specific.004_participants.z01_iterated.z01_arguments.001_federal.item]]
name.de = "Bedeutung { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'Pro', 'Kontra') }-Argument { proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$nr[j] } eidgenössische Vorlage {i}"
question_intro_j = "Geben Sie bitte zudem an, wie wichtig das jeweilige Argument für Ihren Entscheid war."
question = "Ich empfand das Argument _«{ proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$de.long[j] }»_ als …"
question_common = "Ich empfand das { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'Pro', 'Kontra') }-Argument { proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$nr[j] } als …"
id = "importance_{ proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$side[j] }_argument_{ proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$nr[j] }_federal_proposal_{i}"
description.en = "importance the respondent attaches to the { proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$side[j] }-argument \"{ proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$en.long[j] }\" { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'in favor of', 'against') } the federal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "importance the respondent attaches to the { salim::rank_nr(proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$nr[j]) } { proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$side[j] }-argument { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'in favor of', 'against') } the { salim::rank_nr(i) } federal proposal"
response_options = [ "sehr wichtig", "eher wichtig", "eher unwichtig", "bedeutungslos", "weiss nicht" ]
value_labels = [ "very important", "rather important", "rather unimportant", "irrelevant", "don't know" ]
[03_proposal_specific.004_participants.z01_iterated.z01_arguments.002_cantonal]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) }"
j = "{ seq_len(n_proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)) }"
[[03_proposal_specific.004_participants.z01_iterated.z01_arguments.002_cantonal.item]]
name.de = "Zustimmung { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'Pro', 'Kontra') }-Argument { proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$nr[j] } kantonale Vorlage {i}"
question_intro_j = """
Nachfolgend einige Argumente zu{
  ifelse(proposal_name_gender(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = i,
                              type = 'short') == 'feminine',
         'r',
         'm')
} _{
  proposal_name(ballot_date = ballot_date,
                lvl = 'cantonal',
                canton = canton,
                proposal_nr = i,
                lang = 'de',
                type = 'short')
}_, die im Abstimmungskampf vorgebracht wurden. Geben Sie bitte jeweils an, was Sie von diesen Argumenten halten."""
question = "Ich bin mit dem Argument _«{ proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$de.long[j] }»_ …"
question_common = "Ich bin mit dem { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'Pro', 'Kontra') }-Argument { proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$nr[j] } …"
id = "agreement_{ proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$side[j] }_argument_{ proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$nr[j] }_cantonal_proposal_{i}"
description.en = "respondent's agreement to the { proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$side[j] }-argument \"{ proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$en.long[j] }\" { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'in favor of', 'against') } the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "respondent's agreement to the { proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$nr[j] %>% salim::rank_nr() } { proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$side[j] }-argument { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'in favor of', 'against') } the { salim::rank_nr(i) } cantonal proposal"
response_options = [ "voll und ganz einverstanden", "eher einverstanden", "eher nicht einverstanden", "überhaupt nicht einverstanden", "weiss nicht" ]
value_labels = [ "fully agree", "rather agree", "rather disagree", "strongly disagree", "don't know" ]
[[03_proposal_specific.004_participants.z01_iterated.z01_arguments.002_cantonal.item]]
name.de = "Bedeutung { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'Pro', 'Kontra') }-Argument { proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$nr[j] } kantonale Vorlage {i}"
question_intro_j = "Geben Sie bitte zudem an, wie wichtig das jeweilige Argument für Ihren Entscheid war."
question = "Ich empfand das Argument _«{ proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$de.long[j] }»_ als …"
question_common = "Ich empfand das { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'Pro', 'Kontra') }-Argument { proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$nr[j] } als …"
id = "importance_{ proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$side[j] }_argument_{ proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$nr[j] }_cantonal_proposal_{i}"
description.en = "importance the respondent attaches to the { proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$side[j] }-argument \"{ proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$en.long[j] }\" { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'in favor of', 'against') } the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "importance the respondent attaches to the { salim::rank_nr(proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$nr[j]) } { proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$side[j] }-argument { ifelse(proposal_arguments(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i)$side[j] == 'pro', 'in favor of', 'against') } the { salim::rank_nr(i) } cantonal proposal"
response_options = [ "sehr wichtig", "eher wichtig", "eher unwichtig", "bedeutungslos", "weiss nicht" ]
value_labels = [ "very important", "rather important", "rather unimportant", "irrelevant", "don't know" ]
[[03_proposal_specific.004_participants.z01_iterated.z02_skill_questions.item]]
i = "{ skill_question_proposal_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton) }"
j = "{ skill_question_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i) }"
name.de = "Wissensfrage {j} eidgenössische Vorlage {i}"
question_intro_j = """
Nachfolgend {
  salim::write_out_n(n_skill_questions(ballot_date = ballot_date,
                                       lvl = 'federal',
                                       canton = canton,
                                       proposal_nr = i),
                     lang = 'de')
} inhaltliche Fragen im Zusammenhang mit {
  paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                  lvl = 'federal',
                                                                  canton = canton,
                                                                  proposal_nr = i,
                                                                  type = 'short'),
                                    case = 'dative'),
         ' _',
         proposal_name(ballot_date = ballot_date,
                       lvl = 'federal',
                       canton = canton,
                       proposal_nr = i,
                       lang = 'de',
                       type = 'short'))
}_. Bitte kreuzen Sie jeweils die Antwortoption an, die Sie am ehesten für korrekt halten."""
question = "_{ skill_question(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, skill_question_nr = j, lang = 'de') }_"
question_common = "Wissensfrage {j} zur eidgenössischen Vorlage {i}"
id = "skill_question_{j}_federal_proposal_{i}"
description.en = "respondent's answer to the skill question \"{ skill_question(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, skill_question_nr = j, lang = 'en') }\" about the federal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\" ({ skill_question_answer_nr(canton = canton, ballot_date = ballot_date, lvl = 'federal', proposal_nr = i, skill_question_nr = j) %>% salim::rank_nr() } answer is correct)"
variable_label_common = "respondent's answer to the { salim::rank_nr(j) } skill question about the { salim::rank_nr(i) } federal proposal"
response_options = "{ skill_question_response_options(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, skill_question_nr = j) %$% de %>% c(response_options(type = 'dunno', lang = 'de', subtypes = 'main')) }"
variable_values = "{ seq_len(nrow(skill_question_response_options(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, skill_question_nr = j))) %>% c(q_response_option_codes(types = 'dunno')) }"
value_labels = "{ skill_question_response_options(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, skill_question_nr = j) %$% en %>% c(response_options(type = 'dunno', lang = 'en', subtypes = 'main')) }"
[[03_proposal_specific.004_participants.z01_iterated.z02_skill_questions.item]]
i = "{ skill_question_proposal_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) }"
j = "{ skill_question_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i) }"
name.de = "Wissensfrage {j} kantonale Vorlage {i}"
question_intro_j.default = """
Nachfolgend {
  salim::write_out_n(n_skill_questions(ballot_date = ballot_date,
                                       lvl = 'cantonal',
                                       canton = canton,
                                       proposal_nr = i),
                     lang = 'de')
} inhaltliche Fragen im Zusammenhang mit {
  paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                  lvl = 'cantonal',
                                                                  canton = canton,
                                                                  proposal_nr = i,
                                                                  type = 'short'),
                                    case = 'dative'),
         ' _',
         proposal_name(ballot_date = ballot_date,
                       lvl = 'cantonal',
                       canton = canton,
                       proposal_nr = i,
                       lang = 'de',
                       type = 'short'))
}_. Bitte kreuzen Sie jeweils die Antwortoption an, die Sie am ehesten für korrekt halten."""
question_intro_j.20180923_20181125 = """
Nachfolgend einige inhaltliche Fragen im Zusammenhang mit {
  paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                  lvl = 'cantonal',
                                                                  canton = canton,
                                                                  proposal_nr = i,
                                                                  type = 'short'),
                                    case = 'dative'),
         ' _',
         proposal_name(ballot_date = ballot_date,
                       lvl = 'cantonal',
                       canton = canton,
                       proposal_nr = i,
                       lang = 'de',
                       type = 'short'))
}_. Bitte kreuzen Sie jeweils die Antwortoption an, die Sie am ehesten für korrekt halten."""
question = "_{ skill_question(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, skill_question_nr = j, lang = 'de') }_"
question_common = "Wissensfrage {j} zur kantonalen Vorlage {i}"
id = "skill_question_{j}_cantonal_proposal_{i}"
description.en = "respondent's answer to the skill question \"{ skill_question(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, skill_question_nr = j, lang = 'en') }\" about the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\" ({ skill_question_answer_nr(canton = canton, ballot_date = ballot_date, lvl = 'cantonal', proposal_nr = i, skill_question_nr = j) %>% salim::rank_nr() } answer is correct)"
variable_label_common = "respondent's answer to the { salim::rank_nr(j) } skill question about the { salim::rank_nr(i) } cantonal proposal"
response_options = "{ skill_question_response_options(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, skill_question_nr = j) %$% de %>% c(response_options(type = 'dunno', lang = 'de', subtypes = 'main')) }"
variable_values = "{ seq_len(nrow(skill_question_response_options(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, skill_question_nr = j))) %>% c(q_response_option_codes(types = 'dunno')) }"
value_labels = "{ skill_question_response_options(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, skill_question_nr = j) %$% en %>% c(response_options(type = 'dunno', lang = 'en', subtypes = 'main')) }"
[03_proposal_specific.004_participants.z02_information_source]
# NOTE: non-proposal-specific information source items are defined under `03_1_election_general.z02_information_source`, information is just sourced from there
lvl = "{ if (has_referendum(ballot_date = ballot_date, lvls = 'cantonal', canton = canton)) 'cantonal' else 'federal' }"
response_options = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z02_information_source'), v_name = 'information_source_free_newspapers', key = 'response_options') }"
variable_values = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z02_information_source'), v_name = 'information_source_free_newspapers', key = 'variable_values') }"
value_labels = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z02_information_source'), v_name = 'information_source_free_newspapers', key = 'value_labels') }"
value_scale = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z02_information_source'), v_name = 'information_source_free_newspapers', key = 'value_scale') }"
question_intro_i = """
Haben Sie die folgenden Quellen genutzt, um sich über {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = lvl,
                     canton = canton) > 1L,
         paste0('die ',
                salim::write_out_n(n_proposals(ballot_date = ballot_date,
                                               lvls = lvl,
                                               canton = canton),
                                   lang = 'de',
                                   use_dual = TRUE),
                ' **',
                ifelse(lvl == 'cantonal',
                       'kantonal',
                       'eidgenössisch'),
                'en** Vorlagen'),
         paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                         lvl = lvl,
                                                                         canton = canton,
                                                                         proposal_nr = 1L,
                                                                         type = 'short'),
                                           case = 'accusative'),
                ' _',
                proposal_name(ballot_date = ballot_date,
                              lvl = lvl,
                              canton = canton,
                              proposal_nr = 1L,
                              lang = 'de',
                              type = 'short'),
                '_'))
} zu informieren und eine Meinung zu bilden?"""
[[03_proposal_specific.004_participants.z02_information_source.item]]
# set iterator to trigger `question_intro_i`
i = 1
name.de = "Informationsquelle { ifelse(lvl == 'cantonal', 'kantonal', 'eidgenössisch') }e Vorlagen: Gratiszeitungen und kostenloser Online-Journalismus / News-Seiten"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z02_information_source'), v_name = 'information_source_free_newspapers', key = 'question') }"
question_common = "Haben Sie _Gratiszeitungen und kostenlosen Online-Journalismus / News-Seiten_ genutzt, um sich über die **{ ifelse(lvl == 'cantonal', 'kantonal', 'eidgenössisch') }e(n)** Vorlage(n) zu informieren und eine Meinung zu bilden?"
description.en = "whether or not the respondent used free newspapers and free online journalism / news sites to learn about the {lvl} proposals"
id = "{lvl}_proposals_information_source_free_newspapers"
[[03_proposal_specific.004_participants.z02_information_source.item]]
name.de = "Informationsquelle { ifelse(lvl == 'cantonal', 'kantonal', 'eidgenössisch') }e Vorlagen: Kostenpflichtige Abonnementszeitungen/-magazine (gedruckt und online)"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z02_information_source'), v_name = 'information_source_paid_newspapers', key = 'question') }"
description.en = "whether or not the respondent used paid newspapers / magazines (on- and offline) to learn about the {lvl} proposals"
id = "{lvl}_proposals_information_source_paid_newspapers"
[[03_proposal_specific.004_participants.z02_information_source.item]]
name.de = "Informationsquelle { ifelse(lvl == 'cantonal', 'kantonal', 'eidgenössisch') }e Vorlagen: { ifelse(lvl == 'cantonal', 'Kantonal', 'Eidgenössisch') }e Abstimmungsbroschüre"
question = "_{ ifelse(lvl == 'cantonal', 'kantonal', 'eidgenössisch') }e Abstimmungsbroschüre_"
description.en = "whether or not the respondent used the official {lvl} voting booklet to learn about the {lvl} proposals"
id = "{lvl}_proposals_information_source_official_booklet"
[[03_proposal_specific.004_participants.z02_information_source.item]]
name.de = "Informationsquelle { ifelse(lvl == 'cantonal', 'kantonal', 'eidgenössisch') }e Vorlagen: Radiosendungen"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z02_information_source'), v_name = 'information_source_radio_program', key = 'question') }"
description.en = "whether or not the respondent used radio programs to learn about the {lvl} proposals"
id = "{lvl}_proposals_information_source_radio_program"
[[03_proposal_specific.004_participants.z02_information_source.item]]
name.de = "Informationsquelle { ifelse(lvl == 'cantonal', 'kantonal', 'eidgenössisch') }e Vorlagen: Fernsehsendungen"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z02_information_source'), v_name = 'information_source_tv_program', key = 'question') }"
description.en = "whether or not the respondent used television programs to learn about the {lvl} proposals"
id = "{lvl}_proposals_information_source_tv_program"
[[03_proposal_specific.004_participants.z02_information_source.item]]
name.de = "Informationsquelle { ifelse(lvl == 'cantonal', 'kantonal', 'eidgenössisch') }e Vorlagen: Webseite des { ifelse(lvl == 'cantonal', 'Kantons', 'Bundes') }"
question = "_Webseite des { ifelse(lvl == 'cantonal', 'Kantons', 'Bundes') }_"
description.en = "whether or not the respondent used the official {lvl} webpage of the to learn about the {lvl} proposals"
id = "{lvl}_proposals_information_source_official_webpage"
[[03_proposal_specific.004_participants.z02_information_source.item]]
name.de = "Informationsquelle { ifelse(lvl == 'cantonal', 'kantonal', 'eidgenössisch') }e Vorlagen: Leserbriefe/-kommentare"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z02_information_source'), v_name = 'information_source_reader_letters_comments', key = 'question') }"
description.en = "whether or not the respondent used readers' letters or online comments to learn about the {lvl} proposals"
id = "{lvl}_proposals_information_source_reader_letters_comments"
[[03_proposal_specific.004_participants.z02_information_source.item]]
name.de = "Informationsquelle { ifelse(lvl == 'cantonal', 'kantonal', 'eidgenössisch') }e Vorlagen: Soziale Medien wie Facebook oder Twitter"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z02_information_source'), v_name = 'information_source_social_media', key = 'question') }"
description.en = "whether or not the respondent used social media like Facebook or Twitter to learn about the {lvl} proposals"
id = "{lvl}_proposals_information_source_social_media"
[[03_proposal_specific.004_participants.z02_information_source.item]]
name.de = "Informationsquelle { ifelse(lvl == 'cantonal', 'kantonal', 'eidgenössisch') }e Vorlagen: (Halb-)Öffentliche Chatgruppen (bspw. via [Telegram](https://de.wikipedia.org/wiki/Telegram))"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z02_information_source'), v_name = 'information_source_public_chat_groups', key = 'question') }"
id = "{lvl}_proposals_information_source_public_chat_groups"
description.en = "whether or not the respondent used public chat groups (e.g. via [Telegram](https://en.wikipedia.org/wiki/Telegram_(software))) to learn about the {lvl} proposals"
include.20180923_20201018 = false

[03_proposal_specific.005_all]
who = "alle"
[03_proposal_specific.005_all.001_information_source]
lvl = "{ if (has_referendum(ballot_date = ballot_date, lvls = 'cantonal', canton = canton)) 'cantonal' else 'federal' }"
response_options = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z02_information_source'), v_name = 'information_source_free_newspapers', key = 'response_options') }"
variable_values = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z02_information_source'), v_name = 'information_source_free_newspapers', key = 'variable_values') }"
value_labels = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z02_information_source'), v_name = 'information_source_free_newspapers', key = 'value_labels') }"
value_scale = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z02_information_source'), v_name = 'information_source_free_newspapers', key = 'value_scale') }"
[[03_proposal_specific.005_all.001_information_source.item]]
# TODO: are *cantonal* proposals actually covered by easyvote? If not, we can rename the var below to `information_source_easyvote_booklet`
name.de = "Informationsquelle { ifelse(lvl == 'cantonal', 'kantonal', 'eidgenössisch') }e Vorlagen: [easyvote-Abstimmungsbroschüre](https://www.easyvote.ch/de/f/angebote/broschuere)"
question = "Mit der «easyvote»-Abstimmungsbroschüre des Dachverbandes Schweizer Jugendparlamente (DSJ) existiert eine weitere Hilfestellung, die insbesondere jungen Stimmberechtigten die Abstimmungsvorlagen möglichst einfach erklären soll. Haben Sie die «easyvote»-Abstimmungsbroschüre genutzt?"
description.en = "whether or not the respondent used the \"easyvote\" booklet to learn about the {lvl} proposals"
id = "{lvl}_proposals_information_source_easyvote_booklet"
include.false = [ 2018-09-23, 2018-11-25 ]
[[03_proposal_specific.005_all.001_information_source.item]]
# NOTE: old 'discussions' item up until 2018-11-25
name.de = "Informationsquelle kantonale Vorlagen: Gespräche/Diskussionen im Bekanntenkreis"
id = "cantonal_proposals_information_source_discussions"
question = """
Haben Sie sich im Bekanntenkreis über {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'cantonal',
                     canton = canton) > 1L,
         paste0('die',
                salim::write_out_n(n_proposals(ballot_date = ballot_date,
                                               lvls = 'cantonal',
                                               canton = canton),
                                   lang = 'de',
                                   use_dual = TRUE),
                ' **kantonalen** Vorlagen'),
         paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                         lvl = 'cantonal',
                                                                         canton = canton,
                                                                         proposal_nr = 1L,
                                                                         type = 'short'),
                                           case = 'accusative'),
                ' _', proposal_name(ballot_date = ballot_date,
                                    lvl = 'cantonal',
                                    canton = canton,
                                    proposal_nr = 1L,
                                    lang = 'de',
                                    type = 'short'),
                '_'))
} ausgetauscht bzw. über diese diskutiert?"""
question_common = "Haben Sie sich im Bekanntenkreis über die **kantonale(n)** Vorlage(n) ausgetauscht bzw. über diese diskutiert?"
description.en = "whether or not the respondent discussed the cantonal proposals with acquaintances"
response_options = [ "nein", "ja", "weiss nicht" ]
variable_values = [ 0, 1, 99 ]
value_labels = [ "no", "yes", "don't know" ]
include.default = false
include.true = [ 2018-09-23, 2018-11-25 ]
[03_proposal_specific.005_all.002_deliberation]
response_options = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z03_more'), v_name = 'intensity_political_discussions', key = 'response_options') }"
variable_values = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z03_more'), v_name = 'intensity_political_discussions', key = 'variable_values') }"
value_labels = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z03_more'), v_name = 'intensity_political_discussions', key = 'value_labels') }"
value_scale = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_1_election_general', 'z03_more'), v_name = 'intensity_political_discussions', key = 'value_scale') }"
[[03_proposal_specific.005_all.002_deliberation.001_cantonal.item]]
# NOTE: new 'discussions' item after 2018-11-25
name.de = "Intensität politischer Gespräche/Diskussionen im Bekanntenkreis über kantonale Vorlagen"
question = """
Wie oft haben Sie sich im Bekanntenkreis über {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'cantonal',
                     canton = canton) > 1L,
         paste0('die ',
                salim::write_out_n(n_proposals(ballot_date = ballot_date,
                                               lvls = 'cantonal',
                                               canton = canton),
                                   lang = 'de',
                                   use_dual = TRUE),
                ' **kantonalen** Vorlagen'),
         paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                         lvl = 'cantonal',
                                                                         canton = canton,
                                                                         proposal_nr = 1L,
                                                                         type = 'short'),
                                           case = 'accusative'),
                ' _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = 1L,
                              lang = 'de',
                              type = 'short'),
                '_'))
} ausgetauscht bzw. über diese diskutiert?"""
question_common = "Wie oft haben Sie sich im Bekanntenkreis über die **kantonale(n)** Vorlage(n) ausgetauscht bzw. über diese diskutiert?"
description.en = "how often the respondent discussed the cantonal proposals with acquaintances"
id = "intensity_political_discussions_cantonal_proposals"
include.default = "{ has_referendum(ballot_date = ballot_date, lvls = 'cantonal', canton = canton) }"
include.false = [ 2018-09-23, 2018-11-25 ]
[[03_proposal_specific.005_all.002_deliberation.002_federal.item]]
name.de = "Intensität politischer Gespräche/Diskussionen im Bekanntenkreis über eidgenössische Vorlagen"
question = """
Wie oft haben Sie sich im Bekanntenkreis über {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'federal',
                     canton = canton) > 1L,
         paste0('die ',
                salim::write_out_n(n_proposals(ballot_date = ballot_date,
                                               lvls = 'federal',
                                               canton = canton),
                                   lang = 'de',
                                   use_dual = TRUE),
                ' **eidgenössischen** Vorlagen'),
         paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                         lvl = 'federal',
                                                                         canton = canton,
                                                                         proposal_nr = 1L,
                                                                         type = 'short'),
                                           case = 'accusative'),
                ' _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'federal',
                              canton = canton,
                              proposal_nr = 1L,
                              lang = 'de',
                              type = 'short'),
                '_'))
} ausgetauscht bzw. über diese diskutiert?"""
question_common = "Wie oft haben Sie sich im Bekanntenkreis über die **eidgenössische(n)** Vorlage(n) ausgetauscht bzw. über diese diskutiert?"
description.en = "how often the respondent discussed the federal proposals with acquaintances"
id = "intensity_political_discussions_federal_proposals"
include.default = "{ has_referendum(ballot_date = ballot_date, lvls = 'federal', canton = canton) }"
include.false = [ 2018-09-23, 2018-11-25, 2020-09-27 ]
[[03_proposal_specific.005_all.item]]
name.de = "Sichtung politischer Werbung kantonale Vorlagen"
question = """
Ist Ihnen politische Werbung (Strassenplakate, Inserate, Flyers, Online-Anzeigen etc.) für oder gegen {
  ifelse(n_proposals(ballot_date = ballot_date,
                     lvls = 'cantonal',
                     canton = canton) > 1L,
         paste0('die ',
                salim::write_out_n(n_proposals(ballot_date = ballot_date,
                                               lvls = 'cantonal',
                                               canton = canton),
                                   lang = 'de',
                                   use_dual = TRUE),
                ' **kantonalen** Vorlagen'),
         paste0(salim::definite_article_de(gender = proposal_name_gender(ballot_date = ballot_date,
                                                                         lvl = 'cantonal',
                                                                         canton = canton,
                                                                         proposal_nr = 1L,
                                                                         type = 'short'),
                                           case = 'accusative'),
                ' _',
                proposal_name(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton,
                              proposal_nr = 1L,
                              lang = 'de',
                              type = 'short'),
                '_'))
} aufgefallen?"""
question_common = "Ist Ihnen politische Werbung (Strassenplakate, Inserate, Flyers, Online-Anzeigen etc.) für oder gegen die **kantonale(n)** Vorlage(n) aufgefallen?"
id = "sighting_political_ads_cantonal_proposals"
description.en = "whether or not the respondent saw political advertisings such as street posters, flyers, online advertisements, etc. for or against the cantonal proposals"
response_options = [
  "ja, mehrheitlich aus dem Pro-Lager",
  "ja, mehrheitlich aus dem Kontra-Lager",
  "ja, von beiden Seiten etwa im gleichen Masse",
  "nein, ich habe keine politische Werbung wahrgenommen",
  "weiss nicht"
]
variable_values = [ 1, 2, 3, 4, 99 ]
value_labels = [
  "Yes, most of them from the pro camp",
  "Yes, most of them from the contra camp",
  "Yes, from both sides to about the same extent",
  "No, I have not seen any political advertising",
  "don't know"
]
include = "{ has_referendum(ballot_date = ballot_date, lvls = 'cantonal', canton = canton) }"
[[03_proposal_specific.005_all.item]]
name.de = "Primäre Informationsquelle (on- vs. offline)"
question = "Ganz generell: Wo informieren Sie sich am häufigsten über Politik: Ist das …?"
id = "primary_political_information_source"
description.en = "respondent's primary source of political information (on- vs. offline)"
response_options = [
  "online, also über das Internet",
  "offline, also zum Beispiel über Printmedien, Fernsehen oder Radio",
  "on- wie offline etwa im gleichen Masse",
  "informiere mich nie über Politik",
  "weiss nicht"
]
variable_values = [ 1, 2, 3, 4, 99 ]
value_labels = [
  "online, i.e. via the Internet",
  "offline, for example via print media, television or radio",
  "on- as well as offline to about the same extent",
  "I never inform myself about politics",
  "don't know"
]

[03_proposal_specific.006_importance_position]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) }"
who = "teilnehmende Online-Respondenten"
value_scale = "ordinal_descending"
[[03_proposal_specific.006_importance_position.item]]
name.de = "Bedeutung Position kantonale Regierung kantonale Vorlage {i}"
question = "Wie wichtig war die Position des Regierungsrats für Ihren Entscheid zu{ ifelse(proposal_name_gender(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'short') == 'feminine', 'r', 'm') } _{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_?"
question_common = "Wie wichtig war die Position des Regierungsrats für Ihren Entscheid zur kantonalen Vorlage {i}?"
id = "importance_position_cantonal_government_cantonal_proposal_{i}"
description.en = "importance the respondent attaches to the position of the cantonal government of { stringr::str_to_sentence(canton) } regarding his/her voting decision on the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "importance the respondent attaches to the position of the cantonal government regarding his/her voting decision on the { salim::rank_nr(i) } cantonal proposal"
response_options = [
  "kenne die Position der Regierung zu dieser Vorlage nicht",
  "bedeutungslos",
  "eher unwichtig",
  "eher wichtig",
  "sehr wichtig",
  "weiss nicht"
]
variable_values = [ 5, 4, 3, 2, 1, 99 ]
value_labels = [
  "don't know the government's position on this proposal",
  "irrelevant",
  "rather unimportant",
  "rather important",
  "very important",
  "don't know"
]
include.false = [ 2018-09-23 ]
[[03_proposal_specific.006_importance_position.item]]
name.de = "Bedeutung Position kantonales Parlament kantonale Vorlage {i}"
question = "Wie wichtig war die Position des Grossen Rats (Parlament) für Ihren Entscheid zu{ ifelse(proposal_name_gender(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'short') == 'feminine', 'r', 'm') } _{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_?"
question_common = "Wie wichtig war die Position des Grossen Rats (Parlament) für Ihren Entscheid zur kantonalen Vorlage {i}?"
id = "importance_position_cantonal_parliament_cantonal_proposal_{i}"
description.en = "importance the respondent attaches to the position of the cantonal parliament of { stringr::str_to_sentence(canton) } regarding his/her voting decision on the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "importance the respondent attaches to the position of the cantonal parliament regarding his/her voting decision on the { salim::rank_nr(i) } cantonal proposal"
response_options = [
  "kenne die Position des Parlamentes zu dieser Vorlage nicht",
  "bedeutungslos",
  "eher unwichtig",
  "eher wichtig",
  "sehr wichtig",
  "weiss nicht"
]
variable_values = [ 5, 4, 3, 2, 1, 99 ]
value_labels = [
  "don't know the parliament's position on this proposal",
  "irrelevant",
  "rather unimportant",
  "rather important",
  "very important",
  "don't know"
]
include.false = [ 2018-09-23 ]


[04_political_general]
title = "Allgemeine politische Fragen"
who = "alle"
[[04_political_general.item]]
topic.default = "Parteisympathie"
topic.20180923 = "Parteisympathie[^no-party]"
question = "Welche Partei steht Ihnen am nächsten?"
id = "favored_party"
description.en = "the political party the respondent feels closest to his/her own political stance"
response_options = "{ c(q_parties(ballot_date = ballot_date) %$% de.short, response_options(type = 'custom', lang = 'de', subtypes = 'party'), response_options(type = 'none', lang = 'de', subtypes = 'plural'), response_options(type = 'dunno', lang = 'de', subtypes = 'main')) }"
variable_values = "{ c(q_parties(ballot_date = ballot_date) %$% code, q_response_option_codes(types = c('custom', 'none', 'dunno'))) }"
value_labels = "{ c(q_parties(ballot_date = ballot_date) %$% en.short, response_options(type = 'custom', lang = 'en', subtypes = 'main'), response_options(type = 'none', lang = 'en', subtypes = 'main'), response_options(type = 'dunno', lang = 'en', subtypes = 'main')) }"
randomize_response_options.default = true
randomize_response_options.20180923_20181125 = false
[[04_political_general.item]]
name.de = "Links-rechts-Selbstpositionierung"
question = "Wo würden Sie sich politisch auf einer Skala zwischen _ganz links_ (0) und _ganz rechts_ (10) einstufen?"
id = "left_right_self_positioning"
description.en = "respondent's left-right self-positioning"
response_options = [ "0 (ganz links)", "1", "2", "3", "4", "5 (Mitte)", "6", "7", "8", "9", "10 (ganz rechts)", "weiss nicht" ]
variable_values = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99 ]
value_labels = [ "0 (far left)", "1", "2", "3", "4", "5 (middle)", "6", "7", "8", "9", "10 (far right)", "don't know" ]
value_scale = "ordinal_ascending"
[04_political_general.z01_trust]
response_options = [ "0 (überhaupt nicht)", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10 (vollständig)", "weiss nicht" ]
variable_values = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99 ]
value_labels = [ "0 (no trust at all)", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10 (complete trust)", "don't know" ]
value_scale = "ordinal_ascending"
question_intro_i = "Wie stark vertrauen Sie den folgenden Institutionen? Bitte stufen Sie Ihr Vertrauen auf einer Skala von 0 (vertraue überhaupt nicht) bis 10 (vertraue vollständig) ein."
[[04_political_general.z01_trust.item]]
# set iterator to trigger `question_intro_i`
i = 1
name.de = "Vertrauen in kantonale Regierung"
question.default = "_kantonale Regierung_"
question.aargau = "_Aargauer Regierungsrat_"
id = "trust_in_cantonal_government"
description.en = "respondent's trust in the cantonal government of { stringr::str_to_sentence(canton) }"
variable_label_common = "respondent's trust in the cantonal government"
include.false = [ 2020-09-27 ]
[[04_political_general.z01_trust.item]]
name.de = "Vertrauen in kantonales Parlament"
question.default = "_kantonales Parlament_"
question.aargau = "_Aargauer Grosser Rat (Parlament)_"
id = "trust_in_cantonal_parliament"
description.en = "respondent's trust in the cantonal parliament of { stringr::str_to_sentence(canton) }"
variable_label_common = "respondent's trust in the cantonal parliament"
include.false = [ 2020-09-27 ]
[[04_political_general.z01_trust.item]]
name.de = "Vertrauen in Schweizer Demokratie"
question = "_Demokratie in der Schweiz_"
id = "trust_in_swiss_democracy"
description.en = "respondent's trust in the Swiss democracy"
include.false = [ 2020-09-27 ]
[[04_political_general.z01_trust.z01_corona.item]]
name.de = "Vertrauen in Bundesrat"
question = "_Bundesrat_"
id = "trust_in_federal_government"
description.en = "respondent's trust in the federal government"
include.default = false
include.true = [ 2021-11-28 ]
[[04_political_general.z01_trust.z01_corona.item]]
name.de = "Vertrauen in eidgenössisches Parlament"
question = "_eidgenössisches Parlament_"
id = "trust_in_federal_parliament"
description.en = "respondent's trust in the federal parliament"
include.default = false
include.true = [ 2021-11-28 ]
[[04_political_general.z01_trust.z01_corona.item]]
name.de = "Vertrauen in Bundesamt für Gesundheit (BAG)"
question = "_Bundesamt für Gesundheit (BAG)_"
id = "trust_in_federal_public_health_office"
description.en = "respondent's trust in the federal public health office"
include.default = false
include.true = [ 2021-11-28 ]
[[04_political_general.z01_trust.z01_corona.item]]
name.de = "Vertrauen in kantonales Gesundheitsdepartement"
question = "_kantonales Gesundheitsdepartement_"
id = "trust_in_cantonal_public_health_office"
description.en = "respondent's trust in the cantonal public health office"
include.default = false
include.true = [ 2021-11-28 ]
[[04_political_general.z01_trust.z01_corona.item]]
name.de = "Vertrauen ins Schweizer Radio und Fernsehen (SRF)"
question = "_Schweizer Radio und Fernsehen (SRF)_"
id = "trust_in_swiss_radio_tv"
description.en = "respondent's trust in the [Swiss Radio and Television (SRF)](https://en.wikipedia.org/wiki/Schweizer_Radio_und_Fernsehen)"
include.default = false
include.true = [ 2021-11-28 ]
[[04_political_general.z01_trust.z01_corona.item]]
name.de = "Vertrauen in wissenschaftliche Taskforce ([*Swiss National COVID-19 Science Task Force*](https://sciencetaskforce.ch/))"
question = "_wissenschaftliche Taskforce ([*Swiss National COVID-19 Science Task Force*](https://sciencetaskforce.ch/))_"
id = "trust_in_scientific_task_force"
description.en = "respondent's trust in the [*Swiss National COVID-19 Science Task Force*](https://sciencetaskforce.ch/)"
include.default = false
include.true = [ 2021-11-28 ]
[[04_political_general.z01_trust.z01_corona.item]]
name.de = "Vertrauen in Fachleute für ansteckbare Krankheiten (Epidemiologie, Virologie)"
question = "_Fachleute für ansteckende Krankheiten (Epidemiologie, Virologie etc.)_"
id = "trust_in_infectious_disease_specialists"
description.en = "respondent's trust in specialists for infectious diseases (epidemiology, virology, etc.)"
include.default = false
include.true = [ 2021-11-28 ]
[[04_political_general.z01_trust.z01_corona.item]]
name.de = "Vertrauen in die Pharmahersteller"
question = "_Pharmahersteller_"
id = "trust_in_pharma"
description.en = "respondent's trust in pharmaceutical manufacturers"
include.default = false
include.true = [ 2021-11-28 ]


[04_2_covid_related]
title = "COVID-19-Pandemie"
who = "alle"
include.default = false
include.true = [ 2021-11-28 ]
[[04_2_covid_related.item]]
name.de = "COVID-19-Impfung andere"
question = "Wünschen Sie sich, dass möglichst viele Ihrer Mitmenschen gegen COVID-19 geimpft sind?"
id = "attitude_covid_vaccination_others"
description.en = "whether the respondent wants as many fellow human beings as possible to be vaccinated"
response_options = [ "ja, absolut", "eher ja", "ist mir egal", "eher nein", "nein, auf keinen Fall", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 5, 99 ]
value_labels = [ "yes, absolutely", "rather yes", "don't care", "rather no", "no, absolutely not", "don't know" ]
value_scale = "ordinal_descending"
[[04_2_covid_related.item]]
# NOTE: a possible alternative question could be about "Vertrauen in die bislang zugelassenen Impfstoffe"
name.de = "COVID-19-Impfung selbst"
question = "Sind Sie selbst gegen COVID-19 geimpft?"
id = "vaccination_status_covid"
description.en = "respondent's COVID-19 vaccination status"
response_options = [ "ja, ich bin doppelt geimpft", "ja, ich bin einmal geimpft", "nein, aber ich möchte mich impfen lassen", "nein, ich bin noch unschlüssig", "nein, ich möchte mich nicht impfen lassen", "keine Angabe" ]
variable_values = [ 1, 2, 3, 4, 5, 80 ]
value_labels = [ "yes, I am vaccinated twice", "yes, I am vaccinated once", "no, but I would like to be vaccinated", "no, I am still undecided", "no, I do not want to be vaccinated", "no answer"  ]
value_scale = "ordinal_descending"
[[04_2_covid_related.item]]
name.de = "Zufriedenheit mit COVID-19-Massnahmen"
question = "Wie beurteilen Sie die aktuellen politischen Massnahmen zur Bekämpfung der COVID-19-Pandemie in der Schweiz?"
id = "assessment_covid_measures"
description.en = "respondent's assessment of the current political measures to fight the COVID-19 pandemic in Switzerland"
response_options = [ "gehen viel zu wenig weit", "gehen eher zu wenig weit", "sind angemessen", "gehen eher zu weit", "gehen viel zu weit", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 5, 99 ]
value_labels = [ "go way too little far", "tend to go too little far", "are appropriate", "tend to go too far", "go way too far", "don't know" ]
value_scale = "ordinal_ascending"
[[04_2_covid_related.item]]
name.de = "Beurteilung COVID-19-Krisenmanagement national"
question = "Wie beurteilen Sie das bisherige Krisenmanagement während der COVID-19-Pandemie auf **eidgenössischer** Ebene? Ich bin…"
id = "contentment_federal_covid_crisis_management"
description.en = "respondent's assessment of the federal COVID-19 crisis management so far"
response_options = [ "sehr zufrieden", "eher zufrieden", "eher unzufrieden", "sehr unzufrieden", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 99 ]
value_labels = [ "very happy", "rather happy", "rather unhappy", "very happy", "don't know" ]
value_scale = "ordinal_descending"
[[04_2_covid_related.item]]
name.de = "Beurteilung COVID-19-Krisenmanagement kantonal"
question = "Wie beurteilen Sie das bisherige Krisenmanagement während der COVID-19-Pandemie auf **kantonaler** Ebene? Ich bin…"
id = "contentment_cantonal_covid_crisis_management"
description.en = "respondent's assessment of the cantonal COVID-19 crisis management so far"
response_options = [ "sehr zufrieden", "eher zufrieden", "eher unzufrieden", "sehr unzufrieden", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 99 ]
value_labels = [ "very happy", "rather happy", "rather unhappy", "very happy", "don't know" ]
value_scale = "ordinal_descending"


[05_political_attitudes]
title = "Politische Haltungen"
intro.default = "Viele politische Ziele sind umstritten. Zu einigen davon möchten wir Sie nun um Ihre Meinung bitten."
intro.20191020 = "Viele politische Ziele sind umstritten. Zu ein paar möchten wir Sie nun um Ihre Meinung bitten."
intro.20180923_20181125 = "Nachfolgend einige Fragen zu verschiedenen Aspekten der schweizerischen Gesellschaft. Geben Sie uns bitte an, welche Schweiz Sie sich persönlich wünschen."
who = "alle"
value_scale = "ordinal_ascending"
[[05_political_attitudes.item]]
name.de = "Amtsdauer BundesrichterInnen"
question = "Wie lange sollte die Amtsperiode der Mitglieder des Bundesgerichts dauern?"
id = "attitude_term_of_office_federal_judges"
description.en = "respondent's preferred term of office for federal judges"
response_options = [
  "sechsjährige Amtsperiode, unbeschränkte Wiederwahl",
  "sechsjährige Amtsperiode, Wiederwahl bis max. 70. Altersjahr",
  "bis zum 70. Altersjahr beschränkte einmalige Amtsdauer",
  "unbeschränkte Amtsdauer",
  "weiss nicht"
]
variable_values = [ 1, 2, 3, 4, 99 ]
value_labels = [
  "six-year term of office, unlimited re-election",
  "six-year term of office, re-election up to a maximum of 70 years of age",
  "one-time term of office limited to 70 years of age",
  "unlimited term of office",
  "don't know"
]
include.default = false
include.true = [ 2021-11-28 ]
[[05_political_attitudes.item]]
name.de = "Aussenpolitische Öffnung"
question = "Möchten Sie eine Schweiz, die sich vermehrt nach aussen öffnet (1) oder eine Schweiz, die sich vermehrt verschliesst (5)?"
id = "attitude_opening_foreign_countries"
description.en = "respondent's preferred level of Switzerland opening up to foreign countries"
response_options = [ "1 (vermehrt nach aussen öffnet)", "2", "3", "4", "5 (vermehrt verschliesst)", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 5, 99 ]
value_labels = [ "1 (opens more to the outside)", "2", "3", "4", "5 (closes off more)", "don't know" ]
[[05_political_attitudes.item]]
name.de = "Chancengleichheit für Ausländer"
question = "Möchten Sie eine Schweiz mit gleichen Chancen für Ausländer und Ausländerinnen (1) oder eine Schweiz mit besseren Chancen für Schweizer und Schweizerinnen (5)?"
id = "attitude_equal_opportunity_foreigners"
description.en = "respondent's preferred level of equality of opportunities for foreigners in relation to Swiss nationals"
response_options = [ "1 (gleiche Chancen)", "2", "3", "4", "5 (bessere Chancen für SchweizerInnen)", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 5, 99 ]
value_labels = [ "1 (equal opportunities)", "2", "3", "4", "5 (better opportunities for Swiss)", "don't know" ]
[[05_political_attitudes.item]]
name.de = "Umweltschutz vs. wirtschaftlicher Wohlstand"
question = "Möchten Sie eine Schweiz, wo der Umweltschutz wichtiger ist als der wirtschaftliche Wohlstand (1) oder eine Schweiz, wo der wirtschaftliche Wohlstand wichtiger ist als der Umweltschutz (5)?"
id = "attitude_environmentalism_vs_economic_prosperity"
description.en = "respondent's attitude towards the opposition between environmentalism and economic prosperity"
response_options = [ "1 (Umweltschutz wichtiger)", "2", "3", "4", "5 (wirtschaftlicher Wohlstand wichtiger)", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 5, 99 ]
value_labels = [ "1 (environmental protection more important)", "2", "3", "4", "5 (economic prosperity more important)", "don't know" ]
include.default = false
include.true = [ 2018-09-23, 2018-11-25 ]
[[05_political_attitudes.item]]
name.de = "Sozialstaat vs. Eigenverantwortung"
question = "Möchten Sie eine Schweiz, wo der Staat mehr Verantwortung dafür übernimmt, dass alle abgesichert sind (1) oder eine Schweiz, in der jeder einzelne mehr Verantwortung für sich selbst übernehmen muss (5)?"
id = "attitude_welfare_state_vs_self_responsibility"
description.en = "respondent's attitude towards the opposition between an extended social welfare state and more individual responsibility"
response_options = [ "1 (stärkerer Sozialstaat)", "2", "3", "4", "5 (höhere Eigenverantwortung)", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 5, 99 ]
value_labels = [ "1 (stronger welfare state)", "2", "3", "4", "5 (higher self-responsibility)", "don't know" ]
[[05_political_attitudes.item]]
name.de = "Regulierung vs. freier Markt"
question.default = "Möchten Sie eine Schweiz, wo der Staat die Unternehmen stärker kontrolliert (1) oder eine Schweiz, wo der Staat den Unternehmen mehr Freiheit lässt (5)?"
question.20180923 = "Möchten Sie eine Schweiz, wo der Staat die Unternehmen besser kontrolliert (1) oder eine Schweiz, wo der Staat den Unternehmen mehr Freiheit lässt (5)?[^att-econ]"
id = "attitude_regulation_vs_free_market"
description.en = "respondent's attitude towards the opposition between state intervention and market competition"
response_options = [ "1 (stärkere staatliche Kontrolle)", "2", "3", "4", "5 (mehr unternehmerische Freiheit)", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 5, 99 ]
value_labels = [ "1 (stronger state control)", "2", "3", "4", "5 (more corporate freedom)", "don't know" ]
[[05_political_attitudes.item]]
name.de = "Menschengemachter Klimawandel"
question = "Glauben Sie an eine durch den Menschen verursachte globale Erwärmung (\"Klimawandel\")?"
id = "attitude_global_warming"
description.en = "to what degree the respondent believes in a human-made global warming"
response_options = [ "ja, absolut", "eher ja", "eher nein", "nein, ausgeschlossen", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 99 ]
value_labels = [ "yes, absolutely", "rather yes", "rather no", "no, impossible", "don't know" ]
value_scale = "ordinal_descending"
ballot_types = [ "election" ]
[[05_political_attitudes.item]]
name.de = "Klimaneutrale Schweiz"
question = "Sind Sie der Meinung, dass die Schweiz in absehbarer Zeit vollständig klimaneutral werden muss, also nicht mehr Treibhausgase (CO², Methan etc.) ausstossen darf, als sie gleichzeitig der Atmosphäre zu entziehen vermag?"
id = "attitude_climate_neutral_switzerland"
description.en = "to what degree the respondent thinks that Switzerland must become fully climate-neutral in the forseeable future"
response_options = [ "ja, so schnell wie nur möglich", "ja, bis spätestens 2035", "ja, bis spätestens 2050", "nein", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 99 ]
value_labels = [ "yes, as soon as possible", "yes, by 2035 at the latest", "yes, by 2050 at the latest", "no", "don't know" ]
value_scale = "ordinal_descending"
ballot_types = [ "election" ]
[[05_political_attitudes.item]]
who = "Klimaneutrale"
name.de = "Politische Massnahmen für eine klimaneutrale Schweiz"
question = "Sind Sie der Ansicht, dass die Schweiz einschneidende politische Massnahmen ergreifen muss, um dieses Ziel zu erreichen?"
id = "attitude_political_measures_climate"
description.en = "to what degree the respondent thinks that Switzerland must take drastic policy measures to become fully climate-neutral"
response_options = [ "ja, absolut", "eher ja", "eher nein", "nein, auf keinen Fall", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 99 ]
value_labels = [ "yes, absolutely", "rather yes", "rather no", "no, absolutely not", "don't know" ]
value_scale = "ordinal_descending"
ballot_types = [ "election" ]
[[05_political_attitudes.item]]
name.de = "Rentenaltererhöhung"
question = "Befürworten Sie eine Erhöhung des ordentlichen Rentenalters _für beide Geschlechter_ in naher Zukunft (bspw. auf 67 Jahre)?"
id = "attitude_retirement_age_increase"
description.en = "respondent's attitude towards the increase of the ordinary retirement age _for both sexes_ in the near future"
response_options = [ "klar dafür", "eher dafür", "eher dagegen", "klar dagegen", "weiss nicht" ]
value_labels = [ "clearly in favor", "rather in favor", "rather against", "clearly against", "don't know" ]
variable_values = [ 1, 2, 3, 4, 99 ]
value_scale = "ordinal_descending"
ballot_types = [ "election" ]
[[05_political_attitudes.item]]
name.de = "Gleichgeschlechtliche Ehe"
question = "Sind Sie für die Ehe von gleichgeschlechtlichen Paaren?"
id = "attitude_same_sex_marriage"
description.en = "respondent's attitude towards same-sex marriages"
response_options = [ "klar dafür", "eher dafür", "eher dagegen", "klar dagegen", "weiss nicht" ]
value_labels = [ "clearly in favor", "rather in favor", "rather against", "clearly against", "don't know" ]
variable_values = [ 1, 2, 3, 4, 99 ]
value_scale = "ordinal_descending"
ballot_types = [ "election" ]
[05_political_attitudes.z01_evoting]
question_intro_i.default = "Die in der Schweiz angewandten Systeme fürs Abstimmen und Wählen via Internet (E-Voting) standen immer wieder wegen Sicherheitsbedenken in der Kritik und seit dem Frühling 2019 sind die E-Voting-Versuche in allen Kantonen ausgesetzt. Bislang stand E-Voting im Kanton { stringr::str_to_sentence(canton) } ausschliesslich den AuslandschweizerInnen zur Verfügung und es sind in erster Linie sie, welche eine Wiederaufnahme des Betriebes fordern."
question_intro_i.20201018 = "Die in der Schweiz angewandten Systeme fürs Abstimmen und Wählen via Internet (E-Voting) standen immer wieder wegen Sicherheitsbedenken in der Kritik und seit vergangenem Jahr sind die E-Voting-Versuche in allen Kantonen ausgesetzt. Bislang stand E-Voting im Kanton { stringr::str_to_sentence(canton) } ausschliesslich den AuslandschweizerInnen zur Verfügung und es sind in erster Linie sie, welche eine Wiederaufnahme des Betriebes fordern."
question_intro_i.20191020 = "Die in der Schweiz angewandten Systeme fürs Abstimmen und Wählen via Internet (E-Voting) standen in letzter Zeit immer wieder wegen Sicherheitsbedenken in der Kritik. Dessen ungeachtet möchte der { stringr::str_to_sentence(canton) }er Regierungsrat E-Voting grundsätzlich weiterverfolgen. Bislang stand E-Voting im Kanton { stringr::str_to_sentence(canton) } ausschliesslich den AuslandschweizerInnen zur Verfügung."
[[05_political_attitudes.z01_evoting.item]]
# set iterator to trigger `question_intro_i`
i = 1
name.de = "E-Voting für AuslandschweizerInnen"
question.default = "_Sind Sie für oder gegen die Wiedereinführung von E-Voting **für AuslandschweizerInnen** des Kantons { stringr::str_to_sentence(canton) }?_"
question.20191020 = "_Sind Sie für oder gegen die Weiterführung von E-Voting **für AuslandschweizerInnen** des Kantons { stringr::str_to_sentence(canton) }?_"
question_common = "Sind Sie für oder gegen die Weiterführung von E-Voting **für AuslandschweizerInnen** Ihres Wohnkantons?"
id = "attitude_e_voting_swiss_abroad"
description.en = "respondent's attitude towards the continuation of e-voting for Swiss abroad in the canton of { stringr::str_to_sentence(canton) }"
variable_label_common = "respondent's attitude towards the continuation of e-voting for Swiss abroad in his/her canton of residence (2020-10-18 only *online respondents*)"
response_options = [ "klar dafür", "eher dafür", "eher dagegen", "klar dagegen", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 99 ]
value_labels = [ "clearly in favor", "rather in favor", "rather against", "clearly against", "don't know" ]
value_scale = "ordinal_descending"
who.default = "alle"
who.20201018_20211128 = "Online-Respondenten"
include.false = [ 2018-09-23, 2018-11-25, 2020-09-27 ]
[[05_political_attitudes.z01_evoting.item]]
name.de = "E-Voting für alle Stimmberechtigten"
question.default = "_Sind Sie für oder gegen die Einführung von E-Voting **für alle Stimmberechtigten** im Kanton { stringr::str_to_sentence(canton) }?_"
question.20181125 = "Der Kanton { stringr::str_to_sentence(canton) } plant für 2019 in einigen Pilotgemeinden das Abstimmen via Internet (E-Voting) zu testen. Sind Sie für oder gegen die Einführung von E-Voting im Kanton { stringr::str_to_sentence(canton) }?"
question_common = "Sind Sie für oder gegen die Einführung von E-Voting **für alle Stimmberechtigten** in Ihrem Wohnkanton?"
id = "attitude_e_voting"
description.en = "respondent's attitude towards the general introduction of e-voting in the canton of { stringr::str_to_sentence(canton) }"
variable_label_common = "respondent's attitude towards the general introduction of e-voting in his/her canton of residence (2020-10-18 only *online respondents*)"
response_options = [ "klar dafür", "eher dafür", "eher dagegen", "klar dagegen", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 99 ]
value_labels = [ "clearly in favor", "rather in favor", "rather against", "clearly against", "don't know" ]
value_scale = "ordinal_descending"
who.default = "alle"
who.20201018_20211128 = "Online-Respondenten"
include.false = [ 2018-09-23, 2020-09-27 ]


[06_personality]
title = "Persönlichkeitsmerkmale ([_Big Five Inventory_](https://de.wikipedia.org/wiki/Big_Five_(Psychologie)))"
intro.default = """
Nun möchten wir Ihnen einige Fragen zu Ihrer Persönlichkeit bzw. Ihrem Charakter stellen. Denn je nach Persönlichkeitstyp reagieren die Menschen \
unterschiedlich auf im Wahlkampf vorgebrachte Argumente und Botschaften, was sich letztlich auf den Entscheid auswirken könnte. Bitte geben Sie für jede der \
folgenden zehn Aussagen an, inwieweit sie zutrifft."""
intro.20180923_20181125 = """
Nun möchten wir Ihnen einige Fragen zu Ihrer Persönlichkeit bzw. Ihrem Charakter stellen. Bitte geben Sie für jede der folgenden zehn Aussagen an, \
inwieweit sie zutrifft."""
who = "alle"
response_options = [ "trifft überhaupt nicht zu", "trifft eher nicht zu", "weder noch", "trifft eher zu", "trifft voll und ganz zu", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 5, 99 ]
value_labels = [ "disagree strongly", "disagree a little", "neither agree nor disagree", "agree a little", "agree strongly", "don't know" ]
value_scale = "ordinal_ascending"
include.false = [ 2018-11-25, 2020-09-27, 2021-11-28 ]
[[06_personality.item]]
name.de = "Persönlichkeitsmerkmal Extraversion 1"
question = "«Ich bin eher zurückhaltend, reserviert.»"
id = "bfi10_extraversion_1"
description.en = "the extent to which the respondent agrees with the statement \"I see myself as someone who is reserved.\""
[[06_personality.item]]
name.de = "Persönlichkeitsmerkmal Verträglichkeit 1"
question = "«Ich schenke anderen leicht Vertrauen, glaube an das Gute im Menschen.»"
id = "bfi10_agreeableness_1"
description.en = "the extent to which the respondent agrees with the statement \"I see myself as someone who is generally trusting.\""
[[06_personality.item]]
name.de = "Persönlichkeitsmerkmal Gewissenhaftigkeit 1"
question = "«Ich bin bequem, neige zur Faulheit.»"
id = "bfi10_conscientiousness_1"
description.en = "the extent to which the respondent agrees with the statement \"I see myself as someone who tends to be lazy.\""
[[06_personality.item]]
name.de = "Persönlichkeitsmerkmal Neurotizismus 1"
question = "«Ich bin entspannt, lasse mich durch Stress nicht aus der Ruhe bringen.»"
id = "bfi10_neuroticism_1"
description.en = "the extent to which the respondent agrees with the statement \"I see myself as someone who is relaxed, handles stress.\""
[[06_personality.item]]
name.de = "Persönlichkeitsmerkmal Offenheit 1"
question = "«Ich habe nur wenig künstlerisches Interesse.»"
id = "bfi10_openness_1"
description.en = "the extent to which the respondent agrees with the statement \"I see myself as someone who has few artistic interests.\""
[[06_personality.item]]
name.de = "Persönlichkeitsmerkmal Extraversion 2"
question = "«Ich gehe aus mir heraus, bin gesellig.»"
id = "bfi10_extraversion_2"
description.en = "the extent to which the respondent agrees with the statement \"I see myself as someone who is outgoing, sociable.\""
[[06_personality.item]]
name.de = "Persönlichkeitsmerkmal Verträglichkeit 2"
question = "«Ich neige dazu, andere zu kritisieren.»"
id = "bfi10_agreeableness_2"
description.en = "the extent to which the respondent agrees with the statement \"I see myself as someone who tends to find fault with others.\""
[[06_personality.item]]
name.de = "Persönlichkeitsmerkmal Gewissenhaftigkeit 2"
question = "«Ich erledige Aufgaben gründlich.»"
id = "bfi10_conscientiousness_2"
description.en = "the extent to which the respondent agrees with the statement \"I see myself as someone who does a thorough job.\""
[[06_personality.item]]
name.de = "Persönlichkeitsmerkmal Neurotizismus 2"
question = "«Ich werde leicht nervös und unsicher.»"
id = "bfi10_neuroticism_2"
description.en = "the extent to which the respondent agrees with the statement \"I see myself as someone who gets nervous easily.\""
[[06_personality.item]]
name.de = "Persönlichkeitsmerkmal Offenheit 2"
question = "«Ich habe eine aktive Vorstellungskraft, bin fantasievoll.»"
id = "bfi10_openness_2"
description.en = "the extent to which the respondent agrees with the statement \"I see myself as someone who has an active imagination.\""


[07_personal_more]
title = "Weitere Fragen zur Person"
who = "alle"
[[07_personal_more.item]]
name.de = "Zivilstand"
question = "Wie ist Ihr Zivilstand?"
id = "marital_status"
description.en = "respondent's marital status (own statement)"
response_options = [ "ledig", "verheiratet", "verwitwet", "geschieden", "in eingetragener Partnerschaft", "aufgelöste Partnerschaft" ]
variable_values = [ 1, 2, 3, 4, 6, 7 ]
value_labels = [ "single", "married", "widowed", "divorced", "in civil union", "dissolved civil union" ]
[[07_personal_more.item]]
name.de = "Konfession"
question = "Welcher Konfession oder Glaubensgemeinschaft gehören Sie an?"
id = "denomination"
description.en = "respondent's denomination or religious community"
response_options = [
  "keine/konfessionslos",
  "protestantisch/reformiert/evangelisch",
  "katholisch/christkatholisch/altkatholisch",
  "jüdisch",
  "muslimisch",
  "andere"
]
variable_values = [ 0, 1, 2, 3, 4, 5 ]
value_labels = [
  "none/undenominational",
  "Protestant/Reformed/Evangelical",
  "Catholic/Christian Catholic/Old Catholic",
  "Jewish",
  "Muslim",
  "other"
]
[[07_personal_more.item]]
name.de = "Höchste abgeschlossene Ausbildung"
question = "Was ist Ihre höchste abgeschlossene Ausbildung?"
id = "highest_education"
description.en = "respondent's highest level of education"
response_options = [
  "kein Abschluss",
  "obligatorische Schule",
  "Berufslehre, Handelsdiplom",
  "Gymnasium, Berufsmaturität, Diplom-/Fachmittelschule",
  "Höhere Berufsausbildung, höhere Fachschule",
  "Fachhochschule",
  "Universität, ETH"
]
variable_values = [ 1, 2, 3, 4, 5, 6, 7 ]
value_labels = [
  "no graduation",
  "compulsory schooling",
  "apprenticeship, commercial diploma",
  "academic high school, Federal Vocational Baccalaureate, graduate/technical secondary school",
  "higher vocational training, higher vocational school",
  "technical college/polytechnic",
  "university, ETH"
]
value_scale = "ordinal_ascending"
[07_personal_more.z01_current_former]
lvl = [ "", "inactive" ]
[[07_personal_more.z01_current_former.item]]
lvl.default = [ "", "inactive" ]
lvl.20180923_20181125 = ""
name.de = "{ ifelse(lvl == 'inactive', 'Ehemalige ', '') }Beschäftigungssituation"
who = "{ ifelse(lvl == 'inactive', 'nichterwerbstätige Online-Respondenten', 'alle') }"
question.default = "Was { ifelse(lvl == 'inactive', 'war Ihre letzte', 'ist Ihre aktuelle') } **Haupt**beschäftigung?"
question.20180923 = "Wie ist Ihre aktuelle Beschäftigungssituation?[^main-emp]"
id = "{ ifelse(lvl == 'inactive', 'former_', '') }employment_situation"
description.en = "respondent's { ifelse(lvl == 'inactive', 'former', 'current') } employment situation"
response_options.default = """
{
  if (lvl == 'inactive') {
    c('war nie berufstätig',
      'selbständigerwerbend/freischaffend',
      'MitarbeiterIn im Betrieb der eigenen Familie',
      'AngestellteR',
      'Lehrling',
      'etwas anderes')
  } else {
    c('selbständigerwerbend/freischaffend',
      'MitarbeiterIn im Betrieb der eigenen Familie',
      'AngestellteR',
      'Lehrling',
      'StudentIn oder SchülerIn',
      'RentnerIn',
      'arbeitslos/erwerbslos',
      'Nichterwerbsperson mit Behinderung',
      'Hausfrau/Hausmann',
      'andere Nichterwerbsperson')
  }
}"""
variable_values.default = "{ if (lvl == 'inactive') c(11, 1, 2, 3, 4, 77) else c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) }"
value_labels.default = """
{
  if (lvl == 'inactive') {
    c('never had a job',
      'self-employed/freelancer',
      'employee in the company of the own family',
      'employee',
      'apprentice',
      'something else')
  } else {
    c('self-employed/freelancer',
      'employee in the company of the own family',
      'employee',
      'apprentice',
      'student',
      'pensioner',
      'unemployed',
      'inactive person with disability',
      'housewife/househusband',
      'other inactive person')
  }
}"""
response_options.20180923_20201018 = """
{
  if (lvl == 'inactive') {
    c('selbständigerwerbend/freischaffend',
      'MitarbeiterIn im Betrieb der eigenen Familie',
      'AngestellteR',
      'Lehrling',
      'etwas anderes')
  } else {
    c('selbständigerwerbend/freischaffend',
      'MitarbeiterIn im Betrieb der eigenen Familie',
      'AngestellteR',
      'Lehrling',
      'StudentIn oder SchülerIn',
      'RentnerIn',
      'arbeitslos/erwerbslos',
      'Nichterwerbsperson mit Behinderung',
      'Hausfrau/Hausmann',
      'andere Nichterwerbsperson')
  }
}"""
variable_values.20180923_20201018 = "{ if (lvl == 'inactive') c(1, 2, 3, 4, 77) else c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) }"
value_labels.20180923_20201018 = """
{
  if (lvl == 'inactive') {
    c('self-employed/freelancer',
      'employee in the company of the own family',
      'employee',
      'apprentice',
      'something else')
  } else {
    c('self-employed/freelancer',
      'employee in the company of the own family',
      'employee',
      'apprentice',
      'student',
      'pensioner',
      'unemployed',
      'inactive person with disability',
      'housewife/househusband',
      'other inactive person')
  }
}"""
is_mandatory = true
[[07_personal_more.z01_current_former.item]]
lvl.default = [ "", "inactive" ]
lvl.20180923_20181125 = ""
name.de = "{ ifelse(lvl == 'inactive', 'Ehemaliger ', '') }Beschäftigungsgrad"
who = "{ ifelse(lvl == 'inactive', 'nichterwerbstätige Online-Respondenten', 'Erwerbstätige') }"
question.default = "Wie hoch { ifelse(lvl == 'inactive', 'war Ihr', 'ist Ihr aktueller') } Beschäftigungsgrad?"
question.20180923_20181125 = "Wie ist Ihr aktueller Beschäftigungsgrad?"
id = "{ ifelse(lvl == 'inactive', 'former_', '') }employment_level"
description.en = "respondent's { ifelse(lvl == 'inactive', 'former', 'current') } employment level"
response_options = [
  "Vollzeit erwerbstätig 90 % oder mehr",
  "Teilzeit erwerbstätig 70–89 %",
  "Teilzeit erwerbstätig 50–69 %",
  "Teilzeit erwerbstätig weniger als 50 %"
]
variable_values = [ 1, 2, 3, 4 ]
value_labels = [
  "full-time employed 90 % or more",
  "part-time employed 70–89 %",
  "part-time employed 50–69 %",
  "part-time employed less than 50 %"
]
value_scale = "ordinal_descending"
[[07_personal_more.z01_current_former.item]]
name.de = "{ ifelse(lvl == 'inactive', 'Ehemalige ', '') }Berufliche Stellung"
who = "{ ifelse(lvl == 'inactive', 'ehemals Angestellte Online-Respondenten', 'Angestellte') }"
question = "Was { ifelse(lvl == 'inactive', 'war', 'ist') } Ihre berufliche Stellung?"
id = "{ ifelse(lvl == 'inactive', 'former_', '') }professional_position"
description.en = "respondent's { ifelse(lvl == 'inactive', 'former ', '') }professional position"
response_options = [ "AngestellteR ohne Kader-/Direktionsfunktion", "AngestellteR mit Kaderfunktion / AusbildnerIn", "AngestellteR mit Direktionsfunktion" ]
variable_values = [ 1, 2, 3 ]
value_labels = [ "normal employee", "employee with management tasks/trainer", "directorial employee" ]
value_scale = "ordinal_ascending"
include.false = [ 2018-09-23, 2018-11-25 ]
[[07_personal_more.z01_current_former.item]]
# NOTE: new 4-category `occupational_sector`
name.de = "{ ifelse(lvl == 'inactive', 'Ehemaliger ', '') }Berufssektor"
who = "{ ifelse(lvl == 'inactive', 'nichterwerbstätige Online-Respondenten', 'Erwerbstätige') }"
question = "In welcher Art von Unternehmen { ifelse(lvl == 'inactive', 'waren', 'sind') } Sie beschäftigt?"
id = "{ ifelse(lvl == 'inactive', 'former_', '') }occupational_sector"
description.en = "respondent's { ifelse(lvl == 'inactive', 'former ', '') }occupational sector"
response_options = [
  "Privatwirtschaft",
  "öffentliche Hand (Bund, Kantone, Gemeinden, staatliche Unternehmen wie SBB oder Post)",
  "gemeinnützig/nicht-gewinnorientiert (z. B. WWF, Caritas)",
  "gemischtwirtschaftlich (z. B. Swisscom oder SNB)"
]
variable_values = [ 1, 2, 4, 3 ]
value_labels = [
  "private sector",
  "public sector",
  "non-profit sector",
  "mixed-economy sector"
]
include.false = [ 2018-09-23, 2018-11-25 ]
[[07_personal_more.z01_current_former.item]]
# NOTE: legacy 3-category `occupational_sector`
lvl = ""
name.de = "Berufssektor[^legacy-occ-sect]"
who = "Erwerbstätige"
question = "Arbeiten Sie in der Privatwirtschaft oder bei der öffentlichen Hand?"
id = "legacy_occupational_sector"
description.en = "respondent's occupational sector"
variable_label_common = "respondent's occupational sector (legacy variable due to fundamental subsequent changes in `occupational_sector`)"
response_options = [
  "Privatwirtschaft",
  "öffentliche Hand (Bund, Kantone, Gemeinden, staatliche Unternehmen wie SBB oder Post)",
  "anderes (z. B. gemischtwirtschaftlich)"
]
variable_values = [ 1, 2, 3 ]
value_labels = [
  "private sector",
  "public sector",
  "other (e.g. mixed-economy)"
]
include.default = false
include.true = [ 2018-09-23, 2018-11-25 ]
[[07_personal_more.z01_current_former.item]]
name.de = "{ ifelse(lvl == 'inactive', 'Ehemalige ', '') }Betriebsgrösse"
who = "{ ifelse(lvl == 'inactive', 'nichterwerbstätige Online-Respondenten', 'Erwerbstätige') }"
question = "Wie viele Personen beschäftigt{ ifelse(lvl == 'inactive', 'e', '') } Ihr Betrieb insgesamt (einschliesslich Ihrer eigenen Person)?"
id = "{ ifelse(lvl == 'inactive', 'former_', '') }company_size"
description.en = "size of the company the respondent works for"
response_options = [ "1–9", "10–49", "50–249", "250–999", "1'000 und mehr", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 5, 99 ]
value_labels = [ "1–9", "10–49", "50–249", "250–999", "1'000+", "don't know" ]
value_scale = "ordinal_ascending"
include.false = [ 2018-09-23, 2018-11-25 ]
[[07_personal_more.z01_current_former.item]]
# item source: [Fragebogen ZDA-Nachbefragung AG 2016-10-23](https://drive.google.com/drive/u/0/folders/1ACZSaHBbauJUqlCpdof1PveYT8vn5tmr)
name.de = "{ ifelse(lvl == 'inactive', 'Ehemalige ', '') }Betriebsbranche"
who = "{ ifelse(lvl == 'inactive', 'nichterwerbstätige Online-Respondenten', 'Erwerbstätige') }"
question = "In welcher Branche { ifelse(lvl == 'inactive', 'ist/war Ihr ehemaliger', 'ist Ihr aktueller') } Betrieb hauptsächlich tätig?"
id = "{ ifelse(lvl == 'inactive', 'former_', '') }company_sector"
description.en = "sector of the company the respondent work{ ifelse(lvl == 'inactive', 'ed', 's') } for"
response_options = [
  "Herstellung von Produkten (Industrie)",
  "Detail- und Grosshandel",
  "Gesundheits- und Sozialwesen",
  "Dienstleistungen wie Beratung, Wirtschaftsprüfung, Forschung und Entwicklung",
  "Baugewerbe/Bau",
  "Erziehung und Unterricht",
  "Dienstleistungen wie Reisebüro, Sicherheitsdienst, Arbeitsvermittlung, Hauswart, usw.",
  "Finanzdienstleistungen (Banken, Versicherungen, usw.)",
  "Gastgewerbe/Beherbergung und Gastronomie",
  "Verkehr und Versanddienste",
  "Öffentliche Verwaltung, Verteidigung und Sozialversicherung",
  "Land- und Forstwirtschaft, Fischerei",
  "Persönliche Dienstleistungen (z. B. Coiffeur) und Mitgliederorganisationen (z. B. religiöse Vereinigungen)",
  "Information und Kommunikation",
  "eine andere, nämlich: ✍ (Freitextfeld)"
]
variable_values = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 90 ]
value_labels = [
  "manufacturing of products (industry)",
  "retail and wholesale trade",
  "health and social services",
  "services such as consulting, auditing, research and development",
  "construction sector",
  "education and teaching",
  "services such as travel agency, security service, employment agency, caretaker, etc.",
  "financial services (banking, insurance, etc.)",
  "hotel and catering industry",
  "transport and dispatch services",
  "public administration, defence and social security",
  "agriculture, forestry and fishing",
  "personal services (e.g. hairdresser) and member organisations (e.g. religious associations)",
  "information and communication",
  "custom answer"
]
include.false = [ 2018-09-23, 2018-11-25 ]
[[07_personal_more.z02_more.item]]
name.de = "Haushaltsgrösse[^statag-household]"
question.default = "Wie viele Personen (Sie eingeschlossen) leben in Ihrem Haushalt?"
question.20180923_20181125 = "Wie viele Personen leben in Ihrem Haushalt?"
id = "household_size"
description.en = "number of persons living in respondent's household"
response_options = "_Ganzzahl_"
value_scale = "ratio"
is_mandatory = true
[[07_personal_more.z02_more.item]]
name.de = "Anzahl Kinder im Haushalt[^statag-kids]"
question = "Wie viele davon sind minderjährig (unter 18 Jahre alt)?"
id = "n_kids_in_household"
description.en = "number of underaged persons living in respondent's household"
response_options = "_Ganzzahl_"
value_scale = "ratio"
[[07_personal_more.z02_more.item]]
name.de = "Wohnsituation"
question = "Sind Sie MieterIn oder EigentümerIn Ihrer Wohnung oder Ihres Hauses?"
id = "housing_situation"
description.en = "respondent's housing situation"
response_options = [ "MieterIn oder PächterIn", "EigentümerIn", "anderes (z. B. Frei-, Dienstwohnung)", "weiss nicht" ]
variable_values = [ 1, 2, 3, 99 ]
value_labels = [ "tenant", "owner", "other (e.g. free or official residence)", "don't know" ]
[[07_personal_more.z02_more.item]]
name.de = "Staatsbürgerschaft bei Geburt"
question = "Welche Staatsbürgerschaft hatten Sie bei der Geburt?"
id = "citizenship_at_birth"
description.en = "the respondent's citizenship(s) at birth"
response_options = [ "Schweiz (CH)", "Schweiz (CH) plus weitere (\"DoppelbürgerIn\")", "andere", "weiss nicht" ]
variable_values = [ 1, 2, 3, 99 ]
value_labels = [ "Switzerland (CH)", "Switzerland (CH) plus other(s) (\"dual citizen\")", "other(s)", "don't know" ]
include.false = [ 2018-09-23, 2018-11-25 ]
[[07_personal_more.z02_more.item]]
name.de = "Geburtsort der Eltern"
question = "Wurden Ihre Eltern beide in der Schweiz geboren?"
id = "birthplace_parents"
description.en = "whether the respondent's parents were born in Switzerland or abroad"
response_options = [ "ja, beide in der Schweiz", "nein, ein Elternteil im Ausland", "nein, beide Elternteile im Ausland", "weiss nicht" ]
variable_values = [ 1, 2, 3, 99 ]
value_labels = [ "yes, both in Switzerland", "no, one parent abroad", "no, both parents abroad", "don't know" ]
include.false = [ 2018-09-23, 2018-11-25 ]
[[07_personal_more.z02_more.item]]
name.de = "Monatliches Bruttohaushaltseinkommen"
question = "Wie hoch ist das gesamte monatliche Einkommen Ihres Haushaltes (brutto) ungefähr?"
id = "monthly_gross_household_income"
description.en = "respondent's monthly gross household income"
response_options = [ "bis CHF 3'000", "CHF 3'001–6'000", "CHF 6'001–9'000", "CHF 9'001–12'000", "CHF 12'001–15'000", "über CHF 15'000 ", "keine Angabe" ]
variable_values = [ 1, 2, 3, 4, 5, 6, 80 ]
value_labels = [ "up to CHF 3000", "CHF 3001–6000", "CHF 6001–9000", "CHF 9001–12000", "CHF 12001–15000", "over CHF 15000", "no answer" ]
value_scale = "ordinal_ascending"
[[07_personal_more.z02_more.item]]
name.de = "Einkommensprekarität"
question = "Vom Einkommen muss man ja einen Teil gerade wieder ausgeben, z. B. für Miete und Versicherungen. Mit dem, was Ihnen dann noch bleibt: Wie gut kommen Sie damit aus?"
id = "income_precarity"
description.en = "how well the respondent gets along with his income"
response_options = [ "sehr gut", "ziemlich gut", "weniger gut", "gar nicht gut" ]
variable_values = [ 1, 2, 3, 4 ]
value_labels = [ "very well", "pretty well", "not so well", "not at all well" ]
value_scale = "ordinal_descending"
[[07_personal_more.z02_more.item]]
name.de = "Persönlicher Anteil am Bruttohaushaltseinkommen"
who = "Nicht-Alleinwohnende"
question = "Wie viel bringen Sie persönlich ungefähr ins Haushaltseinkommen (brutto) ein?"
id = "gross_household_income_share"
description.en = "respondent's personal share of gross household income"
response_options = [
  "nichts oder viel weniger als die Hälfte",
  "weniger als die Hälfte",
  "etwa die Hälfte",
  "mehr als die Hälfte",
  "viel mehr als die Hälfte oder alles",
  "weiss nicht"
]
variable_values = [ 1, 2, 3, 4, 5, 99 ]
value_labels = [
  "much less than half or nothing",
  "less than half",
  "about half",
  "more than half",
  "much more than half or everything",
  "don't know"
]
value_scale = "ordinal_ascending"


[08_smartvote]
title = "smartvote-Fragen"
intro = "Zum Schluss würden wir Ihnen gerne noch einige zusätzliche Fragen zu politischen Zielen stellen. Deren Beantwortung sollte nicht mehr als 5 Minuten in Anspruch nehmen."
who = "Online-Respondenten"
response_options = [ "ja", "eher ja", "eher nein", "nein", "weiss nicht" ]
variable_values = [ 1, 2, 3, 4, 99 ]
value_labels = [ "yes", "rather yes", "rather no", "no", "don't know" ]
value_scale = "ordinal_descending"
include.default = false
include.true = [ 2020-10-18 ]
# untenstehende Items stammen aus dem smartvote-AG-Fragebogen 2020: https://smartvote.ch/de/group/23/election/20_ag_leg/matching/questionnaire/deluxe
[[08_smartvote.aargau.item]]
# smartvote-Politikbereich: Sozialstaat, Familie & Gesundheit
name.de = "Krankenkassenprämienverbilligung (smartvote)"
question = "Soll der Kanton mehr Geld für die Verbilligung der Krankenkassenprämien bereitstellen?"
id = "attitude_health_insurance_charge_reduction"
description.en = "whether the respondent thinks that the canton should provide more money for the reduction of health insurance charges (smartvote question)"
[[08_smartvote.aargau.item]]
# smartvote-Politikbereich: Sozialstaat, Familie & Gesundheit
name.de = "Sozialhilferechtsverschärfung (smartvote)"
question = "Begrüssen Sie eine Verschärfung des kantonalen Sozialhilfegesetzes (z.B. mehr Kontrollen bei Verdacht auf Missbrauch, tieferer Ansatz des Existenzminimums, höherer Ermessenspielraum bei der Vergabe der Sozialhilfe)?"
id = "attitude_social_aid_law_tightening"
description.en = "whether the respondent welcomes a tightening of the cantonal social aid law (e.g. more controls in cases of suspected abuse, lower approach to the subsistence minimum, greater discretion in the allocation of social assistance) (smartvote question)"
[[08_smartvote.aargau.item]]
# smartvote-Politikbereich: Schule & Bildung
name.de = "Tagesschulen (smartvote)"
question = "Sollen alle Volksschulen im Kanton als freiwillige Tagesschulen geführt werden (mit integriertem Betreuungsangebot)?"
id = "attitude_day_schools"
description.en = "whether the respondent thinks that all elementary schools in the canton should be run as voluntary day schools (with integrated childcare services) (smartvote question)"
[[08_smartvote.aargau.item]]
# smartvote-Politikbereich: Migration & Integration
name.de = "Asylrechtsverschärfung (smartvote)"
question = "Würden Sie eine weitere Verschärfung des Asylrechts begrüssen?"
id = "attitude_asylum_law_tightening"
description.en = "whether the respondent welcomes a further tightening of the asylum law (smartvote question)"
[[08_smartvote.aargau.item]]
# smartvote-Politikbereich: Gesellschaft, Kultur & Ethik
name.de = "Homosexuellengleichstellung (smartvote)"
question = "Sollen gleichgeschlechtliche Paare in allen Bereichen die gleichen Rechte wie heterosexuelle Paare haben?"
id = "attitude_same_sex_equality"
description.en = "whether the respondent thinks that same-sex couples should have the same rights as heterosexual couples in all areas (smartvote question)"
[[08_smartvote.aargau.item]]
# smartvote-Politikbereich: Finanzen & Steuern
name.de = "Unternehmenssteuersenkung (smartvote)"
question = "Würden Sie eine Senkung der kantonalen Unternehmenssteuern befürworten (Reduktion Gewinnsteuersätze)?"
id = "attitude_corporate_taxes_reduction"
description.en = "whether the respondent supports a reduction of cantonal corporate taxes (reduction of profit tax rates) (smartvote question)"
[[08_smartvote.aargau.item]]
# smartvote-Politikbereich: Wirtschaft & Arbeit
name.de = "Mindestlohneinführung (smartvote)"
question = "Befürworten Sie die Einführung eines für alle Arbeitnehmenden gültigen Mindestlohnes von CHF 4'000 für eine Vollzeitstelle?"
id = "attitude_minimum_wage_introduction"
description.en = "whether the respondent supports the introduction of a general minimum wage of CHF 4000 for a full-time job (smartvote question)"
[[08_smartvote.aargau.item]]
# smartvote-Politikbereich: Verkehr
name.de = "Strasseninfrastrukturausgabenerhöhung (smartvote)"
question = "Sollen die Ausgaben für die Strasseninfrastruktur im Kanton in den nächsten Jahren erhöht werden?"
id = "attitude_road_infrastructure_spending_increase"
description.en = "whether the respondent thinks that spending on road infrastructure in the canton should be increased in the coming years (smartvote question)"
[[08_smartvote.aargau.item]]
# smartvote-Politikbereich: Umwelt & Energie
name.de = "Ölheizungsverbot (smartvote)"
question = "Würden Sie ein Verbot von neuen Ölheizungen begrüssen (Ersatz bisheriger Anlagen oder bei Neubauten)?"
id = "attitude_oil_heating_ban"
description.en = "whether the respondent welcomes a ban on new oil heating systems (replacement of existing systems or for new buildings) (smartvote question)"
[[08_smartvote.aargau.item]]
# smartvote-Politikbereich: Politisches System & Digitalisierung
name.de = "Politikfinanzierungsoffenlegung (smartvote)"
question = "Soll die Finanzierung von Parteien sowie von Wahl- und Abstimmungskampagnen im Kanton offengelegt werden müssen?"
id = "attitude_political_transparency"
description.en = "whether the respondent thinks that the financing of political parties and election and voting campaigns in the canton should have to be disclosed (smartvote question)"
[[08_smartvote.aargau.item]]
# smartvote-Politikbereich: Sicherheit & Polizei
name.de = "Polizeistellenausbau (smartvote)"
question = "Sollen zur Wahrung der öffentlichen Sicherheit deutlich mehr Stellen bei der Polizei geschaffen werden?"
id = "attitude_police_expansion"
description.en = "whether the respondent thinks that significantly more police forces should be employed to ensure public safety (smartvote question)"


[x_polling_agency]
title = "Vom Umfrageinstitut generierte Zusatzvariablen"
intro = """
Die folgenden Elemente des Blockes X sind nicht für die Aufnahme in den Fragebogen vorgesehen und werden dementsprechend auch nicht abgefragt. Stattdessen \
werden sie vom Umfrageinstitut während (Paradaten der Online-Befragung) bzw. nach der Befragung (zwecks Validierung bzw. Anonymisierung) generiert. \
Zur Abgrenzung wird den Elementen des Blockes X dabei in der Nummerierung (#) die Zahl `2000` vorangestellt."""
prefix = 2000

[x_polling_agency.001_all]
who = "alle"
[[x_polling_agency.001_all.item]]
name.de = "Fragebogennummer"
id = "questionnaire_nr"
description.en = "respondent's questionnaire number (every (partially) completed questionnaire gets a sequential number assigned starting from 1)"
response_options = "_Ganzzahl_"
[[x_polling_agency.001_all.item]]
name.de = "Fragebogenkanal"
id = "questionnaire_channel"
description.en = "the channel through which the respondent answered the questionnaire"
response_options = [ "online", "print" ]
variable_values = [ 1, 2 ]
value_labels = [ "online", "print" ]
value_scale = "binary"
[[x_polling_agency.001_all.item]]
name.de = "Fragebogenbereitstellungsart"
id = "questionnaire_provision_type"
description.en = "the way the questionnaire was provisioned to the respondent"
response_options = [ "online und print gleichzeitig", "zuerst online, print erst mit Erinnerungsschreiben", "nur online" ]
variable_values = [ 1, 2, 3 ]
value_labels = [ "online and print simultaneously", "online first, print only later with reminder letter", "online only" ]
[[x_polling_agency.001_all.item]]
name.de = "Fragebogenbeantwortungsstatus"
id = "questionnaire_status"
description.en = "respondent's questionnaire completion status"
response_options = [ "ohne Unterbrechung beendet", "nach Unterbrechung beendet", "nicht beendet" ]
variable_values = [ 1, 2, 3 ]
value_labels = [ "finished without interruption", "finished after interruption", "unfinished" ]
[[x_polling_agency.001_all.item]]
name.de = "Erinnerungsschreiben (Dummy)"
id = "received_reminder"
description.en = "dummy value indicating whether or not the respondent received a postal reminder"
response_options = [ "kein Erinnerungsschreiben erhalten", "Erinnerungsschreiben erhalten" ]
variable_values = [ 0, 1 ]
value_labels = [ "received no reminder", "received reminder" ]
value_scale = "binary"
include.false = [ 2018-09-23, 2018-11-25 ]
[[x_polling_agency.001_all.item]]
name.de = "Bezirk"
id = "district"
description.en = "respondent's district of residence"
response_options = [ "Aarau", "Baden", "Bremgarten", "Brugg", "Kulm", "Laufenburg", "Lenzburg", "Muri", "Rheinfelden", "Zofingen", "Zurzach" ]
variable_values = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
value_labels = [ "Aarau", "Baden", "Bremgarten", "Brugg", "Kulm", "Laufenburg", "Lenzburg", "Muri", "Rheinfelden", "Zofingen", "Zurzach" ]
[[x_polling_agency.001_all.item]]
name.de = "[«easyvote»-Broschüre](https://www.easyvote.ch/de/f/angebote/broschuere): Untere Altersgrenze des Gemeinde-Abonnements"
id = "easyvote_municipality_min_age"
description.en = "lower age limit of the municipal subscription of the [\"easyvote\" booklet](https://www.easyvote.ch/de/f/angebote/broschuere)"
response_options = [ "keine (Gemeinde hat «easyvote»-Broschüre nicht abonniert)", "18", "19", "20", "21", "22", "23", "24", "25", "keine Angabe" ]
variable_values.default = [ 0, 18, 19, 20, 21, 22, 23, 24, 25, 80 ]
variable_values.20191020 = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 80 ]
value_labels = [ "none (municipality has not subscribed to the \"easyvote\" booklet)", "18", "19", "20", "21", "22", "23", "24", "25", "not specified" ]
include.false = [ 2018-09-23, 2018-11-25 ]
[[x_polling_agency.001_all.item]]
name.de = "[«easyvote»-Broschüre](https://www.easyvote.ch/de/f/angebote/broschuere): Obere Altersgrenze des Gemeinde-Abonnements"
id = "easyvote_municipality_max_age"
description.en = "upper age limit of the municipal subscription of the [\"easyvote\" booklet](https://www.easyvote.ch/de/f/angebote/broschuere)"
response_options = [ "keine (Gemeinde hat «easyvote»-Broschüre nicht abonniert)", "18", "19", "20", "21", "22", "23", "24", "25", "keine Angabe" ]
variable_values.default = [ 0, 18, 19, 20, 21, 22, 23, 24, 25, 80 ]
variable_values.20191020 = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 80 ]
value_labels = [ "none (municipality has not subscribed to the \"easyvote\" booklet)", "18", "19", "20", "21", "22", "23", "24", "25", "not specified" ]
include.false = [ 2018-09-23, 2018-11-25 ]
[x_polling_agency.001_all.z01_fso]
value_scale = "ordinal_descending"
[[x_polling_agency.001_all.z01_fso.item]]
name.de = "BFS-Raumtypologie: Gemeinde-Grössenklasse"
id = "fso_municipality_size_class"
description.en = "Spatial typology by the Federal Statistical Office (FSO) of respondent's place of residence: Municipality size class (\"Gemeinde-Grössenklasse\")"
response_options = [
  "≥ 100'000 EinwohnerInnen",
  "50'000–99'999 EinwohnerInnen",
  "20'000–49'999 EinwohnerInnen",
  "10'000–19'999 EinwohnerInnen",
  "5'000–9'999 EinwohnerInnen",
  "2'000–4'999 EinwohnerInnen",
  "1'000–1'999 EinwohnerInnen",
  "< 1'000 EinwohnerInnen"
]
variable_values = [ 1, 2, 3, 4, 5, 6, 7, 8 ]
value_labels = [
  "≥ 100000 inhabitants",
  "50000–99999 inhabitants",
  "20000–49999 inhabitants",
  "10000–19999 inhabitants",
  "5000–9999 inhabitants",
  "2000–4999 inhabitants",
  "1000–1999 inhabitants",
  "< 1,000 inhabitants"
]
[[x_polling_agency.001_all.z01_fso.item]]
name.de = "BFS-Raumtypologie: Raum mit städtischem Charakter 2012"
id = "fso_urban_character_2012"
description.en = "Spatial typology by the Federal Statistical Office (FSO) of respondent's place of residence: Space with urban character (\"Raum mit städtischem Charakter 2012\")"
response_options = [
  "Agglomerationskerngemeinde (Kernstadt)",
  "Agglomerationskerngemeinde (Hauptkern)",
  "Agglomerationskerngemeinde (Nebenkern)",
  "Agglomerationsgürtelgemeinde",
  "mehrfach orientierte Gemeinde",
  "Kerngemeinde ausserhalb Agglomerationen",
  "ländliche Gemeinde ohne städtischen Charakter"
]
variable_values = [ 1, 2, 3, 4, 5, 6, 0 ]
value_labels = [
  "agglomeration core municipality (core city)",
  "agglomeration core municipality (main core)",
  "agglomeration core municipality (secondary core)",
  "agglomeration belt municipality",
  "multiply oriented municipality",
  "core municipality outside agglomerations",
  "rural municipality without urban character"
]
[[x_polling_agency.001_all.z01_fso.item]]
name.de = "BFS-Raumtypologie: Agglomerationsgrössenklasse 2012"
id = "fso_agglomeration_size_class_2012"
description.en = "Spatial typology by the Federal Statistical Office (FSO) of respondent's place of residence: Agglomeration size class 2012 (\"Agglomerationsgrössenklasse 2012\")"
response_options = [
  "≥ 500'000 EinwohnerInnen",
  "250'000 – 499'999 EinwohnerInnen",
  "100'000 – 249'999 EinwohnerInnen",
  "50'000 – 99'999 EinwohnerInnen",
  "< 50'000 EinwohnerInnen",
  "keine Agglomerationszugehörigkeit"
]
variable_values = [ 1, 2, 3, 4, 5, 0 ]
value_labels = [
  "≥ 500000 inhabitants",
  "250000–499999 inhabitants",
  "100000–249999 inhabitants",
  "50000–99999 inhabitants",
  "< 50000 inhabitants",
  "no agglomeration affiliation"
]
[[x_polling_agency.001_all.z01_fso.item]]
name.de = "BFS-Raumtypologie: (Statistische) Städte 2012"
id = "fso_statistical_cities_2012"
description.en = "Spatial typology by the Federal Statistical Office (FSO) of respondent's place of residence: (Statistical) cities 2012 (\"(Statistische) Städte 2012\")"
response_options = [ "Stadt", "keine Stadt" ]
variable_values = [ 1, 0 ]
value_labels = [ "city", "no city" ]
value_scale = "binary"
[[x_polling_agency.001_all.z01_fso.item]]
name.de = "BFS-Raumtypologie: Degree of urbanisation 2011 (DEGURBA) – Eurostat-Urbanisierungsgrad"
id = "fso_degurba_2011"
description.en = "Spatial typology by the Federal Statistical Office (FSO) of respondent's place of residence: Eurostat's degree of urbanisation 2011 (DEGURBA)"
response_options = [ "dichtbesiedeltes Gebiet", "mitteldicht besiedeltes Gebiet", "geringbesiedeltes Gebiet" ]
variable_values = [ 1, 2, 3 ]
value_labels = [ "densely populated area", "intermediate density area", "thinly populated area" ]
[[x_polling_agency.001_all.z01_fso.item]]
name.de = "BFS-Raumtypologie: Gemeindetypologie 2012 (9 Kategorien)"
id = "fso_municipality_typology_2012_9cat"
description.en = "Spatial typology by the Federal Statistical Office (FSO) of respondent's place of residence: Municipality typology 2012 in 9 categories (\"Gemeindetypologie 2012 (9 Kategorien)\")"
response_options = [
  "städtische Gemeinde einer grossen Agglomeration",
  "städtische Gemeinde einer mittelgrossen Agglomeration",
  "städtische Gemeinde einer kleinen oder ausserhalb einer Agglomeration",
  "periurbane Gemeinde hoher Dichte",
  "periurbane Gemeinde mittlerer Dichte",
  "periurbane Gemeinde geringer Dichte",
  "ländliche Zentrumsgemeinde",
  "ländliche zentral gelegene Gemeinde",
  "ländliche periphere Gemeinde"
]
variable_values = [ 11, 12, 13, 21, 22, 23, 31, 32, 33 ]
value_labels = [
  "urban municipality of a large agglomeration",
  "urban municipality of a medium-sized agglomeration",
  "urban municipality of a small or outside of an agglomeration",
  "periurban municipality of high density",
  "periurban municipality of medium density",
  "periurban municipality of low density",
  "rural central municipality",
  "rural centrally located municipality",
  "rural peripheral municipality"
]
[[x_polling_agency.001_all.z01_fso.item]]
name.de = "BFS-Raumtypologie: Gemeindetypologie 2012 (25 Kategorien)"
id = "fso_municipality_typology_2012_25cat"
description.en = "Spatial typology by the Federal Statistical Office (FSO) of respondent's place of residence: Municipality typology 2012 in 25 categories (\"Gemeindetypologie 2012 (25 Kategorien)\")"
response_options = [
  "Kernstadt einer grossen Agglomeration",
  "städtische Arbeitsplatzgemeinde einer grossen Agglomeration",
  "städtische Wohngemeinde einer grossen Agglomeration",
  "Kernstadt einer mittelgrossen Agglomeration",
  "städtische Arbeitsplatzgemeinde einer mittelgrossen Agglomeration",
  "städtische Wohngemeinde einer mittelgrossen Agglomeration",
  "städtische Tourismusgemeinde einer kleinen oder ausserhalb einer Agglomeration",
  "städtische Industriegemeinde einer kleinen oder ausserhalb einer Agglomeration",
  "städtische Dienstleistungsgemeinde einer kleinen oder ausserhalb einer Agglomeration",
  "periurbane Industriegemeinde hoher Dichte",
  "periurbane Dienstleistungsgemeinde hoher Dichte",
  "periurbane Industriegemeinde mittlerer Dichte",
  "periurbane Dienstleistungsgemeinde mittlerer Dichte",
  "periurbane Agrargemeinde geringer Dichte",
  "periurbane Industriegemeinde geringer Dichte",
  "periurbane Dienstleistungsgemeinde geringer Dichte",
  "Tourismusgemeinde eines ländlichen Zentrums",
  "Industriegemeinde eines ländlichen Zentrums",
  "Dienstleistungsgemeinde eines ländlichen Zentrums",
  "ländliche zentral gelegene Agrargemeinde",
  "ländliche zentral gelegene Industriegemeinde",
  "ländliche zentral gelegene Dienstleistungsgemeinde",
  "ländliche periphere Tourismusgemeinde ",
  "ländliche periphere Agrargemeinde",
  "ländliche periphere Mischgemeinde"
]
variable_values = [ 111, 112, 113, 121, 122, 123, 134, 136, 137, 216, 217, 226, 227, 235, 236, 237, 314, 316, 317, 325, 326, 327, 334, 335, 338 ]
value_labels = [
  "core city of a large agglomeration",
  "urban workplace municipality of a large agglomeration",
  "urban residential municipality of a large agglomeration",
  "core city of a medium-sized agglomeration",
  "urban workplace municipality of a medium-sized agglomeration",
  "urban residential municipality of a medium-sized agglomeration",
  "urban tourism municipality of a small or outside of an agglomeration",
  "urban industrial municipality of a small or outside of an agglomeration",
  "urban service municipality of a small or outside of an agglomeration",
  "periurban high density industrial municipality",
  "periurban high density service municipality",
  "periurban medium density industrial municipality",
  "periurban medium density service municipality",
  "periurban low density agricultural municipality",
  "periurban low density industrial municipality",
  "periurban low density service municipality",
  "tourism municipality of a rural centre",
  "industrial municipality of a rural centre",
  "service municipality of a rural centre",
  "rural centrally located agricultural municipality",
  "rural centrally located industrial municipality",
  "rural centrally located service municipality",
  "rural peripheral tourism municipality ",
  "rural peripheral agricultural municipality",
  "rural peripheral mixed municipality"
]
[[x_polling_agency.001_all.z01_fso.item]]
name.de = "BFS-Raumtypologie: Stadt/Land-Typologie 2012"
id = "fso_city_rural_typology_2012"
description.en = "Spatial typology by the Federal Statistical Office (FSO) of respondent's place of residence: City/rural typology 2012 (\"Stadt/Land-Typologie 2012\")"
response_options = [ "städtisch", "intermediär", "ländlich" ]
variable_values = [ 1, 2, 3 ]
value_labels = [ "urban", "intermediary", "rural" ]
[x_polling_agency.001_all.z02_quality_control]
value_scale = "binary"
[[x_polling_agency.001_all.z02_quality_control.item]]
name.de = "Kontrolle Geschlecht (Dummy)"
id = "matches_sex"
description.en = "dummy value indicating whether or not the respondent's own statement about his/her sex matches the official cantonal register information"
response_options = [ "Divergenz", "Übereinstimmung" ]
variable_values = [ 0, 1 ]
value_labels = [ "mismatch", "match" ]
include.default = false
include.true = [ 2018-09-23, 2018-11-25 ]
[[x_polling_agency.001_all.z02_quality_control.item]]
name.de = "Plausibilitätskontrolle Umfrageinstitut (Dummy)"
id = "passes_plausibility_check"
description.en = "dummy value indicating whether or not the respondent's answer behavior passes basic plausibility checks"
response_options = [ "nicht bestanden", "bestanden" ]
variable_values = [ 0, 1 ]
value_labels = [ "fail", "pass" ]

[x_polling_agency.008_online]
who = "Online-Respondenten"
[[x_polling_agency.008_online.item]]
name.de = "Zusatzfrage zum Teilzeiterwerb für Schüler-, Studenten- und RentnerInnen (Dummy)"
question.default = "Sind Sie daneben Teilzeit erwerbstätig?"
question.20180923_20191020 = "Sind Sie zumindest Teilzeit erwerbstätig?"
id = "employment_situation_routing"
description.en = "dummy value indicating whether or not respondent is working (additional routing question for students and pensioners)"
response_options = [ "ja", "nein" ]
variable_values = [ 1, 2 ]
value_labels = [ "yes (working)", "no (not working)" ]
value_scale = "binary"
is_mandatory = true
[[x_polling_agency.008_online.item]]
name.de = "Browser"
id = "web_browser"
description.en = "the User-Agent string of the respondent's web browser"
response_options = "_Text_"
[[x_polling_agency.008_online.item]]
name.de = "HTTP-Referrer"
id = "http_referrer"
description.en = "the HTTP referrer the respondent's web browser sent when accessing the questionnaire"
response_options = "_Text_"
[[x_polling_agency.008_online.item]]
name.de = "Interviewstartzeitpunkt"
id = "start_date_time"
description.en = "date and time when the respondent started to answer the questionnaire"
response_options = "_Datum/Uhrzeit ([ISO 8601][iso8601])_"
value_scale = "interval"
[[x_polling_agency.008_online.item]]
name.de = "Letzter Fragebogenzugriffszeitpunkt"
id = "last_access_date_time"
description.en = "date and time when the respondent last accessed the questionnaire"
response_options = "_Datum/Uhrzeit ([ISO 8601][iso8601])_"
value_scale = "interval"
[[x_polling_agency.008_online.item]]
name.de = "Gesamte Interviewdauer"
id = "total_time"
description.en = "time in seconds it took the respondent to complete the whole questionnaire"
response_options = "_Ganzzahl_"
value_scale = "ratio"
[[x_polling_agency.008_online.item]]
name.de = "Verweildauer Einstiegsseite"
id = "time_introduction"
description.en = "time in seconds the respondent spent on the survey introduction page"
response_options = "_Ganzzahl_"
value_scale = "ratio"
include.false = [ 2018-09-23, 2018-11-25 ]
[[x_polling_agency.008_online.item]]
name.de = "Interviewdauer Thema/Themen XYZ"
id = "time_xyz"
description.en = "time in seconds it took the respondent to complete the variable(s) xyz"
response_options = "_Ganzzahl_"
value_scale = "ratio"

[x_polling_agency.009_print]
who = "Print-Respondenten"
[[x_polling_agency.009_print.item]]
name.de = "Rückempfangsdatum Print-Fragebogen"
id = "postal_reception_date"
description.en = "date on which the survey institute received the print questionnaire back by postal mail"
response_options = "_Datum ([ISO 8601][iso8601])_"
value_scale = "interval"
include.false = [ 2018-09-23, 2018-11-25, 2019-10-20 ]


[y_generated]
title = "Vom ZDA generierte Zusatzvariablen"
intro = """
Die folgenden Elemente des Blockes Y sind nicht für die Aufnahme in den Fragebogen vorgesehen und werden dementsprechend auch nicht abgefragt. \
Stattdessen werden sie vom ZDA nach der Befragung generiert. Zur Abgrenzung wird den Elementen des Blockes Y dabei in der Nummerierung (#) die Zahl `3000` \
vorangestellt.

Die Codes der _Variablenausprägungen_ wurden weggelassen, da ihnen keine besondere Bedeutung zukommt und sie nach erfolgter Datenaufbereitung aufgrund der \
Konvertierung in den R-Datentyp [`factor`](https://rdrr.io/r/base/factor.html) ohnehin vorgegeben sind (sequentielle Nummer beginnend bei `1`, fehlende Werte \
als `NA`)."""
prefix = 3000

[y_generated.001_all]
who = "alle"
[y_generated.001_all.001_both]
ballot_types = [ "referendum", "election" ]
[[y_generated.001_all.001_both.item]]
name.de = "Alter"
id = "age"
description.en = """
respondent's age at the end of the year of the `ballot_date` (derived from `{
  ifelse(q_item_val(ballot_date = ballot_date,
                    canton = canton,
                    branch_path = c('00_cantonal_statistical_office', '003_to_zda'),
                    v_name = 'year_of_birth_official',
                    key = 'include'),
         'year_of_birth_official',
         'year_of_birth')
}`)"""
variable_label_common = "respondent's age at the end of the year of the `ballot_date` (derived from `year_of_birth_official` if available, otherwise from `year_of_birth`)"
response_options = "_Ganzzahl_"
value_scale = "ratio"
include = "{ any(q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('00_cantonal_statistical_office', '003_to_zda'), v_name = 'year_of_birth_official', key = 'include'), q_item_val(ballot_date = ballot_date, canton = canton, branch_path = '01_personal', v_name = 'year_of_birth', key = 'include')) }"
[[y_generated.001_all.001_both.item]]
name.de = "Altersgruppe"
id = "age_group"
description.en = "respondent's age group (derived from `age`)"
response_options = [ "18–29 Jahre", "30–39 Jahre", "40–49 Jahre", "50–59 Jahre", "60–69 Jahre", "70+ Jahre" ]
value_labels = [ "18–29 years", "30–39 years", "40–49 years", "50–59 years", "60–69 years", "70+ years" ]
value_scale = "ordinal_ascending"
include = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('y_generated', '001_all', '001_both'), v_name = 'age', key = 'include') }"
[[y_generated.001_all.001_both.item]]
name.de = "Zivilstand (reduziert)"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = '07_personal_more', v_name = 'marital_status', key = 'question') }"
id = "marital_status_reduced"
description.en = "respondent's marital status (own statement; reduced)"
response_options = [ "ledig", "verheiratet/in eingetragener Partnerschaft", "verwitwet", "geschieden/aufgelöste Partnerschaft" ]
value_labels = [ "single", "married/in civil union", "widowed", "divorced/dissolved civil union" ]
include = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = '07_personal_more', v_name = 'marital_status', key = 'include') }"
[[y_generated.001_all.001_both.item]]
name.de = "Zivilstand (amtliche Information, reduziert)[^pseudon]"
id = "marital_status_official_reduced"
description.en = "respondent's marital status (official cantonal register information; reduced)"
response_options = [ "ledig", "verheiratet/in eingetragener Partnerschaft", "verwitwet", "geschieden/aufgelöste Partnerschaft" ]
value_labels = [ "single", "married/in civil union", "widowed", "divorced/dissolved civil union" ]
include = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('00_cantonal_statistical_office', '003_to_zda'), v_name = 'marital_status_official', key = 'include') }"
[[y_generated.001_all.001_both.item]]
name.de = "Konfession (reduziert)"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = '07_personal_more', v_name = 'denomination', key = 'question') }"
id = "denomination_reduced"
description.en = "respondent's denomination or religious community (reduced)"
response_options = [ "keine/konfessionslos", "protestantisch/reformiert/evangelisch", "katholisch/christkatholisch/altkatholisch", "andere" ]
value_labels = [   "none/undenominational", "Protestant/Reformed/Evangelical", "Catholic/Christian Catholic/Old Catholic", "other" ]
include = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = '07_personal_more', v_name = 'denomination', key = 'include') }"
[[y_generated.001_all.001_both.item]]
name.de = "Höchste abgeschlossene Ausbildung (reduziert)"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = '07_personal_more', v_name = 'highest_education', key = 'question') }"
id = "highest_education_reduced"
description.en = "respondent's highest level of education (reduced)"
response_options = [
  "kein Abschluss, obligatorische Schule",
  "Berufslehre, Handelsdiplom",
  "Maturität, Diplom-/Fachmittelschule, höhere Berufsbildung",
  "Fachhochschule, Universität, ETH"
]
value_labels = [
  "no graduation, compulsory schooling",
  "apprenticeship, commercial diploma",
  "higher education entrance qualification, diploma/technical secondary school, higher vocational training",
  "polytechnic, university, ETH"
]
value_scale = "ordinal_ascending"
include = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = '07_personal_more', v_name = 'highest_education', key = 'include') }"
[[y_generated.001_all.001_both.item]]
lvl.default = [ "", "inactive" ]
lvl.20180923_20181125 = ""
name.de = "{ ifelse(lvl == 'inactive', 'Ehemalige ', '') }Beschäftigungssituation (reduziert)"
question.default = "Was { ifelse(lvl == 'inactive', 'war Ihre letzte', 'ist Ihre aktuelle') } **Haupt**beschäftigung?"
question.20180923 = "Wie ist Ihre aktuelle Beschäftigungssituation?[^main-emp]"
id = "{ ifelse(lvl == 'inactive', 'former_', '') }employment_situation_reduced"
description.en = "respondent's { ifelse(lvl == 'inactive', 'former', 'current') } employment situation (reduced)"
response_options = [
  "selbständigerwerbend/freischaffend",
  "AngestellteR",
  "in Ausbildung",
  "RentnerIn",
  "arbeitslos/erwerbslos",
  "Hausfrau/Hausmann",
  "andere Nichterwerbsperson"
]
value_labels = [
  "self-employed/freelancer",
  "employee",
  "in education",
  "pensioner",
  "unemployed",
  "housewife/househusband",
  "other inactive person"
]
include = """
{
  q_item_val(ballot_date = ballot_date,
             canton = canton,
             branch_path = c("07_personal_more", "z01_current_former"),
             v_name = "{ ifelse(lvl == 'inactive', 'former_', '') }employment_situation",
             key = "include") &&
    lvl %in% q_item_val(ballot_date = ballot_date,
                        canton = canton,
                        branch_path = c("07_personal_more", "z01_current_former"),
                        v_name = "{ ifelse(lvl == 'inactive', 'former_', '') }employment_situation",
                        key = "lvl")
}"""
[[y_generated.001_all.001_both.item]]
name.de = "COVID-19-Impfung selbst (Dummy)"
id = "is_vaccinated_covid"
description.en = "whether or not the respondent received at least one COVID-19 vaccination"
response_options = [ "nein", "ja" ]
value_labels = [ "no", "yes" ]
value_scale = "binary"
include = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = '04_2_covid_related', v_name = 'vaccination_status_covid', key = 'include') }"
[[y_generated.001_all.001_both.item]]
name.de = "Monatliches Bruttoäquivalenzeinkommen ([OECD-Quadratwurzel-Skala](https://de.wikipedia.org/wiki/OECD-Skala))"
id = "monthly_gross_equivalised_income"
description.en = "respondent's monthly gross equivalised income (OECD square root scale) based on average monthly gross household income"
response_options = "_Gleitkommazahl_"
value_scale = "ratio" # only pseudo-ratio because underlying data is on ordinal-scale
include = "{ all(q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('07_personal_more', 'z02_more'), v_name = 'monthly_gross_household_income', key = 'include'), q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('07_personal_more', 'z02_more'), v_name = 'household_size', key = 'include')) }"
[[y_generated.001_all.001_both.item]]
name.de = "Empirisches Viertel des monatlichen Bruttoäquivalenzeinkommens"
id = "quarter_monthly_gross_equivalised_income"
description.en = "empirical quarter the respondent's monthly gross equivalised income belongs in"
response_options = [ "unterstes Einkommensviertel", "zweites Einkommensviertel", "drittes Einkommensviertel", "oberstes Einkommensviertel" ]
value_labels = [ "bottom income quarter", "second income quarter", "third income quarter", "top income quarter" ]
value_scale = "ordinal_ascending"
include = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('y_generated', '001_all', '001_both'), v_name = 'monthly_gross_equivalised_income', key = 'include') }"
[[y_generated.001_all.001_both.item]]
name.de = "Parteisympathie (erweitert)"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = '04_political_general', v_name = 'favored_party', key = 'question') }"
id = "favored_party_extended"
description.en = "the political party (recoded extended set) the respondent feels closest to his/her own political stance"
response_options = "{ c(q_parties(ballot_date = ballot_date) %$% de.short, 'andere', 'mehrere (links)', 'mehrere (mitte-rechts)', 'mehrere (beliebig)', response_options(type = 'none', lang = 'de', subtypes = 'plural'), response_options(type = 'dunno', lang = 'de', subtypes = 'main')) }"
value_labels = "{ c(q_parties(ballot_date = ballot_date) %$% en.short, 'other', 'multiple (left)', 'multiple (center-right)', 'multiple (arbitrary)',  response_options(type = 'none', lang = 'en', subtypes = 'main'), response_options(type = 'dunno', lang = 'en', subtypes = 'main')) }"
include = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = '04_political_general', v_name = 'favored_party', key = 'include') }"
[[y_generated.001_all.001_both.item]]
name.de = "Wichtigstes politisches Problem (erweitert)"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = '03_1_election_general', v_name = 'main_political_issue', key = 'question') }"
id = "main_political_issue_extended"
description.en = "issue in Swiss politics the respondent considers the most important one (choice of response options is based on the most recent [\"Credit Suisse Sorgenbarometer\"](https://de.wikipedia.org/wiki/Sorgenbarometer); recoded extended set)"
response_options = "{ political_issues(ballot_date = ballot_date, lang = 'de') %>% c('COVID-19-Pandemie', 'sonstiges', response_options(type = 'dunno', lang = 'de', subtypes = 'main')) }"
value_labels = "{ political_issues(ballot_date = ballot_date, lang = 'en') %>% c('COVID-19 pandemic', 'other', response_options(type = 'dunno', lang = 'en', subtypes = 'main')) }"
randomize_response_options = true
# NOTE: excluded by default since it is based on hand-curated recodings (result is hardly comparable across ballots)
#include.default = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = '03_1_election_general', v_name = 'main_political_issue', key = 'include') }"
include.default = false
include.true = [ 2020-10-18 ]
[[y_generated.001_all.001_both.item]]
name.de = "Links-rechts-Selbstpositionierung (reduziert)"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = '04_political_general', v_name = 'left_right_self_positioning', key = 'question') }"
id = "left_right_self_positioning_reduced"
description.en = "respondent's left-right self-positioning (reduced)"
response_options = [ "links aussen (0–2)", "links (3–4)", "Mitte (5)", "rechts (6–7)", "rechts aussen (8–10)", "weiss nicht" ]
value_labels = [ "far left (0–2)", "left (3–4)", "center (5)", "right (6–7)", "far right (8–10)", "don't know" ]
value_scale = "ordinal_ascending"
include = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = '04_political_general', v_name = 'left_right_self_positioning', key = 'include') }"
[[y_generated.001_all.001_both.item]]
name.de = "Vertrauen in kantonale Regierung (reduziert)"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('04_political_general', 'z01_trust'), v_name = 'trust_in_cantonal_government', key = 'question') }"
id = "trust_in_cantonal_government_reduced"
description.en = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('04_political_general', 'z01_trust'), v_name = 'trust_in_cantonal_government', key = 'variable_label') %>% paste0(' (reduced)') }"
variable_label_common = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('04_political_general', 'z01_trust'), v_name = 'trust_in_cantonal_government', key = 'variable_label_common') %>% paste0(' (reduced)') }"
response_options = [ "sehr tief (0–2)", "eher tief (3–4)", "mittel (5)", "eher hoch (6–7)", "sehr hoch (8–10)", "weiss nicht" ]
value_labels = [ "very low (0–2)", "rather low (3–4)", "medium (5)", "rather high (6–7)", "very high (8–10)", "don't know" ]
value_scale = "ordinal_ascending"
include = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('04_political_general', 'z01_trust'), v_name = 'trust_in_cantonal_government', key = 'include') }"
[[y_generated.001_all.001_both.item]]
name.de = "Vertrauen in kantonales Parlament (reduziert)"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('04_political_general', 'z01_trust'), v_name = 'trust_in_cantonal_parliament', key = 'question') }"
id = "trust_in_cantonal_parliament_reduced"
description.en = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('04_political_general', 'z01_trust'), v_name = 'trust_in_cantonal_parliament', key = 'variable_label') %>% paste0(' (reduced)') }"
variable_label_common = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('04_political_general', 'z01_trust'), v_name = 'trust_in_cantonal_parliament', key = 'variable_label_common') %>% paste0(' (reduced)') }"
response_options = [ "sehr tief (0–2)", "eher tief (3–4)", "mittel (5)", "eher hoch (6–7)", "sehr hoch (8–10)", "weiss nicht" ]
value_labels = [ "very low (0–2)", "rather low (3–4)", "medium (5)", "rather high (6–7)", "very high (8–10)", "don't know" ]
value_scale = "ordinal_ascending"
include = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('04_political_general', 'z01_trust'), v_name = 'trust_in_cantonal_parliament', key = 'include') }"
[[y_generated.001_all.001_both.item]]
name.de = "Vertrauen in Schweizer Demokratie (reduziert)"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('04_political_general', 'z01_trust'), v_name = 'trust_in_swiss_democracy', key = 'question') }"
id = "trust_in_swiss_democracy_reduced"
description.en = "respondent's trust in the Swiss democracy (reduced)"
response_options = [ "sehr tief (0–2)", "eher tief (3–4)", "mittel (5)", "eher hoch (6–7)", "sehr hoch (8–10)", "weiss nicht" ]
value_labels = [ "very low (0–2)", "rather low (3–4)", "medium (5)", "rather high (6–7)", "very high (8–10)", "don't know" ]
value_scale = "ordinal_ascending"
include = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('04_political_general', 'z01_trust'), v_name = 'trust_in_swiss_democracy', key = 'include') }"
[[y_generated.001_all.001_both.item]]
name.de = "Teilnahme eidgenössisch"
id = "participation_federal"
variable_label.election = "respondent's participation status regarding the federal elections of the current ballot (blank votes count as 'participated')"
variable_label.referendum = "respondent's participation status regarding the federal proposals of the current ballot (blank votes count as 'participated')"
variable_label_common = "respondent's participation status regarding the federal proposals/elections of the current ballot (blank votes count as 'participated')"
response_options = [ "nicht teilgenommen", "teilgenommen" ]
value_labels = [ "not participated", "participated" ]
value_scale = "binary"
include = "{ any(has_lvl(ballot_date = ballot_date, lvl = 'federal', canton = canton)) }"
[[y_generated.001_all.001_both.item]]
name.de = "Teilnahme kantonal"
id = "participation_cantonal"
variable_label.election = "respondent's participation status regarding the cantonal elections of the current ballot (blank votes count as 'participated')"
variable_label.referendum = "respondent's participation status regarding the cantonal proposals of the current ballot (blank votes count as 'participated')"
variable_label_common = "respondent's participation status regarding the cantonal proposals/elections of the current ballot (blank votes count as 'participated')"
response_options = [ "nicht teilgenommen", "teilgenommen" ]
value_labels = [ "not participated", "participated" ]
value_scale = "binary"
include = "{ any(has_lvl(ballot_date = ballot_date, lvl = 'cantonal', canton = canton)) }"
[[y_generated.001_all.001_both.item]]
name.de = "Materielle Teilnahme"
id = "participation_substantive"
description.en = "respondent's _substantive_ participation status at the current ballot (blank votes count as 'not participated')"
response_options = [ "nicht teilgenommen", "teilgenommen" ]
value_labels = [ "not participated", "participated" ]
value_scale = "binary"
[[y_generated.001_all.001_both.item]]
name.de = "Materielle Teilnahme eidgenössisch"
id = "participation_substantive_federal"
variable_label.election = "respondent's _substantive_ participation status regarding the federal elections of the current ballot (blank votes count as 'not participated')"
variable_label.referendum = "respondent's _substantive_ participation status regarding the federal proposals of the current ballot (blank votes count as 'not participated')"
variable_label_common = "respondent's _substantive_ participation status regarding the federal proposals/elections of the current ballot (blank votes count as 'not participated')"
response_options = [ "nicht teilgenommen", "teilgenommen" ]
value_labels = [ "not participated", "participated" ]
value_scale = "binary"
include = "{ any(has_lvl(ballot_date = ballot_date, lvl = 'federal', canton = canton)) }"
[[y_generated.001_all.001_both.item]]
name.de = "Materielle Teilnahme kantonal"
id = "participation_substantive_cantonal"
variable_label.election = "respondent's _substantive_ participation status regarding the cantonal elections of the current ballot (blank votes count as 'not participated')"
variable_label.referendum = "respondent's _substantive_ participation status regarding the cantonal proposals of the current ballot (blank votes count as 'not participated')"
variable_label_common = "respondent's _substantive_ participation status regarding the cantonal proposals/elections of the current ballot (blank votes count as 'not participated')"
response_options = [ "nicht teilgenommen", "teilgenommen" ]
value_labels = [ "not participated", "participated" ]
value_scale = "binary"
include = "{ any(has_lvl(ballot_date = ballot_date, lvl = 'cantonal', canton = canton)) }"
[[y_generated.001_all.001_both.item]]
name.de = "Empfang der [«easyvote»-Broschüre](https://www.easyvote.ch/de/f/angebote/broschuere) (Dummy)"
id = "receives_easyvote_booklet"
description.en = "dummy value indicating whether or not the respondent automatically receives the [\"easyvote\" booklet](https://www.easyvote.ch/de/f/angebote/broschuere) by postal mail (requires that the respondent's municipality has subscribed to this service _for the respondent's age range_)"
response_options = [ "erhält keine «easyvote»-Broschüre von der Gemeinde", "erhält «easyvote»-Broschüre von der Gemeinde" ]
value_labels = [ "receives no \"easyvote\" booklet from the municipality", "receives \"easyvote\" booklet from the municipality" ]
value_scale = "binary"
include = "{ all(q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('x_polling_agency', '001_all'), v_name = 'easyvote_municipality_min_age', key = 'include'), q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('x_polling_agency', '001_all'), v_name = 'easyvote_municipality_max_age', key = 'include')) }"
[[y_generated.001_all.001_both.item]]
name.de = "Kontrolle Geschlecht"
id = "matches_sex"
description.en = "dummy value indicating whether or not the respondent's own statement about his/her sex matches the official cantonal register information"
response_options = [ "Divergenz", "Übereinstimmung" ]
value_labels = [ "mismatch", "match" ]
value_scale = "binary"
include = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('00_cantonal_statistical_office', '003_to_zda'), v_name = 'sex_official', key = 'include') }"
[[y_generated.001_all.001_both.item]]
name.de = "Kontrolle Geburtsjahr"
id = "birth_year_divergence"
description.en = "difference in years between the respondent's own statement about his/her year of birth and the official cantonal register information"
response_options = "_Ganzzahl_"
value_scale = "interval"
include = "{ all(q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('00_cantonal_statistical_office', '003_to_zda'), v_name = 'year_of_birth_official', key = 'include'), q_item_val(ballot_date = ballot_date, canton = canton, branch_path = '01_personal', v_name = 'year_of_birth', key = 'include')) }"

[y_generated.001_all.002_referendum]
ballot_types = [ "referendum" ]
[[y_generated.001_all.002_referendum.item]]
lvl = """
{
  all_lvls %>%
    magrittr::set_names(., .) %>%
    purrr::map_lgl(~ q_item_val(ballot_date = ballot_date,
                                canton = canton,
                                branch_path = c('03_proposal_specific', '002_all', '001_importance'),
                                v_name = glue::glue('importance_{.x}_proposal_{{i}}'),
                                key = 'include',
                                i = i)) %>%
    which() %>%
    names()
}"""
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = lvl, canton = canton) }"
name.de = "Wichtigkeit {switch(lvl, cantonal = 'kantonale', federal = 'eidgenössische')} Vorlage {i} (reduziert)"
question = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_proposal_specific', '002_all', '001_importance'), v_name = glue::glue('importance_{lvl}_proposal_{{i}}'), key = 'question', i = i) }"
question_common = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('03_proposal_specific', '002_all', '001_importance'), v_name = glue::glue('importance_{lvl}_proposal_{{i}}'), key = 'question_common', i = i) }"
id = "importance_{lvl}_proposal_{i}_reduced"
description.en = "importance (reduced) the respondent attaches to the {lvl} proposal \"{ proposal_name(ballot_date = ballot_date, lvl = lvl, canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "importance (reduced) the respondent attaches to the { salim::rank_nr(i) } {lvl} proposal"
response_options = [ "sehr gering (0–2)", "eher gering (3–4)", "mittel (5)", "eher hoch (6–7)", "sehr hoch (8–10)", "weiss nicht" ]
value_labels = [ "very low (0–2)", "rather low (3–4)", "medium (5)", "rather high (6–7)", "very high (8–10)", "don't know" ]
value_scale = "ordinal_ascending"

[y_generated.001_all.003_election]
ballot_types = [ "election" ]
[y_generated.001_all.003_election.001_passed_skill_question]
response_options = [ "falsch", "richtig" ]
value_labels = [ "wrong", "correct" ]
value_scale = "binary"
[[y_generated.001_all.003_election.001_passed_skill_question.item]]
i = "{ skill_question_nrs(canton = canton, ballot_date = ballot_date, lvl = 'federal') }"
name.de = "Wissensfrage {i} zur eidgenössischen Politik bestanden (Dummy)"
question = "_{ skill_question(ballot_date = ballot_date, lvl = 'federal', canton = canton, skill_question_nr = i, lang = 'de') }_"
question_common = "Wissensfrage {i} zur eidgenössischen Politik bestanden?"
id = "passed_skill_question_{i}_federal"
description.en = "dummy value indicating whether or not the respondent answered the skill question \"{ skill_question(ballot_date = ballot_date, lvl = 'federal', canton = canton, skill_question_nr = i, lang = 'en') }\" about the federal political system correctly"
variable_label_common = "dummy value indicating whether or not the respondent answered the { salim::rank_nr(i) } skill questions about the federal political system correctly"
[[y_generated.001_all.003_election.001_passed_skill_question.item]]
i = "{ skill_question_nrs(canton = canton, ballot_date = ballot_date, lvl = 'cantonal') }"
name.de = "Wissensfrage {i} zur kantonalen Politik bestanden (Dummy)"
question = "_{ skill_question(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, skill_question_nr = i, lang = 'de') }_"
question_common = "Wissensfrage {i} zur kantonalen Politik bestanden?"
id = "passed_skill_question_{i}_cantonal"
description.en = "dummy value indicating whether or not the respondent answered the skill question \"{ skill_question(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, skill_question_nr = i, lang = 'en') }\" about the cantonal political system correctly"
variable_label_common = "dummy value indicating whether or not the respondent answered the { salim::rank_nr(i) } skill questions about the cantonal political system correctly"
[[y_generated.001_all.003_election.item]]
name.de = "Latente Expertise eidgenössische Politik (kontinuierlich)"
id = "latent_expertise_federal"
description.en = "respondent's latent expertise on the federal political system (based on a 2–3 parameter[^irt-params] logistic [Item Response Theory (IRT)](https://en.wikipedia.org/wiki/Item_response_theory) model, also known as _Birnbaum_ model, fed with { paste0('`passed_skill_question_', skill_question_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton), '_federal`') %>% pal::prose_ls() })"
variable_label_common = "respondent's latent expertise on the cantonal political system (based on a 2–3 parameter[^irt-params] logistic [Item Response Theory (IRT)](https://en.wikipedia.org/wiki/Item_response_theory) model, also known as _Birnbaum_ model, fed with all `passed_skill_question_*_federal`)"
response_options = "_Gleitkommazahl_"
value_scale = "interval"
include = "{ n_skill_questions(ballot_date = ballot_date, lvl = 'federal', canton = canton) > 0L }"
[[y_generated.001_all.003_election.item]]
name.de = "Latente Expertise eidgenössische Politik (5 Kategorien)"
id = "latent_expertise_federal_5cat"
description.en = "respondent's latent expertise on the federal political system, measured in 5 discrete categories (based on `latent_expertise_federal`)"
response_options = [ "sehr gering", "eher gering", "mittel", "eher hoch", "sehr hoch" ]
value_labels = [ "very low", "rather low", "medium", "rather high", "very high" ]
value_scale = "ordinal_ascending"
include = "{ n_skill_questions(ballot_date = ballot_date, lvl = 'federal', canton = canton) > 0L }"
[[y_generated.001_all.003_election.item]]
name.de = "Latente Expertise kantonale Politik (kontinuierlich)"
id = "latent_expertise_cantonal"
description.en = "respondent's latent expertise on the cantonal political system (based on a 2–3 parameter[^irt-params] logistic [Item Response Theory (IRT)](https://en.wikipedia.org/wiki/Item_response_theory) model, also known as _Birnbaum_ model, fed with { paste0('`passed_skill_question_', skill_question_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton), '_cantonal`') %>% pal::prose_ls() })"
variable_label_common = "respondent's latent expertise on the cantonal political system (based on a 2–3 parameter[^irt-params] logistic [Item Response Theory (IRT)](https://en.wikipedia.org/wiki/Item_response_theory) model, also known as _Birnbaum_ model, fed with all `passed_skill_question_*_cantonal`)"
response_options = "_Gleitkommazahl_"
value_scale = "interval"
include = "{ n_skill_questions(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) > 0L }"
[[y_generated.001_all.003_election.item]]
name.de = "Latente Expertise kantonale Politik (5 Kategorien)"
id = "latent_expertise_cantonal_5cat"
description.en = "respondent's latent expertise on the cantonal political system, measured in 5 discrete categories (based on `latent_expertise_cantonal`)"
response_options = [ "sehr gering", "eher gering", "mittel", "eher hoch", "sehr hoch" ]
value_labels = [ "very low", "rather low", "medium", "rather high", "very high" ]
value_scale = "ordinal_ascending"
include = "{ n_skill_questions(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) > 0L }"
[[y_generated.001_all.003_election.item]]
name.de = "Latente Expertise eidgenössische und kantonale Politik (kontinuierlich)"
id = "latent_expertise"
description.en = "respondent's latent expertise on the cantonal and federal political system together (based on a 2–3 parameter[^irt-params] logistic [Item Response Theory (IRT)](https://en.wikipedia.org/wiki/Item_response_theory) model, also known as _Birnbaum_ model, fed with { paste0('`passed_skill_question_', skill_question_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton), '_federal`') %>% c(paste0('`passed_skill_question_', skill_question_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton), '_cantonal`')) %>% pal::prose_ls() })"
variable_label_common = "respondent's latent expertise on the cantonal and federal political system together (based on a 2–3 parameter[^irt-params] logistic [Item Response Theory (IRT)](https://en.wikipedia.org/wiki/Item_response_theory) model, also known as _Birnbaum_ model, fed with all `passed_skill_question_*_federal` and `passed_skill_question_*_cantonal`)"
response_options = "_Gleitkommazahl_"
value_scale = "interval"
include = "{ n_skill_questions(ballot_date = ballot_date, lvl = 'federal', canton = canton) > 0L || n_skill_questions(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) > 0L }"
[[y_generated.001_all.003_election.item]]
name.de = "Latente Expertise eidgenössische und kantonale Politik (5 Kategorien)"
id = "latent_expertise_5cat"
description.en = "respondent's latent expertise on the cantonal and federal political system together, measured in 5 discrete categories (based on `latent_expertise`)"
response_options = [ "sehr gering", "eher gering", "mittel", "eher hoch", "sehr hoch" ]
value_labels = [ "very low", "rather low", "medium", "rather high", "very high" ]
value_scale = "ordinal_ascending"
include = "{ n_skill_questions(ballot_date = ballot_date, lvl = 'federal', canton = canton) > 0L || n_skill_questions(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) > 0L }"

[y_generated.002_participants]
who = "Teilnehmende"
[y_generated.002_participants.002_referendum]
ballot_types = [ "referendum" ]
[[y_generated.002_participants.002_referendum.item]]
i = "{ skill_question_proposal_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton) }"
j = "{ skill_question_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i) }"
name.de = "Wissensfrage {j} eidgenössische Vorlage {i} bestanden (Dummy)"
question = "_{ skill_question(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, skill_question_nr = j, lang = 'de') }_"
question_common = "Wissensfrage {j} zur eidgenössischen Vorlage {i} bestanden"
id = "passed_skill_question_{j}_federal_proposal_{i}"
description.en = "dummy value indicating whether or not the respondent answered the skill question \"{ skill_question(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, skill_question_nr = j, lang = 'en') }\" about the federal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\" correctly"
variable_label_common = "dummy value indicating whether or not the respondent answered the { salim::rank_nr(j) } skill questions about the { salim::rank_nr(i) } federal proposal correctly"
response_options = [ "falsch", "richtig" ]
value_labels = [ "wrong", "correct" ]
value_scale = "binary"
[[y_generated.002_participants.002_referendum.item]]
i = "{ skill_question_proposal_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) }"
j = "{ skill_question_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i) }"
name.de = "Wissensfrage {j} kantonale Vorlage {i} bestanden (Dummy)"
question = "_{ skill_question(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, skill_question_nr = j, lang = 'de') }_"
question_common = "Wissensfrage {j} zur kantonalen Vorlage {i} bestanden"
id = "passed_skill_question_{j}_cantonal_proposal_{i}"
description.en = "dummy value indicating whether or not the respondent answered the skill question \"{ skill_question(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, skill_question_nr = j, lang = 'en') }\" about the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\" correctly"
variable_label_common = "dummy value indicating whether or not the respondent answered the { salim::rank_nr(j) } skill questions about the { salim::rank_nr(i) } cantonal proposal correctly"
response_options = [ "falsch", "richtig" ]
value_labels = [ "wrong", "correct" ]
value_scale = "binary"
[[y_generated.002_participants.002_referendum.item]]
i = "{ skill_question_proposal_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) }"
name.de = "Latente Expertise kantonale Vorlage {i} (kontinuierlich)"
id = "latent_expertise_cantonal_proposal_{i}"
description.en = "respondent's latent expertise on the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\" (based on a 2–3 parameter[^irt-params] logistic [Item Response Theory (IRT)](https://en.wikipedia.org/wiki/Item_response_theory) model, also known as _Birnbaum_ model, fed with { paste0('`passed_skill_question_', skill_question_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i), '_cantonal_proposal_', i, '`') %>% pal::prose_ls() })"
variable_label_common = "respondent's latent expertise on the { salim::rank_nr(i) } cantonal proposal (based on a 2–3 parameter[^irt-params] logistic [Item Response Theory (IRT)](https://en.wikipedia.org/wiki/Item_response_theory) model, also known as _Birnbaum_ model, fed with all `passed_skill_question_*_cantonal_proposal_{i}`)"
response_options = "_Gleitkommazahl_"
value_scale = "interval"
[[y_generated.002_participants.002_referendum.item]]
i = "{ skill_question_proposal_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton) }"
name.de = "Latente Expertise eidgenössische Vorlage {i} (kontinuierlich)"
id = "latent_expertise_federal_proposal_{i}"
description.en = "respondent's latent expertise on the federal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\" (based on a 2–3 parameter[^irt-params] logistic [Item Response Theory (IRT)](https://en.wikipedia.org/wiki/Item_response_theory) model, also known as _Birnbaum_ model, fed with { paste0('`passed_skill_question_', skill_question_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i), '_federal_proposal_', i, '`') %>% pal::prose_ls() })"
variable_label_common = "respondent's latent expertise on the { salim::rank_nr(i) } federal proposal (based on a 2–3 parameter[^irt-params] logistic [Item Response Theory (IRT)](https://en.wikipedia.org/wiki/Item_response_theory) model, also known as _Birnbaum_ model, fed with all `passed_skill_question_*_federal_proposal_{i}`)"
response_options = "_Gleitkommazahl_"
value_scale = "interval"
[[y_generated.002_participants.002_referendum.item]]
i = "{ skill_question_proposal_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) }"
name.de = "Latente Expertise kantonale Vorlage {i} (5 Kategorien)"
id = "latent_expertise_cantonal_proposal_{i}_5cat"
description.en = "respondent's latent expertise on the cantonal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\", measured in 5 discrete categories (based on `latent_expertise_cantonal_proposal_{i}`)"
variable_label_common = "respondent's latent expertise on the { salim::rank_nr(i) } cantonal proposal, measured in 5 discrete categories (based on `latent_expertise_cantonal_proposal_{i}`)"
response_options = [ "sehr gering", "eher gering", "mittel", "eher hoch", "sehr hoch" ]
value_labels = [ "very low", "rather low", "medium", "rather high", "very high" ]
value_scale = "ordinal_ascending"
[[y_generated.002_participants.002_referendum.item]]
i = "{ skill_question_proposal_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton) }"
name.de = "Latente Expertise eidgenössische Vorlage {i} (5 Kategorien)"
id = "latent_expertise_federal_proposal_{i}_5cat"
description.en = "respondent's latent expertise on the federal proposal \"{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'long') }\", measured in 5 discrete categories (based on `latent_expertise_federal_proposal_{i}`)"
variable_label_common = "respondent's latent expertise on the { salim::rank_nr(i) } federal proposal, measured in 5 discrete categories (based on `latent_expertise_federal_proposal_{i}`)"
response_options = [ "sehr gering", "eher gering", "mittel", "eher hoch", "sehr hoch" ]
value_labels = [ "very low", "rather low", "medium", "rather high", "very high" ]
value_scale = "ordinal_ascending"
[[y_generated.002_participants.002_referendum.item]]
name.de = "Latente Expertise kantonale Vorlagen (kontinuierlich)"
id = "latent_expertise_cantonal_proposals"
description.en = """
respondent's latent expertise on all cantonal proposals together (based on a 2–3 parameter[^irt-params] logistic [Item Response Theory (IRT)](https://en.wikipedia.org/wiki/Item_response_theory) model, also known as _Birnbaum_ model, fed with {
  skill_question_proposal_nrs(ballot_date = ballot_date,
                              lvl = 'cantonal',
                              canton = canton) %>%
    purrr::map(~ paste0('`passed_skill_question_',
                        skill_question_nrs(ballot_date = ballot_date,
                                           lvl = 'cantonal',
                                           canton = canton,
                                           proposal_nr = .x),
                        '_cantonal_proposal_',
                        .x,
                        '`')) %>%
    purrr::flatten_chr() %>%
    pal::prose_ls()
})"""
variable_label_common = "respondent's latent expertise on all cantonal proposals together (based on a 2–3 parameter[^irt-params] logistic [Item Response Theory (IRT)](https://en.wikipedia.org/wiki/Item_response_theory) model, also known as _Birnbaum_ model, fed with all `passed_skill_question_*_cantonal_proposal_*`)"
response_options = "_Gleitkommazahl_"
value_scale = "interval"
include = "{ n_proposals(ballot_date = ballot_date, lvls = 'cantonal') %>% seq_len() %>% purrr::map_int(.f = n_skill_questions, canton = canton, ballot_date = ballot_date, lvl = 'cantonal') %>% magrittr::is_greater_than(0L) %>% any() }"
[[y_generated.002_participants.002_referendum.item]]
name.de = "Latente Expertise eidgenössische Vorlagen (kontinuierlich)"
id = "latent_expertise_federal_proposals"
description.en = """
respondent's latent expertise on all federal proposals together (based on a 2–3 parameter[^irt-params] logistic [Item Response Theory (IRT)](https://en.wikipedia.org/wiki/Item_response_theory) model, also known as _Birnbaum_ model, fed with {
  skill_question_proposal_nrs(ballot_date = ballot_date,
                              lvl = 'federal',
                              canton = canton) %>%
    purrr::map(~ paste0('`passed_skill_question_',
                        skill_question_nrs(ballot_date = ballot_date,
                                           lvl = 'federal',
                                           canton = canton,
                                           proposal_nr = .x),
                        '_federal_proposal_',
                        .x,
                        '`')) %>%
    purrr::flatten_chr() %>%
    pal::prose_ls()
})"""
variable_label_common = "respondent's latent expertise on all federal proposals together (based on a 2–3 parameter[^irt-params] logistic [Item Response Theory (IRT)](https://en.wikipedia.org/wiki/Item_response_theory) model, also known as _Birnbaum_ model, fed with all `passed_skill_question_*_federal_proposal_*`)"
response_options = "_Gleitkommazahl_"
value_scale = "interval"
include = "{ n_proposals(ballot_date = ballot_date, lvls = 'federal') %>% seq_len() %>% purrr::map_int(.f = n_skill_questions, canton = canton, ballot_date = ballot_date, lvl = 'federal') %>% magrittr::is_greater_than(0L) %>% any() }"
[[y_generated.002_participants.002_referendum.item]]
name.de = "Latente Expertise kantonale Vorlagen (5 Kategorien)"
id = "latent_expertise_cantonal_proposals_5cat"
description.en = "respondent's latent expertise on all cantonal proposals together, measured in 5 discrete categories (based on `latent_expertise_cantonal_proposals`)"
response_options = [ "sehr gering", "eher gering", "mittel", "eher hoch", "sehr hoch" ]
value_labels = [ "very low", "rather low", "medium", "rather high", "very high" ]
value_scale = "ordinal_ascending"
include = "{ n_proposals(ballot_date = ballot_date, lvls = 'cantonal') %>% seq_len() %>% purrr::map_int(.f = n_skill_questions, canton = canton, ballot_date = ballot_date, lvl = 'cantonal') %>% magrittr::is_greater_than(0L) %>% any() }"
[[y_generated.002_participants.002_referendum.item]]
name.de = "Latente Expertise eidgenössische Vorlagen (5 Kategorien)"
id = "latent_expertise_federal_proposals_5cat"
description.en = "respondent's latent expertise on all federal proposals together, measured in 5 discrete categories (based on `latent_expertise_federal_proposals`)"
response_options = [ "sehr gering", "eher gering", "mittel", "eher hoch", "sehr hoch" ]
value_labels = [ "very low", "rather low", "medium", "rather high", "very high" ]
value_scale = "ordinal_ascending"
include = "{ n_proposals(ballot_date = ballot_date, lvls = 'federal') %>% seq_len() %>% purrr::map_int(.f = n_skill_questions, canton = canton, ballot_date = ballot_date, lvl = 'federal') %>% magrittr::is_greater_than(0L) %>% any() }"

[y_generated.002_participants.003_election]
ballot_types = [ "election" ]
response_options = [ "nicht gewählt", "gewählt" ]
value_labels = [ "not voted for", "voted for" ]
value_scale = "binary"
[y_generated.002_participants.003_election.001_federal]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'majoritarian') }"
[[y_generated.002_participants.003_election.001_federal.item]]
j = "{ seq_len(n_election_candidates(canton = canton, ballot_date = ballot_date, lvl = 'federal', election_nr = i)) }"
name.de = "Stimmentscheid eidgenössische Mehrheitswahl {i} KandidatIn {j} (Dummy)"
id = "voting_decision_federal_majoritarian_election_{i}_candidate_{j}"
description.en = "dummy value indicating whether or not the respondent voted for the candidate \"{ election_candidate_prose(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i, candidate_nrs = j) }\" in the federal majoritarian election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "dummy value indicating whether or not the respondent voted for the { salim::rank_nr(j) } candidate in the { salim::rank_nr(i) } federal majoritarian election"
[[y_generated.002_participants.003_election.001_federal.item]]
name.de = "Stimmentscheid eidgenössische Mehrheitswahl {i} vereinzelte (nicht bei Wahlbehörde registrierte) KandidatInnen (Dummy)"
id = "voting_decision_federal_majoritarian_election_{i}_candidate_other"
description.en = "dummy value indicating whether or not the respondent voted for stray candidates (not registered with the electoral authority) in the federal majoritarian election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "dummy value indicating whether or not the respondent voted for stray candidates (not registered with the electoral authority) in the { salim::rank_nr(i) } federal majoritarian election"
[y_generated.002_participants.003_election.002_cantonal]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'majoritarian') }"
[[y_generated.002_participants.003_election.002_cantonal.item]]
j = "{ seq_len(n_election_candidates(canton = canton, ballot_date = ballot_date, lvl = 'cantonal', election_nr = i)) }"
name.de = "Stimmentscheid kantonale Mehrheitswahl {i} KandidatIn {j} (Dummy)"
id = "voting_decision_cantonal_majoritarian_election_{i}_candidate_{j}"
description.en = "dummy value indicating whether or not the respondent voted for the candidate \"{ election_candidate_prose(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i, candidate_nrs = j) }\" in the cantonal majoritarian election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "dummy value indicating whether or not the respondent voted for the { salim::rank_nr(j) } candidate in the { salim::rank_nr(i) } cantonal majoritarian election"
[[y_generated.002_participants.003_election.002_cantonal.item]]
name.de = "Stimmentscheid kantonale Mehrheitswahl {i} vereinzelte (nicht bei Wahlbehörde registrierte) KandidatInnen (Dummy)"
id = "voting_decision_cantonal_majoritarian_election_{i}_candidate_other"
description.en = "dummy value indicating whether or not the respondent voted for stray candidates (not registered with the electoral authority) in the cantonal majoritarian election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'long') }\""
variable_label_common = "dummy value indicating whether or not the respondent voted for stray candidates (not registered with the electoral authority) in the { salim::rank_nr(i) } cantonal majoritarian election"

[y_generated.003_qualified_non_participants]
who = "qualifizierte Nicht-Teilnehmende"
[y_generated.003_qualified_non_participants.003_election]
ballot_types = [ "election" ]
response_options = [ "nicht gewählt", "gewählt" ]
value_labels = [ "not voted for", "voted for" ]
value_scale = "binary"
[y_generated.003_qualified_non_participants.003_election.001_federal]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'majoritarian') }"
[[y_generated.003_qualified_non_participants.003_election.001_federal.item]]
j = "{ seq_len(n_election_candidates(canton = canton, ballot_date = ballot_date, lvl = 'federal', election_nr = i)) }"
name.de = "Hypothetischer Stimmentscheid eidgenössische Mehrheitswahl {i} KandidatIn {j} (Dummy)"
id = "hypothetical_voting_decision_federal_majoritarian_election_{i}_candidate_{j}"
description.en = "dummy value indicating whether or not the respondent would have voted for the candidate \"{ election_candidate_prose(ballot_date = ballot_date, lvl = 'federal', canton = canton, election_nr = i, candidate_nrs = j) }\" in the federal majoritarian election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'long') }\" if the respondent would have participated"
variable_label_common = "dummy value indicating whether or not the respondent would have voted for the { salim::rank_nr(j) } candidate in the { salim::rank_nr(i) } federal majoritarian election if the respondent would have participated"
[[y_generated.003_qualified_non_participants.003_election.001_federal.item]]
name.de = "Hypothetischer Stimmentscheid eidgenössische Mehrheitswahl {i} vereinzelte (nicht bei Wahlbehörde registrierte) KandidatInnen (Dummy)"
id = "hypothetical_voting_decision_federal_majoritarian_election_{i}_candidate_other"
description.en = "dummy value indicating whether or not the respondent would have voted for stray candidates (not registered with the electoral authority) in the federal majoritarian election \"{ election_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'long') }\" if the respondent would have participated"
variable_label_common = "dummy value indicating whether or not the respondent would have voted for stray candidates (not registered with the electoral authority) in the { salim::rank_nr(i) } federal majoritarian election if the respondent would have participated"
[y_generated.003_qualified_non_participants.003_election.002_cantonal]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'majoritarian') }"
[[y_generated.003_qualified_non_participants.003_election.002_cantonal.item]]
j = "{ seq_len(n_election_candidates(canton = canton, ballot_date = ballot_date, lvl = 'cantonal', election_nr = i)) }"
name.de = "Hypothetischer Stimmentscheid kantonale Mehrheitswahl {i} KandidatIn {j} (Dummy)"
id = "hypothetical_voting_decision_cantonal_majoritarian_election_{i}_candidate_{j}"
description.en = "dummy value indicating whether or not the respondent would have voted for the candidate \"{ election_candidate_prose(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, election_nr = i, candidate_nrs = j) }\" in the cantonal majoritarian election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'long') }\" if the respondent would have participated"
variable_label_common = "dummy value indicating whether or not the respondent would have voted for the { salim::rank_nr(j) } candidate in the { salim::rank_nr(i) } cantonal majoritarian election if the respondent would have participated"
[[y_generated.003_qualified_non_participants.003_election.002_cantonal.item]]
name.de = "Hypothetischer Stimmentscheid kantonale Mehrheitswahl {i} vereinzelte (nicht bei Wahlbehörde registrierte) KandidatInnen (Dummy)"
id = "hypothetical_voting_decision_cantonal_majoritarian_election_{i}_candidate_other"
description.en = "dummy value indicating whether or not the respondent would have voted for stray candidates (not registered with the electoral authority) in the cantonal majoritarian election \"{ election_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'majoritarian', election_nr = i, lang = 'de', type = 'long') }\" if the respondent would have participated"
variable_label_common = "dummy value indicating whether or not the respondent would have voted for stray candidates (not registered with the electoral authority) in the { salim::rank_nr(i) } cantonal majoritarian election if the respondent would have participated"

[y_generated.008_online]
who = "Online-Respondenten"
[y_generated.008_online.001_both]
ballot_types = [ "referendum", "election" ]
[[y_generated.008_online.001_both.item]]
name.de = "Mobilgerätenutzer (Dummy)"
id = "uses_mobile_device"
description.en = "dummy value indicating whether or not the User-Agent string of the respondent's web browser corresponds to a mobile device (smartphone, tablet etc.)"
response_options = [ "Nicht-Mobilgerät", "Mobilgerät" ]
value_labels = [ "non-mobile device", "mobile device" ]
value_scale = "binary"

[y_generated.100_weighting]
response_options = "_Gleitkommazahl_"
value_scale = "interval"
[y_generated.100_weighting.001_all]
who = "alle"
[[y_generated.100_weighting.001_all.item]]
name.de = "Gewichtung nach Teilnahme"
id = "weight_participation"
description.en = "the weight assigned to the respondent as a result of the weighting by `participation` (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
[y_generated.100_weighting.002_participants]
who = "Teilnehmende"
[y_generated.100_weighting.002_participants.001_referendum]
ballot_types = [ "referendum" ]
[[y_generated.100_weighting.002_participants.001_referendum.item]]
name.de = "Gewichtung nach Stimmentscheiden"
id = "weight_decision"
description.en = """
the weight assigned to the respondent as a result of the weighting by {
  n_proposals(ballot_date = ballot_date,
              lvls = 'federal',
              canton = canton) %>%
    seq_len() %>%
    purrr::map_chr(~ paste0('`voting_decision_federal_proposal_', .x, '`')) %>%
    c(n_proposals(ballot_date = ballot_date,
                  lvls = 'cantonal',
                  canton = canton) %>%
        seq_len() %>%
        purrr::map_chr(~ paste0('`voting_decision_cantonal_proposal_', .x, '`'))) %>%
    pal::prose_ls()
} (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"""
variable_label_common = "the weight assigned to the respondent as a result of the weighting by all voting decisions in the current `ballot_date` (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
[y_generated.100_weighting.002_participants.002_election]
ballot_types = [ "election" ]
[[y_generated.100_weighting.002_participants.002_election.item]]
name.de = "Gewichtung nach gegenwärtigen Wahlentscheiden"
id = "weight_decision"
description.en = """
the weight assigned to the respondent as a result of the weighting by {
  n_elections(ballot_date = ballot_date,
              lvls = 'federal',
              canton = canton,
              prcds = 'proportional') %>%
    seq_len() %>%
    purrr::map_chr(~ paste0('`voting_decision_federal_proportional_election_', .x, '_party`')) %>%
    c(n_elections(ballot_date = ballot_date,
                  lvls = 'federal',
                  canton = canton,
                  prcds = 'majoritarian') %>%
        seq_len() %>%
        purrr::map(function(i) n_election_seats(ballot_date = ballot_date,
                                                lvl = 'federal',
                                                canton = canton,
                                                election_nr = i,
                                                type = 'vacant') %>%
                                 seq_len() %>%
                                 purrr::map_chr(~ paste0('`voting_decision_federal_majoritarian_election_', i, '_seat_', .x, '`'))) %>%
        purrr::flatten_chr()) %>%
    c(n_elections(ballot_date = ballot_date,
                  lvls = 'cantonal',
                  canton = canton,
                  prcds = 'proportional') %>%
        seq_len() %>%
        purrr::map_chr(~ paste0('`voting_decision_cantonal_proportional_election_', .x, '_party`'))) %>%
    c(n_elections(ballot_date = ballot_date,
                  lvls = 'cantonal',
                  canton = canton,
                  prcds = 'majoritarian') %>%
        seq_len() %>%
        purrr::map(function(i) n_election_seats(ballot_date = ballot_date,
                                                lvl = 'cantonal',
                                                canton = canton,
                                                election_nr = i,
                                                type = 'vacant') %>%
                                 seq_len() %>%
                                 purrr::map_chr(~ paste0('`voting_decision_cantonal_majoritarian_election_', i, '_seat_', .x, '`'))) %>%
        purrr::flatten_chr()) %>%
    pal::prose_ls()
} (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"""
variable_label_common = "the weight assigned to the respondent as a result of the weighting by all voting decisions in the current `ballot_date` (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
[[y_generated.100_weighting.002_participants.002_election.item]]
name.de = "Gewichtung nach gegenwärtigen und vergangenen Wahlentscheiden"
id = "weight_decision_incl_past"
description.en = """
the weight assigned to the respondent as a result of the weighting by {
  n_elections(ballot_date = ballot_date,
              lvls = 'federal',
              canton = canton,
              prcds = 'proportional') %>%
    seq_len() %>%
    purrr::map(~ paste0('`voting_decision_', c('', 'past_'), 'federal_proportional_election_', .x, '_party`')) %>%
    purrr::flatten_chr() %>%
    c(n_elections(ballot_date = ballot_date,
                  lvls = 'federal',
                  canton = canton,
                  prcds = 'majoritarian') %>%
        seq_len() %>%
        purrr::map(function(i) n_election_seats(ballot_date = ballot_date,
                                                lvl = 'federal',
                                                canton = canton,
                                                election_nr = i,
                                                type = 'vacant') %>%
                                 seq_len() %>%
                                 purrr::map_chr(~ paste0('`voting_decision_federal_majoritarian_election_', i, '_seat_', .x, '`'))) %>%
        purrr::flatten_chr()) %>%
    c(n_elections(ballot_date = ballot_date,
                  lvls = 'cantonal',
                  canton = canton,
                  prcds = 'proportional') %>%
        seq_len() %>%
        purrr::map(~ paste0('`voting_decision_', c('', 'past_'), 'cantonal_proportional_election_', .x, '_party`')) %>%
        purrr::flatten_chr()) %>%
    c(n_elections(ballot_date = ballot_date,
                  lvls = 'cantonal',
                  canton = canton,
                  prcds = 'majoritarian') %>%
        seq_len() %>%
        purrr::map(function(i) n_election_seats(ballot_date = ballot_date,
                                                lvl = 'cantonal',
                                                canton = canton,
                                                election_nr = i,
                                                type = 'vacant') %>%
                                 seq_len() %>%
                                 purrr::map_chr(~ paste0('`voting_decision_cantonal_majoritarian_election_', i, '_seat_', .x, '`'))) %>%
        purrr::flatten_chr()) %>%
    pal::prose_ls()
} (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"""
variable_label_common = "the weight assigned to the respondent as a result of the weighting by all voting decisions including those in past elections (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
include = "{ any(has_election(ballot_date = ballot_date, canton = canton, prcds = 'proportional')) }"
[[y_generated.100_weighting.002_participants.002_election.item]]
name.de = "Gewichtung nach vergangenen Wahlentscheiden"
id = "weight_decision_past"
description.en = """
the weight assigned to the respondent as a result of the weighting by {
  n_elections(ballot_date = ballot_date,
              lvls = 'federal',
              canton = canton,
              prcds = 'proportional') %>%
    seq_len() %>%
    purrr::map_chr(~ paste0('`voting_decision_past_federal_proportional_election_', .x, '_party`')) %>%
    c(n_elections(ballot_date = ballot_date,
                  lvls = 'cantonal',
                  canton = canton,
                  prcds = 'proportional') %>%
        seq_len() %>%
        purrr::map_chr(~ paste0('`voting_decision_past_cantonal_proportional_election_', .x, '_party`'))) %>%
    pal::prose_ls()
} (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"""
variable_label_common = "the weight assigned to the respondent as a result of the weighting by voting decisions in all past elections (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
include = "{ any(has_election(ballot_date = ballot_date, canton = canton, prcds = 'proportional')) }"
[[y_generated.100_weighting.002_participants.002_election.item]]
name.de = "Gewichtung nach Teilnahme sowie gegenwärtigen und vergangenen Wahlentscheiden"
id = "weight_participation_decision"
description.en = """
the weight assigned to the respondent as a result of the weighting by `participation` as well as {
  n_elections(ballot_date = ballot_date,
              lvls = 'federal',
              canton = canton,
              prcds = 'proportional') %>%
    seq_len() %>%
    purrr::map(~ paste0('`voting_decision_', c('', 'past_'), 'federal_proportional_election_', .x, '_party`')) %>%
    purrr::flatten_chr() %>%
    c(n_elections(ballot_date = ballot_date,
                  lvls = 'federal',
                  canton = canton,
                  prcds = 'majoritarian') %>%
        seq_len() %>%
        purrr::map(function(i) n_election_seats(ballot_date = ballot_date,
                                                lvl = 'federal',
                                                canton = canton,
                                                election_nr = i,
                                                type = 'vacant') %>%
                                 seq_len() %>%
                                 purrr::map_chr(~ paste0('`voting_decision_federal_majoritarian_election_', i, '_seat_', .x, '`'))) %>%
        purrr::flatten_chr()) %>%
    c(n_elections(ballot_date = ballot_date,
                  lvls = 'cantonal',
                  canton = canton,
                  prcds = 'proportional') %>%
        seq_len() %>%
        purrr::map(~ paste0('`voting_decision_', c('', 'past_'), 'cantonal_proportional_election_', .x, '_party`')) %>%
        purrr::flatten_chr()) %>%
    c(n_elections(ballot_date = ballot_date,
                  lvls = 'cantonal',
                  canton = canton,
                  prcds = 'majoritarian') %>%
        seq_len() %>%
        purrr::map(function(i) n_election_seats(ballot_date = ballot_date,
                                                lvl = 'cantonal',
                                                canton = canton,
                                                election_nr = i,
                                                type = 'vacant') %>%
                                 seq_len() %>%
                                 purrr::map_chr(~ paste0('`voting_decision_cantonal_majoritarian_election_', i, '_seat_', .x, '`'))) %>%
        purrr::flatten_chr()) %>%
    pal::prose_ls()
} (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"""
variable_label_common = "the weight assigned to the respondent as a result of the weighting by `participation` as well as all voting decisions including those in past ones (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
# not yet implemented...
include = "{ FALSE && any(has_election(ballot_date = ballot_date, canton = canton, prcds = 'proportional')) }"
[[y_generated.100_weighting.002_participants.002_election.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional') }"
name.de = "Gewichtung nach gegenwärtigem und vergangenem Wahlentscheid eidgenössische Verhältniswahl {i}"
id = "weight_decision_federal_proportional_election_{i}_incl_past"
description.en = "the weight assigned to the respondent as a result of the weighting by { paste0('`voting_decision_', c('', 'past_'), 'federal_proportional_election_', i, '_party`') %>% pal::prose_ls() } (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
variable_label_common = "the weight assigned to the respondent as a result of the weighting by the { salim::rank_nr(i) } current and past federal proportional election (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
[[y_generated.100_weighting.002_participants.002_election.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional') }"
name.de = "Gewichtung nach gegenwärtigem und vergangenem Wahlentscheid kantonale Verhältniswahl {i}"
id = "weight_decision_cantonal_proportional_election_{i}_incl_past"
description.en = "the weight assigned to the respondent as a result of the weighting by { paste0('`voting_decision_', c('', 'past_'), 'cantonal_proportional_election_', i, '_party`') %>% pal::prose_ls() } (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
variable_label_common = "the weight assigned to the respondent as a result of the weighting by the { salim::rank_nr(i) } current and past cantonal proportional election (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
[[y_generated.100_weighting.002_participants.002_election.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional') }"
name.de = "Gewichtung nach Teilnahme sowie gegenwärtigem Wahlentscheid kantonale Verhältniswahl {i}"
id = "weight_participation_decision_cantonal_proportional_election_{i}"
description.en = "the weight assigned to the respondent as a result of the weighting by `participation` as well as { glue::glue('`voting_decision_cantonal_proportional_election_{i}_party`') } (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
variable_label_common = "the weight assigned to the respondent as a result of the weighting by `participation` as well as the { salim::rank_nr(i) } cantonal proportional election in the current `ballot_date` (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
[[y_generated.100_weighting.002_participants.002_election.item]]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional') }"
name.de = "Gewichtung nach Teilnahme sowie gegenwärtigem und vergangenem Wahlentscheid kantonale Verhältniswahl {i}"
id = "weight_participation_decision_cantonal_proportional_election_{i}_incl_past"
description.en = "the weight assigned to the respondent as a result of the weighting by `participation` as well as { paste0('`voting_decision_', c('', 'past_'), 'cantonal_proportional_election_', i, '_party`') %>% pal::prose_ls() } (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
variable_label_common = "the weight assigned to the respondent as a result of the weighting by `participation` as well as the { salim::rank_nr(i) } current and past cantonal proportional election (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
[[y_generated.100_weighting.002_participants.003_both.item]]
name.de = "Gewichtung nach COVID-19-Impfung selbst (dichotom)"
id = "weight_vaccination_covid"
description.en = "the weight assigned to the respondent as a result of the weighting by `is_vaccinated_covid` (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
include = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('y_generated', '001_all', '001_both'), v_name = 'is_vaccinated_covid', key = 'include') }"
[[y_generated.100_weighting.002_participants.003_both.item]]
topic.default = "Gewichtung nach Stimm-/Wahlentscheiden und COVID-19-Impfung selbst (dichotom)"
topic.referendum = "Gewichtung nach Stimmentscheiden und COVID-19-Impfung selbst (dichotom)"
topic.election = "Gewichtung nach gegenwärtigen Wahlentscheiden und COVID-19-Impfung selbst (dichotom)"
id = "weight_decision_vaccination_covid"
variable_label.referendum = """
the weight assigned to the respondent as a result of the weighting by {
  n_proposals(ballot_date = ballot_date,
              lvls = 'federal',
              canton = canton) %>%
    seq_len() %>%
    purrr::map_chr(~ paste0('`voting_decision_federal_proposal_', .x, '`')) %>%
    c(n_proposals(ballot_date = ballot_date,
                  lvls = 'cantonal',
                  canton = canton) %>%
        seq_len() %>%
        purrr::map_chr(~ paste0('`voting_decision_cantonal_proposal_', .x, '`'))) %>%
    c('`is_vaccinated_covid`') %>%
    pal::prose_ls()
} (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"""
variable_label.election = """
the weight assigned to the respondent as a result of the weighting by {
  n_elections(ballot_date = ballot_date,
              lvls = 'federal',
              canton = canton,
              prcds = 'proportional') %>%
    seq_len() %>%
    purrr::map_chr(~ paste0('`voting_decision_federal_proportional_election_', .x, '_party`')) %>%
    c(n_elections(ballot_date = ballot_date,
                  lvls = 'federal',
                  canton = canton,
                  prcds = 'majoritarian') %>%
        seq_len() %>%
        purrr::map(function(i) n_election_seats(ballot_date = ballot_date,
                                                lvl = 'federal',
                                                canton = canton,
                                                election_nr = i,
                                                type = 'vacant') %>%
                                 seq_len() %>%
                                 purrr::map_chr(~ paste0('`voting_decision_federal_majoritarian_election_', i, '_seat_', .x, '`'))) %>%
        purrr::flatten_chr()) %>%
    c(n_elections(ballot_date = ballot_date,
                  lvls = 'cantonal',
                  canton = canton,
                  prcds = 'proportional') %>%
        seq_len() %>%
        purrr::map_chr(~ paste0('`voting_decision_cantonal_proportional_election_', .x, '_party`'))) %>%
    c(n_elections(ballot_date = ballot_date,
                  lvls = 'cantonal',
                  canton = canton,
                  prcds = 'majoritarian') %>%
        seq_len() %>%
        purrr::map(function(i) n_election_seats(ballot_date = ballot_date,
                                                lvl = 'cantonal',
                                                canton = canton,
                                                election_nr = i,
                                                type = 'vacant') %>%
                                 seq_len() %>%
                                 purrr::map_chr(~ paste0('`voting_decision_cantonal_majoritarian_election_', i, '_seat_', .x, '`'))) %>%
        purrr::flatten_chr()) %>%
    c('`is_vaccinated_covid`') %>%
    pal::prose_ls()
} (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"""
variable_label_common = "the weight assigned to the respondent as a result of the weighting by all voting decisions in the current `ballot_date` (using an [iterative proportional fitting procedure](https://en.wikipedia.org/wiki/Iterative_proportional_fitting))"
include = "{ q_item_val(ballot_date = ballot_date, canton = canton, branch_path = c('y_generated', '001_all', '001_both'), v_name = 'is_vaccinated_covid', key = 'include') }"


[z_generated]
title = "Vom ZDA generierte Drittvariablen"
intro = """
Die folgenden Elemente des Blockes Z sind gleich wie jene des Blockes Y nicht für die Aufnahme in den Fragebogen vorgesehen und werden dementsprechend auch \
nicht abgefragt. Stattdessen werden sie vom ZDA nach der Befragung generiert. Im Gegensatz zum Block Y beziehen sich die folgenden Elemente _nicht_ auf den \
vom Umfrageinstitut gelieferten Hauptdatensatz. Zur Abgrenzung wird den Elementen des Blockes Z in der Nummerierung (#) die Zahl `4000` vorangestellt."""
prefix = 4000
who = "alle"

[[z_generated.based_on_extra_voting_register_data.item]]
name.de = "Umfrageteilnahme"
id = "survey_participation"
description.en = "dummy value indicating whether or not the proband participated in the survey"
response_options = [ "nicht teilgenommen", "teilgenommen" ]
value_labels = [ "not participated", "participated" ]
value_scale = "binary"
include.false = [ 2018-09-23, 2018-11-25 ]


# values shared across multiple ballot dates
## possible values `who` can have
## NOTE: `who` filters mustn't be date-specific (i.e. no `who.filter.positive.20180923`)!
[[who]]
value.de = "alle"
value.en = "all"
description.de = "Alle Respondenten."
[who.filter]
positive = "dplyr::filter(TRUE)"
negative = "dplyr::filter(FALSE)"

[[who]]
value.de = "Online-Respondenten"
value.en = "online respondents"
description.de = "All jene Respondenten, welche den Fragebogen online ausfüllten (`questionnaire_channel = 1`)."
[who.filter]
positive = "dplyr::filter(questionnaire_channel == 'online')"
negative = "dplyr::filter(questionnaire_channel != 'online')"

[[who]]
value.de = "Print-Respondenten"
value.en = "print respondents"
description.de = "All jene Respondenten, welche den Fragebogen auf Papier ausfüllten (`questionnaire_channel = 2`)."
[who.filter]
positive = "dplyr::filter(questionnaire_channel == 'print')"
negative = "dplyr::filter(questionnaire_channel != 'print')"

[[who]]
value.de = "Teilnehmende"
value.en = "voters"
description.de = "All jene Respondenten, welche die Frage zur Teilnahme (`participation`) mit _teilgenommen_ (`1`) beantwortet haben."
[who.filter.positive]
de = "dplyr::filter(participation == 'teilgenommen')"
en = "dplyr::filter(participation == 'participated')"
[who.filter.negative]
de = "dplyr::filter(participation == 'nicht teilgenommen')"
en = "dplyr::filter(participation == 'not participated')"

[[who]]
value.de = "Nicht-Teilnehmende"
value.en = "non-voters"
description.de = "All jene Respondenten, welche die Frage zur Teilnahme (`participation`) mit _nicht teilgenommen_ (`2`) beantwortet haben."
[who.filter.positive]
de = "dplyr::filter(participation == 'nicht teilgenommen')"
en = "dplyr::filter(participation == 'not participated')"
[who.filter.negative]
de = "dplyr::filter(participation == 'teilgenommen')"
en = "dplyr::filter(participation == 'participated')"

[[who]]
ballot_types = [ "election" ]
value.de = "qualifizierte Nicht-Teilnehmende"
value.en = "qualified non-voters"
description.de = "All jene Nicht-Teilnehmende (`participation = 2`), welche sich aufgrund der Antworten zu den Fragen bezüglich der Gründe der Nicht-Teilnahme für eine hypothetische Teilnahme nicht völlig disqualifizieren (`any(reason_non_participation_(hindrance|ineffectiveness|insignificance|forgetfulness|no_chance) = 1`)."
[who.filter.positive]
de = """
dplyr::filter(participation == 'nicht teilgenommen'
              & dplyr::if_any(matches('^reason_non_participation_(hindrance|ineffectiveness|insignificance|forgetfulness|no_chance)$'),
                              ~ .x == 'trifft zu'))"""
en = """
dplyr::filter(participation == 'not participated'
              & dplyr::if_any(matches('^reason_non_participation_(hindrance|ineffectiveness|insignificance|forgetfulness|no_chance)$'),
                              ~ .x == 'is true'))"""
[who.filter.negative]
de = """
dplyr::filter(dplyr::if_all(matches('^reason_non_participation_(hindrance|ineffectiveness|insignificance|forgetfulness|no_chance)$'),
                            ~ .x %in% c('trifft nicht zu', NA))) %>%
  dplyr::full_join(y = data_fa %>% dplyr::filter(participation == 'teilgenommen'),
                   by = colnames(.))"""
en = """
dplyr::filter(dplyr::if_all(matches('^reason_non_participation_(hindrance|ineffectiveness|insignificance|forgetfulness|no_chance)$'),
                            ~ .x %in% c('is not true', NA))) %>%
  dplyr::full_join(y = data_fa %>% dplyr::filter(participation == 'participated'),
                   by = colnames(.))"""

[[who]]
value.de = "teilnehmende Online-Respondenten"
value.en = "participating online respondents"
description.de = "All jene Online-Respondenten (`questionnaire_channel = 1`), welche die Frage zur Teilnahme (`participation`) mit _teilgenommen_ (`1`) beantwortet haben."
[who.filter.positive]
de = "dplyr::filter(questionnaire_channel == 'online' & participation == 'teilgenommen')"
en = "dplyr::filter(questionnaire_channel == 'online' & participation == 'participated')"
[who.filter.negative]
de = "dplyr::filter(participation == 'nicht teilgenommen' | (participation == 'teilgenommen' & questionnaire_channel != 'online'))"
en = "dplyr::filter(participation == 'not participated' | (participation == 'participated' & questionnaire_channel != 'online'))"

[[who]]
value.de = "kantonal nicht-teilnehmende Online-Respondenten"
value.en = "cantonal non-participating online respondents"
description.de = "All jene Online-Respondenten (`questionnaire_channel = 1`), welche die Frage zur Teilnahme (`participation`) mit _teilgenommen_ (`1`) beantwortet haben, sich jedoch an keiner _kantonalen_ Abstimmung/Wahl beteiligten (`all(voting_decision_cantonal_proposal/*_election_# = 3/88)`)."
[who.filter.positive]
de = """
dplyr::filter(dplyr::if_all(matches('^voting_decision_cantonal_((proposal|proportional_election)|majoritarian_election_\\\\d+_seat)_\\\\d+$'),
                            ~ .x %in% fokus::response_options(type = 'abstain', lang = 'de')))"""
en = """
dplyr::filter(dplyr::if_all(matches('^voting_decision_cantonal_((proposal|proportional_election)|majoritarian_election_\\\\d+_seat)_\\\\d+$'),
                            ~ .x %in% fokus::response_options(type = 'abstain', lang = 'en')))"""
[who.filter.negative]
de = """
dplyr::filter(dplyr::if_any(matches('^voting_decision_cantonal_((proposal|proportional_election)|majoritarian_election_\\\\d+_seat)_\\\\d+$'),
                            ~ is.na(.x) | !(.x %in% fokus::response_options(type = 'abstain', lang = 'de'))))"""
en = """
dplyr::filter(dplyr::if_any(matches('^voting_decision_cantonal_((proposal|proportional_election)|majoritarian_election_\\\\d+_seat)_\\\\d+$'),
                            ~ is.na(.x) | !(.x %in% fokus::response_options(type = 'abstain', lang = 'en'))))"""

[[who]]
value.de = "eidgenössisch und kantonal Teilnehmende"
value.en = "federal and cantonal participants"
description.de = "All jene Respondenten, welche sich sowohl an den _eidgenössischen_ wie auch den _kantonalen_ Abstimmungen/Wahlen beteiligten (`participation = 1 & any(voting_decision_federal_proposal/*_election_# != 3/88) & any(voting_decision_cantonal_proposal/*_election_# != 3/88)`)."
[who.filter.positive]
de = """
dplyr::filter(participation == 'teilgenommen'
              & dplyr::if_any(matches('^voting_decision_federal_(proposal_\\\\d+|(proportional|majoritarian)_election_\\\\d+_(party|ticket|seat_\\\\d+))$'),
                              ~ is.na(.x) | !(.x %in% fokus::response_options(type = 'abstain', lang = 'de')))
              & dplyr::if_any(matches('^voting_decision_cantonal_(proposal_\\\\d+|(proportional|majoritarian)_election_\\\\d+_(party|ticket|seat_\\\\d+))$'),
                              ~ is.na(.x) | !(.x %in% fokus::response_options(type = 'abstain', lang = 'de'))))"""
en = """
dplyr::filter(participation == 'participated'
              & dplyr::if_any(matches('^voting_decision_federal_(proposal_\\\\d+|(proportional|majoritarian)_election_\\\\d+_(party|ticket|seat_\\\\d+))$'),
                              ~ is.na(.x) | !(.x %in% fokus::response_options(type = 'abstain', lang = 'en')))
              & dplyr::if_any(matches('^voting_decision_cantonal_(proposal_\\\\d+|(proportional|majoritarian)_election_\\\\d+_(party|ticket|seat_\\\\d+))$'),
                              ~ is.na(.x) | !(.x %in% fokus::response_options(type = 'abstain', lang = 'en'))))"""
[who.filter.negative]
de = """
dplyr::filter(participation == 'nicht teilgenommen'
              | dplyr::if_all(matches('^voting_decision_federal_(proposal_\\\\d+|(proportional|majoritarian)_election_\\\\d+_(party|ticket|seat_\\\\d+))$'),
                              ~ .x %in% fokus::response_options(type = 'abstain', lang = 'de'))
              | dplyr::if_all(matches('^voting_decision_cantonal_(proposal_\\\\d+|(proportional|majoritarian)_election_\\\\d+_(party|ticket|seat_\\\\d+))$'),
                              ~ .x %in% fokus::response_options(type = 'abstain', lang = 'de')))"""
en = """
dplyr::filter(participation == 'nicht teilgenommen'
              | dplyr::if_all(matches('^voting_decision_federal_(proposal_\\\\d+|(proportional|majoritarian)_election_\\\\d+_(party|ticket|seat_\\\\d+))$'),
                              ~ .x %in% fokus::response_options(type = 'abstain', lang = 'en'))
              | dplyr::if_all(matches('^voting_decision_cantonal_(proposal_\\\\d+|(proportional|majoritarian)_election_\\\\d+_(party|ticket|seat_\\\\d+))$'),
                              ~ .x %in% fokus::response_options(type = 'abstain', lang = 'en')))"""

[[who]]
ballot_types = [ "election" ]
value.de = "Teilnehmende vergangene eidgenössische Verhältniswahl"
value.en = "participants in past federal proportional election"
description.de = "All jene Respondenten, welche die Frage zur Teilnahme an den vergangenen eidgenössischen Wahlen (`participation_past_federal_elections`) mit _teilgenommen_ (`1`) beantwortet haben."
[who.filter.positive]
de = "dplyr::filter(participation_past_federal_elections == 'teilgenommen')"
en = "dplyr::filter(participation_past_federal_elections == 'participated')"
[who.filter.negative]
de = "dplyr::filter(participation_past_federal_elections == 'nicht teilgenommen oder leer eingelegt')"
en = "dplyr::filter(participation_past_federal_elections == 'not participated or empty (blank vote)')"

[[who]]
ballot_types = [ "election" ]
value.de = "Teilnehmende vergangene kantonale Verhältniswahl"
value.en = "participants in past cantonal proportional election"
description.de = "All jene Respondenten, welche die Frage zur Teilnahme an den vergangenen kantonalen Wahlen (`participation_past_cantonal_elections`) mit _teilgenommen_ (`1`) beantwortet haben."
[who.filter.positive]
de = "dplyr::filter(participation_past_cantonal_elections == 'teilgenommen')"
en = "dplyr::filter(participation_past_cantonal_elections == 'participated')"
[who.filter.negative]
de = "dplyr::filter(participation_past_cantonal_elections == 'nicht teilgenommen oder leer eingelegt')"
en = "dplyr::filter(participation_past_cantonal_elections == 'not participated or empty (blank vote)')"

[[who]]
ballot_types = [ "referendum" ]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton) }"
value.de = "Ja-Stimmende eidgenössische Vorlage {i}"
value.en = "yes-voters of federal proposal {i}"
description.de = "All jene Respondenten, welche die Frage zum Stimmentscheid bei{ ifelse(proposal_name_gender(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, type = 'short') == 'feminine', ' der', 'm') } eidgenössischen _{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_ mit _Ja (angenommen)_ (`1`) beantwortet haben."
[who.filter.positive]
de = "dplyr::filter(voting_decision_federal_proposal_{i} == 'Ja (angenommen)')"
en = "dplyr::filter(voting_decision_federal_proposal_{i} == 'yes (affirmative vote)')"
[who.filter.negative]
de = "dplyr::filter(voting_decision_federal_proposal_{i} %in% c('Nein (abgelehnt)', NA))"
en = "dplyr::filter(voting_decision_federal_proposal_{i} %in% c('no (negative vote)', NA))"

[[who]]
ballot_types = [ "referendum" ]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton) }"
value.de = "Nein-Stimmende eidgenössische Vorlage {i}"
value.en = "no-voters of federal proposal {i}"
description.de = "All jene Respondenten, welche die Frage zum Stimmentscheid bei{ ifelse(proposal_name_gender(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, type = 'short') == 'feminine', ' der', 'm') } eidgenössischen _{ proposal_name(ballot_date = ballot_date, lvl = 'federal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_ mit _Nein (abgelehnt)_ (`2`) beantwortet haben."
[who.filter.positive]
de = "dplyr::filter(voting_decision_federal_proposal_{i} == 'Nein (abgelehnt)')"
en = "dplyr::filter(voting_decision_federal_proposal_{i} == 'no (negative vote)')"
[who.filter.negative]
de = "dplyr::filter(voting_decision_federal_proposal_{i} %in% c('Ja (angenommen)', NA))"
en = "dplyr::filter(voting_decision_federal_proposal_{i} %in% c('yes (affirmative vote)', NA))"

[[who]]
ballot_types = [ "referendum" ]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) }"
value.de = "Ja-Stimmende kantonale Vorlage {i}"
value.en = "yes-voters of cantonal proposal {i}"
description.de = "All jene Respondenten, welche die Frage zum Stimmentscheid bei{ ifelse(proposal_name_gender(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'short') == 'feminine', ' der', 'm') } kantonalen _{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_ mit _Ja (angenommen)_ (`1`) beantwortet haben."
[who.filter.positive]
de = "dplyr::filter(voting_decision_cantonal_proposal_{i} == 'Ja (angenommen)')"
en = "dplyr::filter(voting_decision_cantonal_proposal_{i} == 'yes (affirmative vote)')"
[who.filter.negative]
de = "dplyr::filter(voting_decision_cantonal_proposal_{i} %in% c('Nein (abgelehnt)', NA))"
en = "dplyr::filter(voting_decision_cantonal_proposal_{i} %in% c('no (negative vote)', NA))"

[[who]]
ballot_types = [ "referendum" ]
i = "{ proposal_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton) }"
value.de = "Nein-Stimmende kantonale Vorlage {i}"
value.en = "no-voters of cantonal proposal {i}"
description.de = "All jene Respondenten, welche die Frage zum Stimmentscheid bei{ ifelse(proposal_name_gender(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, type = 'short') == 'feminine', ' der', 'm') } kantonalen _{ proposal_name(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, proposal_nr = i, lang = 'de', type = 'short') }_ mit _Nein (abgelehnt)_ (`2`) beantwortet haben."
[who.filter.positive]
de = "dplyr::filter(voting_decision_cantonal_proposal_{i} == 'Nein (abgelehnt)')"
en = "dplyr::filter(voting_decision_cantonal_proposal_{i} == 'no (negative vote)')"
[who.filter.negative]
de = "dplyr::filter(voting_decision_cantonal_proposal_{i} %in% c('Ja (angenommen)', NA))"
en = "dplyr::filter(voting_decision_cantonal_proposal_{i} %in% c('yes (affirmative vote)', NA))"

[[who]]
value.de = "Erwerbstätige"
value.en = "economically active persons"
description.de = "All jene Respondenten, welche entweder die Frage zur Beschäftigungssituation (`employment_situation`) mit einer der ersten vier Antwortoptionen (`1`–`4`) beantwortet haben oder die Zusatzfrage zum Teilzeiterwerb (`employment_situation_routing`) mit _ja_ (`1`) beantwortet haben."
[who.filter.positive]
de = "dplyr::filter(as.integer(employment_situation) < 5L | employment_situation_routing == 'ja')"
en = "dplyr::filter(as.integer(employment_situation) < 5L | employment_situation_routing == 'yes (working)')"
[who.filter.negative]
de = "dplyr::filter(as.integer(employment_situation) > 4L & (employment_situation_routing %in% c('nein', NA)))"
en = "dplyr::filter(as.integer(employment_situation) > 4L & (employment_situation_routing %in% c('no (not working)', NA)))"

[[who]]
value.de = "Nichterwerbstätige"
value.en = "economically inactive persons"
description.de = "All jene Respondenten, welche entweder die Frage zur Beschäftigungssituation (`employment_situation`) mit einer der letzten sechs Antwortoptionen (`5`–`10`) beantwortet haben oder die Zusatzfrage zum Teilzeiterwerb (`employment_situation_routing`) mit _Nein_ (`2`) beantwortet haben."
[who.filter.positive]
de = "dplyr::filter(as.integer(employment_situation) > 4L | employment_situation_routing == 'nein')"
en = "dplyr::filter(as.integer(employment_situation) > 4L | employment_situation_routing == 'no (not working)')"
[who.filter.negative]
de = "dplyr::filter(as.integer(employment_situation) < 5L & (employment_situation_routing %in% c('ja', NA)))"
en = "dplyr::filter(as.integer(employment_situation) < 5L & (employment_situation_routing %in% c('yes (working)', NA)))"

[[who]]
value.de = "nichterwerbstätige Online-Respondenten"
value.en = "economically inactive online respondents"
description.de = "All jene Online-Respondenten (`questionnaire_channel = 1`), welche entweder die Frage zur Beschäftigungssituation (`employment_situation`) mit einer der letzten sechs Antwortoptionen (`5`–`10`) beantwortet haben oder die Zusatzfrage zum Teilzeiterwerb (`employment_situation_routing`) mit _nein_ (`2`) beantwortet haben."
[who.filter.positive]
de = "dplyr::filter(questionnaire_channel == 'online' & (as.integer(employment_situation) > 4L | employment_situation_routing == 'nein'))"
en = "dplyr::filter(questionnaire_channel == 'online' & (as.integer(employment_situation) > 4L | employment_situation_routing == 'no (not working)'))"
[who.filter.negative]
de = "dplyr::filter(questionnaire_channel == 'print' & (as.integer(employment_situation) < 5L & (employment_situation_routing %in% c('ja', NA))))"
en = "dplyr::filter(questionnaire_channel == 'print' & (as.integer(employment_situation) < 5L & (employment_situation_routing %in% c('yes (working)', NA))))"

[[who]]
value.de = "Angestellte"
value.en = "employees"
description.de = "All jene Respondenten, welche die Frage zur Beschäftigungssituation (`employment_situation`) mit _AngestellteR_ (`3`) beantwortet haben."
[who.filter.positive]
de = "dplyr::filter(employment_situation == 'AngestellteR')"
en = "dplyr::filter(employment_situation == 'employee')"
[who.filter.negative]
de = "dplyr::filter(employment_situation != 'AngestellteR' | is.na(employment_situation))"
en = "dplyr::filter(employment_situation != 'employee' | is.na(employment_situation))"

[[who]]
value.de = "ehemals Angestellte Online-Respondenten"
value.en = "economically inactive online respondents"
description.de = "All jene nichterwerbstätige Online-Respondenten (`questionnaire_channel = 1 & employment_situation > 4`), welche die Frage zur ehemaligen Beschäftigungssituation (`former_employment_situation`) mit _AngestellteR_ (`3`) beantwortet haben."
[who.filter.positive]
de = "dplyr::filter(former_employment_situation == 'AngestellteR')"
en = "dplyr::filter(former_employment_situation == 'employee')"
[who.filter.negative]
de = "dplyr::filter(former_employment_situation != 'AngestellteR' | is.na(former_employment_situation))"
en = "dplyr::filter(former_employment_situation != 'employee' | is.na(former_employment_situation))"

[[who]]
value.de = "Nicht-Alleinwohnende"
value.en = "persons not living alone"
description.de = "All jene Respondenten, welche die Frage zur Haushaltsgrösse (`household_size`) nicht mit _1 (Ich lebe alleine)_ (`1`) beantwortet haben."
[who.filter]
positive = "dplyr::filter(household_size > 1L)"
negative = "dplyr::filter(household_size == 1L)"

[[who]]
ballot_types = [ "election" ]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional') }"
value.de = "Listenabändernde eidgenössische Verhältniswahl {i}"
value.en = "ticket modifiers in federal proportional election {i}"
description.de = "All jene Teilnehmende (`participation = 1`), welche die Frage zur Listenabänderung bei der eidgenössischen Verhältniswahl {i} (`ticket_modification_federal_proportional_election_{i}`) mit _bestehende Liste verändert oder eigene Liste zusammengestellt_ (`2`) beantwortet haben."
[who.filter.positive]
de = """
dplyr::filter(participation == 'teilgenommen'
              & ticket_modification_federal_proportional_election_{i} == 'bestehende Liste verändert oder eigene Liste zusammengestellt')"""
en = """
dplyr::filter(participation == 'participated'
              & ticket_modification_federal_proportional_election_{i} == 'modified existing or compiled custom ticket')"""
[who.filter.negative]
de = """
dplyr::filter(participation == 'nicht teilgenommen'
              | (participation == 'teilgenommen'
                 & ticket_modification_federal_proportional_election_{i} %in% c('unveränderte Liste', NA)))"""
en = """
dplyr::filter(participation == 'not participated'
              | (participation == 'participated'
                 & ticket_modification_federal_proportional_election_{i} %in% c('unmodified ticket', NA)))"""

[[who]]
ballot_types = [ "election" ]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional') }"
value.de = "Listenabändernde kantonale Verhältniswahl {i}"
value.en = "ticket modifiers in cantonal proportional election {i}"
description.de = "All jene Teilnehmende (`participation = 1`), welche die Frage zur Listenabänderung bei der kantonalen Verhältniswahl {i} (`ticket_modification_cantonal_proportional_election_{i}`) mit _bestehende Liste verändert oder eigene Liste zusammengestellt_ (`2`) beantwortet haben."
[who.filter.positive]
de = """
dplyr::filter(participation == 'teilgenommen'
              & ticket_modification_cantonal_proportional_election_{i} == 'bestehende Liste verändert oder eigene Liste zusammengestellt')"""
en = """
dplyr::filter(participation == 'participated'
              & ticket_modification_cantonal_proportional_election_{i} == 'modified existing or compiled custom ticket')"""
[who.filter.negative]
de = """
dplyr::filter(participation == 'nicht teilgenommen'
              | (participation == 'teilgenommen'
                 & ticket_modification_cantonal_proportional_election_{i} %in% c('unveränderte Liste', NA)))"""
en = """
dplyr::filter(participation == 'not participated'
              | (participation == 'participated'
                 & ticket_modification_cantonal_proportional_election_{i} %in% c('unmodified ticket', NA)))"""

[[who]]
ballot_types = [ "election" ]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'federal', canton = canton, prcd = 'proportional') }"
value.de = "Panaschierende eidgenössische Verhältniswahl {i}"
value.en = "panachers in federal proportional election {i}"
description.de = "All jene Listenabändernde bei der eidgenössischen Verhältniswahl {i} (`participation = 1 & ticket_modification_federal_proportional_election_{i} = 2`), welche die Frage zum Panaschieren (`ticket_modification_federal_proportional_election_{i}_panached`) mit _trifft zu_ (`1`) beantwortet haben."
[who.filter.positive]
de = """
dplyr::filter(participation == 'teilgenommen'
              & ticket_modification_federal_proportional_election_{i} == 'Liste verändert'
              & ticket_modification_federal_proportional_election_{i}_panached == 'trifft zu')"""
en = """
dplyr::filter(participation == 'participated'
              & ticket_modification_federal_proportional_election_{i} == 'modified ticket'
              & ticket_modification_federal_proportional_election_{i}_panached == 'is true')"""
[who.filter.negative]
de = """
dplyr::filter(participation == 'nicht teilgenommen'
              | (participation == 'teilgenommen'
                 & ticket_modification_federal_proportional_election_{i} %in% c('unveränderte Liste', NA))
              | (participation == 'teilgenommen'
                 & ticket_modification_federal_proportional_election_{i} == 'Liste verändert'
                 & ticket_modification_federal_proportional_election_{i}_panached %in% c('trifft nicht zu', NA)))"""
en = """
dplyr::filter(participation == 'not participated'
              | (participation == 'participated'
                 & ticket_modification_federal_proportional_election_{i} %in% c('unmodified ticket', NA))
              | (participation == 'participated'
                 & ticket_modification_federal_proportional_election_{i} == 'modified ticket'
                 & ticket_modification_federal_proportional_election_{i}_panached %in% c('is not true', NA)))"""

[[who]]
ballot_types = [ "election" ]
i = "{ election_nrs(ballot_date = ballot_date, lvl = 'cantonal', canton = canton, prcd = 'proportional') }"
value.de = "Panaschierende kantonale Verhältniswahl {i}"
value.en = "panachers in cantonal proportional election {i}"
description.de = "All jene Listenabändernde bei der kantonalen Verhältniswahl {i} (`participation = 1 & ticket_modification_cantonal_proportional_election_{i} = 2`), welche die Frage zum Panaschieren (`ticket_modification_cantonal_proportional_election_{i}_panached`) mit _trifft zu_ (`1`) beantwortet haben."
[who.filter.positive]
de = """
dplyr::filter(participation == 'teilgenommen'
              & ticket_modification_cantonal_proportional_election_{i} == 'Liste verändert'
              & ticket_modification_cantonal_proportional_election_{i}_panached == 'trifft zu')"""
en = """
dplyr::filter(participation == 'participated'
              & ticket_modification_cantonal_proportional_election_{i} == 'modified ticket'
              & ticket_modification_cantonal_proportional_election_{i}_panached == 'is true')"""
[who.filter.negative]
de = """
dplyr::filter(participation == 'nicht teilgenommen'
              | (participation == 'teilgenommen'
                 & ticket_modification_cantonal_proportional_election_{i} %in% c('unveränderte Liste', NA))
              | (participation == 'teilgenommen'
                 & ticket_modification_cantonal_proportional_election_{i} == 'Liste verändert'
                 & ticket_modification_cantonal_proportional_election_{i}_panached %in% c('trifft nicht zu', NA)))"""
en = """
dplyr::filter(participation == 'not participated'
              | (participation == 'participated'
                 & ticket_modification_cantonal_proportional_election_{i} %in% c('unmodified ticket', NA))
              | (participation == 'participated'
                 & ticket_modification_cantonal_proportional_election_{i} == 'modified ticket'
                 & ticket_modification_cantonal_proportional_election_{i}_panached %in% c('is not true', NA)))"""

[[who]]
value.de = "Klimaneutrale"
value.en = "climate neutrals"
description.de = "All jene Respondenten, welche die Frage zur Schweizer Klimaneutralität bejahten (`attitude_climate_neutral_switzerland in (1, 2, 3)`.)"
[who.filter.positive]
de = "dplyr::filter(attitude_climate_neutral_switzerland %in% c('ja, so schnell wie nur möglich', 'ja, bis spätestens 2035', 'ja, bis spätestens 2050'))"
en = "dplyr::filter(attitude_climate_neutral_switzerland %in% c('yes, as soon as possible', 'yes, by 2035 at the latest', 'yes, by 2050 at the latest'))"
[who.filter.negative]
de = "dplyr::filter(attitude_climate_neutral_switzerland %in% c('no', NA))"
en = "dplyr::filter(attitude_climate_neutral_switzerland %in% c('no', NA))"


## political parties
## NOTES:
## - `date_begin` defaults to `1970-01-01`.
## - `date_ends` defaults to `2099-12-31`.
## - `en.short` defaults to `de.short` (we don't actually translate party names because it seems to be a quite hopeless endeavor).
[[party]]
code = 1
de.long = "Schweizerische Volkspartei"
de.short = "SVP"
[[party]]
code = 2
de.long = "Sozialdemokratische Partei"
de.short = "SP"
[[party]]
code = 3
de.long = "FDP.Die Liberalen"
de.short = "FDP"
[[party]]
code = 4
de.long = "Christlichdemokratische Volkspartei"
de.short = "CVP"
date_end = 2020-10-31
[[party]]
code = 9
de.long = "Die Mitte"
de.short = "Mitte"
date_begin = 2021-01-01
[[party]]
code = 5
de.long = "Grüne Partei"
de.short = "Grüne"
[[party]]
code = 6
de.long = "Grünliberale Partei"
de.short = "glp"
[[party]]
code = 7
de.long = "Evangelische Volkspartei"
de.short = "EVP"
[[party]]
code = 8
de.long = "Bürgerlich-Demokratische Partei"
de.short = "BDP"
date_end = 2020-10-31


## recurring response option
[response_options.dunno]
code = 99
de.main = "weiss nicht"
de.forgotten = "weiss nicht mehr"
en.main = "don't know"
en.forgotten = "can't remember"
[response_options.custom]
code = 90
de.main = "etwas anderes: ✍ (Freitextfeld)"
de.party = "eine andere, nämlich: ✍ (Freitextfeld)"
en.main = "custom answer"
[response_options.abstain]
code = 88
de.main = "leer eingelegt/nicht abgestimmt"
de.election.proportional = "keine (leer eingelegt oder nicht teilgenommen)"
de.election.majoritarian = "niemanden (leer eingelegt oder nicht teilgenommen)"
de.past = "nicht teilgenommen oder leer eingelegt"
en.main = "empty (blank vote) or not voted"
en.past = "not participated or empty (blank vote)"
[response_options.refusal]
code = 80
de.main = "keine Angabe"
en.main = "no answer"
[response_options.other]
code = 77
de.candidate = "jemand anderes (nicht nominiert)"
en.candidate = "someone else (not nominated)"
[response_options.unspecific]
code = 20
de.main = "kein spezieller Grund"
en.main = "no specific reason"
[response_options.none]
code = 0
de.plural = "keine"
de.masculine = "keiner"
de.neuter = "keines"
de.ticket = "keine (selbsterstellte Liste ohne Listennummer/Partei)"
en.ticket = "none (custom ticket without ticket number)"
en.main = "none"
[response_options.yes]
code = 1
de.main = "Ja (angenommen)"
en.main = "yes (affirmative vote)"
[response_options.no]
code = 2
de.main = "Nein (abgelehnt)"
en.main = "no (negative vote)"
